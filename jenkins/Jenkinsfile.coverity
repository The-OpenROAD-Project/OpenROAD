@Library('utils@or-v2.0.1') _

timeout(time: 2, unit: 'HOURS') {
    node {

        stage('Checkout'){
            checkout scm;
        }

        def DOCKER_IMAGE;
        stage('Build and Push Docker Image') {
            DOCKER_IMAGE = dockerPush('ubuntu22.04', 'openroad');
            echo "Docker image is ${DOCKER_IMAGE}";
        }

        docker.image(DOCKER_IMAGE).inside('--user=root --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /home/jenkins/cov-latest:/root/cov-latest') {
            stage("Setup") {
                sh label: 'Configure git', script: "git config --system --add safe.directory '*'";
            }
            stage('Run Static Code Coverage') {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    withCredentials([string(credentialsId: 'COVERITY_TOKEN', variable: 'TOKEN')]) {
                        sh label: 'CodeCoverage Script', script: '''
                            export PATH=/root/cov-latest/bin:$PATH
                            ./etc/CodeCoverage.sh static ${TOKEN}
                        ''';
                    }
                }
                archiveArtifacts artifacts: 'openroad.tgz';
            }
        }

        stage('Send Email Report') {
            sendEmail();
        }

    }
}

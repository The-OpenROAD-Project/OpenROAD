@Library('utils@or-v2.0.1') _

node {

    env.EQUIVALENCE_CHECK = 1;

    stage('Checkout'){
        checkout scm;
    }

    def DOCKER_IMAGE;
    stage('Build and Push Docker Image') {
        DOCKER_IMAGE = dockerPush("ubuntu22.04", "openroad");
        echo "Docker image is $DOCKER_IMAGE";
    }

    stage('Build and Stash bins') {
        buildBinsOR(DOCKER_IMAGE);
    }

    stage("Build") {
        docker.image("openroad/ubuntu22.04-dev:${DOCKER_IMAGE_TAG}").inside('--user=root --privileged -v /var/run/docker.sock:/var/run/docker.sock') {
            sh "git config --system --add safe.directory '*'";
            sh "./etc/Build.sh -no-warnings";
            stash name: "build", includes: "build/**";
        }
    }

    stage('Test Matrix') {

        Map tasks = [failFast: false];

        def ISPD_YEAR = ['18', '19'];
        def TEST_TO_RUN = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];
        ISPD_YEAR.each { ispd_year ->
            TEST_TO_RUN.each { test_to_run ->
                tasks["ISPD ${ispd_year} TEST ${test_to_run}"] = {
                    node {
                        checkout scm;
                        try {
                            docker.image(DOCKER_IMAGE).inside('--user=root --privileged -v /var/run/docker.sock:/var/run/docker.sock') {
                                unstash "build";
                                sh "python3 src/drt/test/run-ispd.py --program $WORKSPACE/build/src/openroad --tests ispd${ispd_year}_test${test_to_run}";
                            }
                        } finally {
                            archiveArtifacts "**/*.tar.gz, **/*.log";
                        }
                    }
                }
            }
        }

        tasks["GPL Tests"] = {
            node {
                checkout scm;
                try {
                    docker.image("openroad/ubuntu22.04-dev:${DOCKER_IMAGE_TAG}").inside('--user=root --privileged -v /var/run/docker.sock:/var/run/docker.sock') {
                        unstash "build";
                        sh "./src/gpl/test/regression-large";
                    }
                } finally {
                    archiveArtifacts "**/*.tar.gz, **/*.log";
                }
            }
        }

        parallel(tasks)

    }

    stage('Send Email Report') {
        sendEmail();
    }

}

pipeline {
  agent any;
  options {
    timeout(time: 9, unit: 'HOURS')
  }
  environment {
    COMMIT_AUTHOR_EMAIL = sh (returnStdout: true, script: "git --no-pager show -s --format='%ae'").trim();
  }
  stages {
    stage("Build") {
      steps {
        sh "./etc/Build.sh -no-warnings";
        stash name: "build", includes: "build/**";
      }
    }

    stage('Test Matrix') {
      matrix {
        agent any;
        axes {
          axis {
            name 'ISPD_YEAR';
            values '18', '19';
          }
          axis {
            name 'TEST_TO_RUN';
            values '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'GPL';
          }
        }
        excludes {
          // run GPL test only once
          exclude {
            axis {
              name 'ISPD_YEAR';
              values '19';
            }
            axis {
              name 'TEST_TO_RUN';
              values 'GPL';
            }
          }
        }
        stages {
          stage('Run Tests') {
            steps {
              script {

                if (env.TEST_TO_RUN != "GPL") {
                  stage("ISPD ${ISPD_YEAR} TEST ${TEST_TO_RUN}") {
                    unstash "build";
                    sh "python3 src/drt/test/run-ispd.py --program $WORKSPACE/build/src/openroad --tests ispd${ISPD_YEAR}_test${TEST_TO_RUN}";
                  }
                }

                if (env.TEST_TO_RUN == "GPL") {
                  stage("GPL Tests") {
                    unstash "build";
                    sh "./src/gpl/test/regression-large";
                  }
                }

              }
            }
          }
        }
        post {
          always {
            archiveArtifacts "**/*.tar.gz, **/*.log";
          }
        }

      }
    }
  }

  post {
    failure {
      script {
        emailext (
            to: "$COMMIT_AUTHOR_EMAIL, \$DEFAULT_RECIPIENTS",
            subject: '$DEFAULT_SUBJECT',
            body: '$DEFAULT_CONTENT',
            );
      }
    }
  }
}

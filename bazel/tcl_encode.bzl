###############################################################################
##
## BSD 3-Clause License
##
## Copyright (c) 2025, Precision Innovations Inc.
## Copyright (c) 2025 Google LLC
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
##
## * Redistributions of source code must retain the above copyright notice, this
##   list of conditions and the following disclaimer.
##
## * Redistributions in binary form must reproduce the above copyright notice,
##   this list of conditions and the following disclaimer in the documentation
##   and#or other materials provided with the distribution.
##
## * Neither the name of the copyright holder nor the names of its
##   contributors may be used to endorse or promote products derived from
##   this software without specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
##
###############################################################################

"""Wraps the contents of tcl scripts as a cc files.

The rules wrap the tcl scripts in a extern c character array.
"""

def _tcl_encode_impl(ctx):
    """Generates a single C++ file from the provided srcs in a DefaultInfo.
    """
    outfile_name = ctx.attr.out if ctx.attr.out else ctx.attr.name + ".cc"
    output_file = ctx.actions.declare_file(outfile_name)

    args = ctx.actions.args()
    args.add(ctx.file._encode_script)
    args.add(output_file)
    args.add(ctx.attr.char_array_name)
    args.add_all(ctx.files.srcs)

    ctx.actions.run(
        outputs = [output_file],
        inputs = ctx.files.srcs,
        arguments = [args],
        tools = [ctx.executable._tclsh, ctx.file._encode_script],
        executable = ([file for file in ctx.files._tclsh if file.basename == "tclsh"][0]),
    )
    return [DefaultInfo(files = depset([output_file]))]

tcl_encode = rule(
    implementation = _tcl_encode_impl,
    attrs = {
        "char_array_name": attr.string(
            doc = "The name of the extern string array value in the generated file.",
            mandatory = True,
        ),
        "out": attr.string(
            doc = "The name of the C++ source file generated by these rules.",
        ),
        "srcs": attr.label_list(
            allow_empty = False,
            allow_files = [".tcl"],
            doc = "Tcl files to be wrapped.",
        ),
        "_encode_script": attr.label(
            default = "//:src/sta/etc/TclEncode.tcl",
            allow_single_file = True,
        ),
        "_tclsh": attr.label(
            default = "@tk_tcl//:tclsh",
            executable = True,
            cfg = "exec",
        ),
    },
)

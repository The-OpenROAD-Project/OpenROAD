Footprint library {

  proc calculate_required_io_pg_pairs {} {
    set drive_strength 0
    foreach padcell [ICeWall::get_footprint_padcells] {
      set drive_strength [ICeWall::get_padcell_parameter $padcell drive_strength]
    }
    return $drive_strength / 32
  }
  
  proc calculate_required_core_pg_pairs {} {
    set drive_strength 0
    foreach padcell [ICeWall::get_footprint_padcells] {
      set drive_strength [ICeWall::get_padcell_parameter $padcell drive_strength]
    }
    return $drive_strength / 32
  }
  
  proc add_control_cells {} {
    # Add a pdt cell for every 8 signal pads bookended by cbk cells

    set cbk_idx 0
    set pdt_idx 0
    ste sig_idx 0
    
    ICeWall::insert cbk$cbk_idx cbk ""
    incr $cbk_idx

    foreach padcell [ICeWall::get_footprint_padcells] {
      if {[ICeWall::get_padcell_type $padcell] == "sig"} {
        incr sig_idx
        if {$sig_idx % 8 == 4} {
          ICeWall::insert pdt$pdt_idx pdt $padcell
          incr $pdt_idx
        }
        if {$sig_idx % 8 == 0} {
          ICeWall::insert cbk$cbk_idx cbk $padcell
          incr $cbk_idx
        }
      }
    }
  }
  
  types {
    sig     PADCELL_SIG
    vda     PADCELL_VDD
    vsa     PADCELL_VSS
    vdd     PADCELL_VDD
    vss     PADCELL_VSS
    vddio   PADCELL_VDDIO
    vssio   PADCELL_VSSIO
    cbk     PADCELL_CBRK
    pdt     PADCELL_PWRDET
    fbk     PADCELL_FBRK
    bondpad PAD
    corner  PAD_CORNER
    fill    {PAD_FILL5 PAD_FILL1}
    marker  MARKER
    bump    DUMMY_BUMP
  }

  bump {
    pitch 160
    pin_name PAD
    spacing_to_edge {151 + 14}
    cell_name {
      140 DUMMY_BUMP
    }
  }
  
  num_pads_per_tile {
    130 4
    160 5
  }

  rdl {
    layer_name metal10
    width 10.0
    spacing 10.0
  }

  breakers {cbk fbk}
  connect_by_abutment {
    RETN
    SNS
    DVDD
    DVSS
  }

  required_io_pg_pairs calculate_required_io_pairs
  
  cells {
    PAD {
      pad_pin_name PAD
      orient {bottom R0 right R90 top R180 left R270}
      type bondpad
    }
    PADCELL_SIG {
      cell_name {top PADCELL_SIG_V bottom PADCELL_SIG_V left PADCELL_SIG_H right PADCELL_SIG_H}
      is_padcell 1
      type sig
      orient {bottom R0 right R90 top R180 left R270}
      pad_pin_name PAD
      parameters {
        direction {"input" "output" "inout"} 
        drive_strength {1 2 4 8} 
        schmitt {0 1} 
        pull {"no" "hi" "lo"} 
        drive {"low" "mid" "lrg" "xlrg"} 
        core_power {}
        core_ground {}
        io_power {}
        io_ground {}
        core_signal {}
        signal {}
        ctrl {}
      }
      parameter_defaults {
        direction "input" 
        pull "no" 
        drive "xlrg"
        drive_strength 8
        core_power "VDD"
        core_ground "VSS"
        io_power "DVDD"
        io_ground "DVSS"
        ctrl 0
      }
      signal_connections {
        OE    {$direction == "input" ? "1'b1" : $direction == "output" ? "1'b0"}  
        PU    {($direction == "input"  || $direction == "inout") && $pull != "up" ? "1'b1" : "1'b0"}
        DRV   {($direction == "output" || $direction == "inout") ? ($drive == "low" ? "2'b00" : $drive == "mid" ? "2'b01" : $drive == "lrg" ? "2'b10" : $drive == "xlrg" ? "2'b11" : "2'b00") : "2'b00"}
        Y     {($direction == "input"  || $direction == "inout") ? $core_signal : ""}
        A     {($direction == "output" || $direction == "inout") ? $core_signal : "1'b0"}
      }
      special_connections {
        PAD     {$signal}
      }
    }
    PADCELL_VDD {
      cell_name {top PADCELL_VDD_V bottom PADCELL_VDD_V left PADCELL_VDD_H right PADCELL_VDD_H}
      is_padcell 1
      type vdd
      pad_pin_name VDD
      orient {bottom R0 right R90 top R180 left R270}
      special_connections {
        PAD     {1 ? $signal : $signal}
      }
    }
    PADCELL_VSS {
      cell_name {top PADCELL_VSS_V bottom PADCELL_VSS_V left PADCELL_VSS_H right PADCELL_VSS_H}
      is_padcell 1
      type vss
      pad_pin_name VSS
      orient {bottom R0 right R90 top R180 left R270}
      special_connections {
        PAD     {1 ? $signal : $signal}
      }
    }
    PADCELL_VDDIO {
      cell_name {top PADCELL_VDDIO_V bottom PADCELL_VDDIO_V left PADCELL_VDDIO_H right PADCELL_VDDIO_H}
      is_padcell 1
      orient {bottom R0 right R90 top R180 left R270}
      pad_pin_name DVDD
      special_connections {
        PAD     {1 ? $signal : $signal}
      }
    }
    PADCELL_VSSIO {
      cell_name {top PADCELL_VSSIO_V bottom PADCELL_VSSIO_V left PADCELL_VSSIO_H right PADCELL_VSSIO_H}
      is_padcell 1
      orient {bottom R0 right R90 top R180 left R270}
      pad_pin_name DVSS
      special_connections {
        PAD     {1 ? $signal : $signal}
      }
    }
    PADCELL_PWRDET {
      physical_only 1
      cell_name {bottom PADCELL_PWRDET_V right PADCELL_PWRDET_H top PADCELL_PWRDET_V left PADCELL_PWRDET_H}
      orient {bottom R0 right R90 top R180 left R270}
      is_control 1
    }
    PADCELL_CBRK {
      physical_only 1
      cell_name {bottom PADCELL_CBRK_V right PADCELL_CBRK_H top PADCELL_CBRK_V left PADCELL_CBRK_H}
      orient {bottom R0 right R90 top R180 left R270}
      breaks {
        RETN {RETNA RETNB}
        SNS  {SNSA  SNSB}
      }
    }
    PADCELL_FBRK {
      physical_only 1
      cell_name {bottom PADCELL_FBRK_V right PADCELL_FBRK_H top PADCELL_FBRK_V left PADCELL_FBRK_H}
      orient {bottom R0 right R90 top R180 left R270}
      breaks {
        RETN {RETNA RETNB}
        SNS  {SNSA  SNSB}
        DVDD {DVDDA DVDDB}
        DVSS {DVSSA DVSSB}
      }
    }
    PAD_FILL5 {
      cell_name {bottom PAD_FILL5_V right PAD_FILL5_H top PAD_FILL5_V left PAD_FILL5_H}
      orient {bottom R0 right MY top R180 left MX}
      physical_only 1
    }
    PAD_FILL1 {
      cell_name {bottom PAD_FILL1_V right PAD_FILL1_H top PAD_FILL1_V left PAD_FILL1_H}
      orient {bottom R0 right MY top R180 left MX}
      physical_only 1
    }
    PAD_CORNER {
      orient {ll R0 lr R90 ur R180 ul R270}
      physical_only 1
    }
  }
}



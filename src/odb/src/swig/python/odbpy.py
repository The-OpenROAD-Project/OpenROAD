# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _odbpy
else:
    import _odbpy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _odbpy.delete_SwigPyIterator

    def value(self):
        return _odbpy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _odbpy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _odbpy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _odbpy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _odbpy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _odbpy.SwigPyIterator_copy(self)

    def next(self):
        return _odbpy.SwigPyIterator_next(self)

    def __next__(self):
        return _odbpy.SwigPyIterator___next__(self)

    def previous(self):
        return _odbpy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _odbpy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _odbpy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _odbpy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _odbpy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _odbpy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _odbpy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _odbpy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _odbpy:
_odbpy.SwigPyIterator_swigregister(SwigPyIterator)

class vector_str(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odbpy.vector_str_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odbpy.vector_str___nonzero__(self)

    def __bool__(self):
        return _odbpy.vector_str___bool__(self)

    def __len__(self):
        return _odbpy.vector_str___len__(self)

    def __getslice__(self, i, j):
        return _odbpy.vector_str___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odbpy.vector_str___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odbpy.vector_str___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odbpy.vector_str___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odbpy.vector_str___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odbpy.vector_str___setitem__(self, *args)

    def pop(self):
        return _odbpy.vector_str_pop(self)

    def append(self, x):
        return _odbpy.vector_str_append(self, x)

    def empty(self):
        return _odbpy.vector_str_empty(self)

    def size(self):
        return _odbpy.vector_str_size(self)

    def swap(self, v):
        return _odbpy.vector_str_swap(self, v)

    def begin(self):
        return _odbpy.vector_str_begin(self)

    def end(self):
        return _odbpy.vector_str_end(self)

    def rbegin(self):
        return _odbpy.vector_str_rbegin(self)

    def rend(self):
        return _odbpy.vector_str_rend(self)

    def clear(self):
        return _odbpy.vector_str_clear(self)

    def get_allocator(self):
        return _odbpy.vector_str_get_allocator(self)

    def pop_back(self):
        return _odbpy.vector_str_pop_back(self)

    def erase(self, *args):
        return _odbpy.vector_str_erase(self, *args)

    def __init__(self, *args):
        _odbpy.vector_str_swiginit(self, _odbpy.new_vector_str(*args))

    def push_back(self, x):
        return _odbpy.vector_str_push_back(self, x)

    def front(self):
        return _odbpy.vector_str_front(self)

    def back(self):
        return _odbpy.vector_str_back(self)

    def assign(self, n, x):
        return _odbpy.vector_str_assign(self, n, x)

    def resize(self, *args):
        return _odbpy.vector_str_resize(self, *args)

    def insert(self, *args):
        return _odbpy.vector_str_insert(self, *args)

    def reserve(self, n):
        return _odbpy.vector_str_reserve(self, n)

    def capacity(self):
        return _odbpy.vector_str_capacity(self)
    __swig_destroy__ = _odbpy.delete_vector_str

# Register vector_str in _odbpy:
_odbpy.vector_str_swigregister(vector_str)

class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odbpy.Point_swiginit(self, _odbpy.new_Point(*args))
    __swig_destroy__ = _odbpy.delete_Point

    def assign(self, p):
        return _odbpy.Point_assign(self, p)

    def __eq__(self, p):
        return _odbpy.Point___eq__(self, p)

    def __ne__(self, p):
        return _odbpy.Point___ne__(self, p)

    def __lt__(self, p):
        return _odbpy.Point___lt__(self, p)

    def __ge__(self, p):
        return _odbpy.Point___ge__(self, p)

    def getX(self):
        return _odbpy.Point_getX(self)

    def getY(self):
        return _odbpy.Point_getY(self)

    def setX(self, x):
        return _odbpy.Point_setX(self, x)

    def setY(self, y):
        return _odbpy.Point_setY(self, y)

    def set(self, x, y):
        return _odbpy.Point_set(self, x, y)

    def rotate90(self):
        return _odbpy.Point_rotate90(self)

    def rotate180(self):
        return _odbpy.Point_rotate180(self)

    def rotate270(self):
        return _odbpy.Point_rotate270(self)

    def x(self, *args):
        return _odbpy.Point_x(self, *args)

    def y(self, *args):
        return _odbpy.Point_y(self, *args)

    @staticmethod
    def crossProduct(p0, p1, p2):
        return _odbpy.Point_crossProduct(p0, p1, p2)
    COLINEAR = _odbpy.Point_COLINEAR
    CW = _odbpy.Point_CW
    CCW = _odbpy.Point_CCW

    @staticmethod
    def rotation(p0, p1, p2):
        return _odbpy.Point_rotation(p0, p1, p2)

    @staticmethod
    def squaredDistance(p0, p1):
        return _odbpy.Point_squaredDistance(p0, p1)

    @staticmethod
    def manhattanDistance(p0, p1):
        return _odbpy.Point_manhattanDistance(p0, p1)

# Register Point in _odbpy:
_odbpy.Point_swigregister(Point)

def Point_crossProduct(p0, p1, p2):
    return _odbpy.Point_crossProduct(p0, p1, p2)

def Point_rotation(p0, p1, p2):
    return _odbpy.Point_rotation(p0, p1, p2)

def Point_squaredDistance(p0, p1):
    return _odbpy.Point_squaredDistance(p0, p1)

def Point_manhattanDistance(p0, p1):
    return _odbpy.Point_manhattanDistance(p0, p1)

class GeomShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def dx(self):
        return _odbpy.GeomShape_dx(self)

    def dy(self):
        return _odbpy.GeomShape_dy(self)

    def xMin(self):
        return _odbpy.GeomShape_xMin(self)

    def yMin(self):
        return _odbpy.GeomShape_yMin(self)

    def xMax(self):
        return _odbpy.GeomShape_xMax(self)

    def yMax(self):
        return _odbpy.GeomShape_yMax(self)

    def getPoints(self):
        return _odbpy.GeomShape_getPoints(self)
    __swig_destroy__ = _odbpy.delete_GeomShape

# Register GeomShape in _odbpy:
_odbpy.GeomShape_swigregister(GeomShape)

class Oct(GeomShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RIGHT = _odbpy.Oct_RIGHT
    LEFT = _odbpy.Oct_LEFT
    UNKNOWN = _odbpy.Oct_UNKNOWN

    def __init__(self, *args):
        _odbpy.Oct_swiginit(self, _odbpy.new_Oct(*args))
    __swig_destroy__ = _odbpy.delete_Oct

    def assign(self, r):
        return _odbpy.Oct_assign(self, r)

    def __eq__(self, r):
        return _odbpy.Oct___eq__(self, r)

    def __ne__(self, r):
        return _odbpy.Oct___ne__(self, r)

    def init(self, p1, p2, width):
        return _odbpy.Oct_init(self, p1, p2, width)

    def getDir(self):
        return _odbpy.Oct_getDir(self)

    def getCenterHigh(self):
        return _odbpy.Oct_getCenterHigh(self)

    def getCenterLow(self):
        return _odbpy.Oct_getCenterLow(self)

    def getWidth(self):
        return _odbpy.Oct_getWidth(self)

    def dx(self):
        return _odbpy.Oct_dx(self)

    def dy(self):
        return _odbpy.Oct_dy(self)

    def xMin(self):
        return _odbpy.Oct_xMin(self)

    def yMin(self):
        return _odbpy.Oct_yMin(self)

    def xMax(self):
        return _odbpy.Oct_xMax(self)

    def yMax(self):
        return _odbpy.Oct_yMax(self)

    def getPoints(self):
        return _odbpy.Oct_getPoints(self)

# Register Oct in _odbpy:
_odbpy.Oct_swigregister(Oct)

class Rect(GeomShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odbpy.Rect_swiginit(self, _odbpy.new_Rect(*args))
    __swig_destroy__ = _odbpy.delete_Rect

    def assign(self):
        return _odbpy.Rect_assign(self)

    def __eq__(self):
        return _odbpy.Rect___eq__(self)

    def __ne__(self):
        return _odbpy.Rect___ne__(self)

    def __lt__(self):
        return _odbpy.Rect___lt__(self)

    def __gt__(self):
        return _odbpy.Rect___gt__(self)

    def __le__(self):
        return _odbpy.Rect___le__(self)

    def __ge__(self):
        return _odbpy.Rect___ge__(self)

    def init(self, x1, y1, x2, y2):
        return _odbpy.Rect_init(self, x1, y1, x2, y2)

    def reset(self, x1, y1, x2, y2):
        return _odbpy.Rect_reset(self, x1, y1, x2, y2)

    def moveTo(self, x, y):
        return _odbpy.Rect_moveTo(self, x, y)

    def moveDelta(self, dx, dy):
        return _odbpy.Rect_moveDelta(self, dx, dy)

    def mergeInit(self):
        return _odbpy.Rect_mergeInit(self)

    def isInverted(self):
        return _odbpy.Rect_isInverted(self)

    def minDXDY(self):
        return _odbpy.Rect_minDXDY(self)

    def maxDXDY(self):
        return _odbpy.Rect_maxDXDY(self)

    def getDir(self):
        return _odbpy.Rect_getDir(self)

    def set_xlo(self, x1):
        return _odbpy.Rect_set_xlo(self, x1)

    def set_xhi(self, x1):
        return _odbpy.Rect_set_xhi(self, x1)

    def set_ylo(self, x1):
        return _odbpy.Rect_set_ylo(self, x1)

    def set_yhi(self, x1):
        return _odbpy.Rect_set_yhi(self, x1)

    def xMin(self):
        return _odbpy.Rect_xMin(self)

    def yMin(self):
        return _odbpy.Rect_yMin(self)

    def xMax(self):
        return _odbpy.Rect_xMax(self)

    def yMax(self):
        return _odbpy.Rect_yMax(self)

    def dx(self):
        return _odbpy.Rect_dx(self)

    def dy(self):
        return _odbpy.Rect_dy(self)

    def getPoints(self):
        return _odbpy.Rect_getPoints(self)

    def ll(self):
        return _odbpy.Rect_ll(self)

    def ul(self):
        return _odbpy.Rect_ul(self)

    def ur(self):
        return _odbpy.Rect_ur(self)

    def lr(self):
        return _odbpy.Rect_lr(self)

    def low(self):
        return _odbpy.Rect_low(self)

    def high(self):
        return _odbpy.Rect_high(self)

    def intersects(self, *args):
        return _odbpy.Rect_intersects(self, *args)

    def overlaps(self, *args):
        return _odbpy.Rect_overlaps(self, *args)

    def contains(self):
        return _odbpy.Rect_contains(self)

    def inside(self):
        return _odbpy.Rect_inside(self)

    def closestPtInside(self, pt):
        return _odbpy.Rect_closestPtInside(self, pt)

    def merge(self, *args):
        return _odbpy.Rect_merge(self, *args)

    def bloat(self, margin, result):
        return _odbpy.Rect_bloat(self, margin, result)

    def intersection(self, result):
        return _odbpy.Rect_intersection(self, result)

    def intersect(self):
        return _odbpy.Rect_intersect(self)

    def area(self):
        return _odbpy.Rect_area(self)

    def margin(self):
        return _odbpy.Rect_margin(self)

    def notice(self, *args):
        return _odbpy.Rect_notice(self, *args)

    def printf(self, *args):
        return _odbpy.Rect_printf(self, *args)

    def _print(self, *args):
        return _odbpy.Rect__print(self, *args)

# Register Rect in _odbpy:
_odbpy.Rect_swigregister(Rect)

class Points(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odbpy.Points_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odbpy.Points___nonzero__(self)

    def __bool__(self):
        return _odbpy.Points___bool__(self)

    def __len__(self):
        return _odbpy.Points___len__(self)

    def __getslice__(self, i, j):
        return _odbpy.Points___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odbpy.Points___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odbpy.Points___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odbpy.Points___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odbpy.Points___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odbpy.Points___setitem__(self, *args)

    def pop(self):
        return _odbpy.Points_pop(self)

    def append(self, x):
        return _odbpy.Points_append(self, x)

    def empty(self):
        return _odbpy.Points_empty(self)

    def size(self):
        return _odbpy.Points_size(self)

    def swap(self, v):
        return _odbpy.Points_swap(self, v)

    def begin(self):
        return _odbpy.Points_begin(self)

    def end(self):
        return _odbpy.Points_end(self)

    def rbegin(self):
        return _odbpy.Points_rbegin(self)

    def rend(self):
        return _odbpy.Points_rend(self)

    def clear(self):
        return _odbpy.Points_clear(self)

    def get_allocator(self):
        return _odbpy.Points_get_allocator(self)

    def pop_back(self):
        return _odbpy.Points_pop_back(self)

    def erase(self, *args):
        return _odbpy.Points_erase(self, *args)

    def __init__(self, *args):
        _odbpy.Points_swiginit(self, _odbpy.new_Points(*args))

    def push_back(self, x):
        return _odbpy.Points_push_back(self, x)

    def front(self):
        return _odbpy.Points_front(self)

    def back(self):
        return _odbpy.Points_back(self)

    def assign(self, n, x):
        return _odbpy.Points_assign(self, n, x)

    def resize(self, *args):
        return _odbpy.Points_resize(self, *args)

    def insert(self, *args):
        return _odbpy.Points_insert(self, *args)

    def reserve(self, n):
        return _odbpy.Points_reserve(self, n)

    def capacity(self):
        return _odbpy.Points_capacity(self)
    __swig_destroy__ = _odbpy.delete_Points

# Register Points in _odbpy:
_odbpy.Points_swigregister(Points)

class Rects(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odbpy.Rects_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odbpy.Rects___nonzero__(self)

    def __bool__(self):
        return _odbpy.Rects___bool__(self)

    def __len__(self):
        return _odbpy.Rects___len__(self)

    def __getslice__(self, i, j):
        return _odbpy.Rects___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odbpy.Rects___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odbpy.Rects___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odbpy.Rects___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odbpy.Rects___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odbpy.Rects___setitem__(self, *args)

    def pop(self):
        return _odbpy.Rects_pop(self)

    def append(self, x):
        return _odbpy.Rects_append(self, x)

    def empty(self):
        return _odbpy.Rects_empty(self)

    def size(self):
        return _odbpy.Rects_size(self)

    def swap(self, v):
        return _odbpy.Rects_swap(self, v)

    def begin(self):
        return _odbpy.Rects_begin(self)

    def end(self):
        return _odbpy.Rects_end(self)

    def rbegin(self):
        return _odbpy.Rects_rbegin(self)

    def rend(self):
        return _odbpy.Rects_rend(self)

    def clear(self):
        return _odbpy.Rects_clear(self)

    def get_allocator(self):
        return _odbpy.Rects_get_allocator(self)

    def pop_back(self):
        return _odbpy.Rects_pop_back(self)

    def erase(self, *args):
        return _odbpy.Rects_erase(self, *args)

    def __init__(self, *args):
        _odbpy.Rects_swiginit(self, _odbpy.new_Rects(*args))

    def push_back(self, x):
        return _odbpy.Rects_push_back(self, x)

    def front(self):
        return _odbpy.Rects_front(self)

    def back(self):
        return _odbpy.Rects_back(self)

    def assign(self, n, x):
        return _odbpy.Rects_assign(self, n, x)

    def resize(self, *args):
        return _odbpy.Rects_resize(self, *args)

    def insert(self, *args):
        return _odbpy.Rects_insert(self, *args)

    def reserve(self, n):
        return _odbpy.Rects_reserve(self, n)

    def capacity(self):
        return _odbpy.Rects_capacity(self)
    __swig_destroy__ = _odbpy.delete_Rects

# Register Rects in _odbpy:
_odbpy.Rects_swigregister(Rects)

class Polygon90Set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odbpy.Polygon90Set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odbpy.Polygon90Set___nonzero__(self)

    def __bool__(self):
        return _odbpy.Polygon90Set___bool__(self)

    def __len__(self):
        return _odbpy.Polygon90Set___len__(self)

    def __getslice__(self, i, j):
        return _odbpy.Polygon90Set___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odbpy.Polygon90Set___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odbpy.Polygon90Set___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odbpy.Polygon90Set___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odbpy.Polygon90Set___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odbpy.Polygon90Set___setitem__(self, *args)

    def pop(self):
        return _odbpy.Polygon90Set_pop(self)

    def append(self, x):
        return _odbpy.Polygon90Set_append(self, x)

    def empty(self):
        return _odbpy.Polygon90Set_empty(self)

    def size(self):
        return _odbpy.Polygon90Set_size(self)

    def swap(self, v):
        return _odbpy.Polygon90Set_swap(self, v)

    def begin(self):
        return _odbpy.Polygon90Set_begin(self)

    def end(self):
        return _odbpy.Polygon90Set_end(self)

    def rbegin(self):
        return _odbpy.Polygon90Set_rbegin(self)

    def rend(self):
        return _odbpy.Polygon90Set_rend(self)

    def clear(self):
        return _odbpy.Polygon90Set_clear(self)

    def get_allocator(self):
        return _odbpy.Polygon90Set_get_allocator(self)

    def pop_back(self):
        return _odbpy.Polygon90Set_pop_back(self)

    def erase(self, *args):
        return _odbpy.Polygon90Set_erase(self, *args)

    def __init__(self, *args):
        _odbpy.Polygon90Set_swiginit(self, _odbpy.new_Polygon90Set(*args))

    def push_back(self, x):
        return _odbpy.Polygon90Set_push_back(self, x)

    def front(self):
        return _odbpy.Polygon90Set_front(self)

    def back(self):
        return _odbpy.Polygon90Set_back(self)

    def assign(self, n, x):
        return _odbpy.Polygon90Set_assign(self, n, x)

    def resize(self, *args):
        return _odbpy.Polygon90Set_resize(self, *args)

    def insert(self, *args):
        return _odbpy.Polygon90Set_insert(self, *args)

    def reserve(self, n):
        return _odbpy.Polygon90Set_reserve(self, n)

    def capacity(self):
        return _odbpy.Polygon90Set_capacity(self)
    __swig_destroy__ = _odbpy.delete_Polygon90Set

# Register Polygon90Set in _odbpy:
_odbpy.Polygon90Set_swigregister(Polygon90Set)

class Polygon90Sets(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _odbpy.Polygon90Sets_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _odbpy.Polygon90Sets___nonzero__(self)

    def __bool__(self):
        return _odbpy.Polygon90Sets___bool__(self)

    def __len__(self):
        return _odbpy.Polygon90Sets___len__(self)

    def __getslice__(self, i, j):
        return _odbpy.Polygon90Sets___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _odbpy.Polygon90Sets___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _odbpy.Polygon90Sets___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _odbpy.Polygon90Sets___delitem__(self, *args)

    def __getitem__(self, *args):
        return _odbpy.Polygon90Sets___getitem__(self, *args)

    def __setitem__(self, *args):
        return _odbpy.Polygon90Sets___setitem__(self, *args)

    def pop(self):
        return _odbpy.Polygon90Sets_pop(self)

    def append(self, x):
        return _odbpy.Polygon90Sets_append(self, x)

    def empty(self):
        return _odbpy.Polygon90Sets_empty(self)

    def size(self):
        return _odbpy.Polygon90Sets_size(self)

    def swap(self, v):
        return _odbpy.Polygon90Sets_swap(self, v)

    def begin(self):
        return _odbpy.Polygon90Sets_begin(self)

    def end(self):
        return _odbpy.Polygon90Sets_end(self)

    def rbegin(self):
        return _odbpy.Polygon90Sets_rbegin(self)

    def rend(self):
        return _odbpy.Polygon90Sets_rend(self)

    def clear(self):
        return _odbpy.Polygon90Sets_clear(self)

    def get_allocator(self):
        return _odbpy.Polygon90Sets_get_allocator(self)

    def pop_back(self):
        return _odbpy.Polygon90Sets_pop_back(self)

    def erase(self, *args):
        return _odbpy.Polygon90Sets_erase(self, *args)

    def __init__(self, *args):
        _odbpy.Polygon90Sets_swiginit(self, _odbpy.new_Polygon90Sets(*args))

    def push_back(self, x):
        return _odbpy.Polygon90Sets_push_back(self, x)

    def front(self):
        return _odbpy.Polygon90Sets_front(self)

    def back(self):
        return _odbpy.Polygon90Sets_back(self)

    def assign(self, n, x):
        return _odbpy.Polygon90Sets_assign(self, n, x)

    def resize(self, *args):
        return _odbpy.Polygon90Sets_resize(self, *args)

    def insert(self, *args):
        return _odbpy.Polygon90Sets_insert(self, *args)

    def reserve(self, n):
        return _odbpy.Polygon90Sets_reserve(self, n)

    def capacity(self):
        return _odbpy.Polygon90Sets_capacity(self)
    __swig_destroy__ = _odbpy.delete_Polygon90Sets

# Register Polygon90Sets in _odbpy:
_odbpy.Polygon90Sets_swigregister(Polygon90Sets)


def newSetFromRect(xLo, yLo, xHi, yHi):
    return _odbpy.newSetFromRect(xLo, yLo, xHi, yHi)

def getPoints(polygon):
    return _odbpy.getPoints(polygon)

def getPolygons(set):
    return _odbpy.getPolygons(set)

def getRectangles(set):
    return _odbpy.getRectangles(set)

def bloatSet(*args):
    return _odbpy.bloatSet(*args)

def shrinkSet(*args):
    return _odbpy.shrinkSet(*args)

def andSet(set1, set2):
    return _odbpy.andSet(set1, set2)

def orSet(set1, set2):
    return _odbpy.orSet(set1, set2)

def orSets(sets):
    return _odbpy.orSets(sets)

def subtractSet(set1, set2):
    return _odbpy.subtractSet(set1, set2)
ADS_MAX_CORNER = _odbpy.ADS_MAX_CORNER
class dbProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STRING_PROP = _odbpy.dbProperty_STRING_PROP
    BOOL_PROP = _odbpy.dbProperty_BOOL_PROP
    INT_PROP = _odbpy.dbProperty_INT_PROP
    DOUBLE_PROP = _odbpy.dbProperty_DOUBLE_PROP

    def getType(self):
        return _odbpy.dbProperty_getType(self)

    def getName(self):
        return _odbpy.dbProperty_getName(self)

    def getPropOwner(self):
        return _odbpy.dbProperty_getPropOwner(self)

    @staticmethod
    def find(*args):
        return _odbpy.dbProperty_find(*args)

    @staticmethod
    def destroyProperties(obj):
        return _odbpy.dbProperty_destroyProperties(obj)

    @staticmethod
    def getProperties(object):
        return _odbpy.dbProperty_getProperties(object)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbProperty_destroy(*args)

    @staticmethod
    def writeProperties(object, out):
        return _odbpy.dbProperty_writeProperties(object, out)

    @staticmethod
    def writePropValue(prop, out):
        return _odbpy.dbProperty_writePropValue(prop, out)

    def __init__(self):
        _odbpy.dbProperty_swiginit(self, _odbpy.new_dbProperty())
    __swig_destroy__ = _odbpy.delete_dbProperty

# Register dbProperty in _odbpy:
_odbpy.dbProperty_swigregister(dbProperty)

def dbProperty_find(*args):
    return _odbpy.dbProperty_find(*args)

def dbProperty_destroyProperties(obj):
    return _odbpy.dbProperty_destroyProperties(obj)

def dbProperty_getProperties(object):
    return _odbpy.dbProperty_getProperties(object)

def dbProperty_destroy(*args):
    return _odbpy.dbProperty_destroy(*args)

def dbProperty_writeProperties(object, out):
    return _odbpy.dbProperty_writeProperties(object, out)

def dbProperty_writePropValue(prop, out):
    return _odbpy.dbProperty_writePropValue(prop, out)

class dbBoolProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odbpy.dbBoolProperty_getValue(self)

    def setValue(self, value):
        return _odbpy.dbBoolProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odbpy.dbBoolProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odbpy.dbBoolProperty_find(object, name)

    def __init__(self):
        _odbpy.dbBoolProperty_swiginit(self, _odbpy.new_dbBoolProperty())
    __swig_destroy__ = _odbpy.delete_dbBoolProperty

# Register dbBoolProperty in _odbpy:
_odbpy.dbBoolProperty_swigregister(dbBoolProperty)

def dbBoolProperty_create(object, name, value):
    return _odbpy.dbBoolProperty_create(object, name, value)

def dbBoolProperty_find(object, name):
    return _odbpy.dbBoolProperty_find(object, name)

class dbStringProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odbpy.dbStringProperty_getValue(self)

    def setValue(self, value):
        return _odbpy.dbStringProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odbpy.dbStringProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odbpy.dbStringProperty_find(object, name)

    def __init__(self):
        _odbpy.dbStringProperty_swiginit(self, _odbpy.new_dbStringProperty())
    __swig_destroy__ = _odbpy.delete_dbStringProperty

# Register dbStringProperty in _odbpy:
_odbpy.dbStringProperty_swigregister(dbStringProperty)

def dbStringProperty_create(object, name, value):
    return _odbpy.dbStringProperty_create(object, name, value)

def dbStringProperty_find(object, name):
    return _odbpy.dbStringProperty_find(object, name)

class dbIntProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odbpy.dbIntProperty_getValue(self)

    def setValue(self, value):
        return _odbpy.dbIntProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odbpy.dbIntProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odbpy.dbIntProperty_find(object, name)

    def __init__(self):
        _odbpy.dbIntProperty_swiginit(self, _odbpy.new_dbIntProperty())
    __swig_destroy__ = _odbpy.delete_dbIntProperty

# Register dbIntProperty in _odbpy:
_odbpy.dbIntProperty_swigregister(dbIntProperty)

def dbIntProperty_create(object, name, value):
    return _odbpy.dbIntProperty_create(object, name, value)

def dbIntProperty_find(object, name):
    return _odbpy.dbIntProperty_find(object, name)

class dbDoubleProperty(dbProperty):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getValue(self):
        return _odbpy.dbDoubleProperty_getValue(self)

    def setValue(self, value):
        return _odbpy.dbDoubleProperty_setValue(self, value)

    @staticmethod
    def create(object, name, value):
        return _odbpy.dbDoubleProperty_create(object, name, value)

    @staticmethod
    def find(object, name):
        return _odbpy.dbDoubleProperty_find(object, name)

    def __init__(self):
        _odbpy.dbDoubleProperty_swiginit(self, _odbpy.new_dbDoubleProperty())
    __swig_destroy__ = _odbpy.delete_dbDoubleProperty

# Register dbDoubleProperty in _odbpy:
_odbpy.dbDoubleProperty_swigregister(dbDoubleProperty)

def dbDoubleProperty_create(object, name, value):
    return _odbpy.dbDoubleProperty_create(object, name, value)

def dbDoubleProperty_find(object, name):
    return _odbpy.dbDoubleProperty_find(object, name)

class dbDatabase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLibs(self):
        return _odbpy.dbDatabase_getLibs(self)

    def findLib(self, name):
        return _odbpy.dbDatabase_findLib(self, name)

    def findMaster(self, name):
        return _odbpy.dbDatabase_findMaster(self, name)

    def getChip(self):
        return _odbpy.dbDatabase_getChip(self)

    def getTech(self):
        return _odbpy.dbDatabase_getTech(self)

    def getChips(self):
        return _odbpy.dbDatabase_getChips(self)

    def getNumberOfMasters(self):
        return _odbpy.dbDatabase_getNumberOfMasters(self)

    def read(self, file):
        return _odbpy.dbDatabase_read(self, file)

    def write(self, file):
        return _odbpy.dbDatabase_write(self, file)

    def writeTech(self, file):
        return _odbpy.dbDatabase_writeTech(self, file)

    def writeLib(self, file, lib):
        return _odbpy.dbDatabase_writeLib(self, file, lib)

    def writeLibs(self, file):
        return _odbpy.dbDatabase_writeLibs(self, file)

    def writeBlock(self, file, block):
        return _odbpy.dbDatabase_writeBlock(self, file, block)

    def writeChip(self, file):
        return _odbpy.dbDatabase_writeChip(self, file)

    def writeWires(self, file, block):
        return _odbpy.dbDatabase_writeWires(self, file, block)

    def writeNets(self, file, block):
        return _odbpy.dbDatabase_writeNets(self, file, block)

    def writeParasitics(self, file, block):
        return _odbpy.dbDatabase_writeParasitics(self, file, block)

    def readTech(self, file):
        return _odbpy.dbDatabase_readTech(self, file)

    def readLib(self, file, arg3):
        return _odbpy.dbDatabase_readLib(self, file, arg3)

    def readLibs(self, file):
        return _odbpy.dbDatabase_readLibs(self, file)

    def readBlock(self, file, block):
        return _odbpy.dbDatabase_readBlock(self, file, block)

    def readWires(self, file, block):
        return _odbpy.dbDatabase_readWires(self, file, block)

    def readNets(self, file, block):
        return _odbpy.dbDatabase_readNets(self, file, block)

    def readParasitics(self, file, block):
        return _odbpy.dbDatabase_readParasitics(self, file, block)

    def readChip(self, file):
        return _odbpy.dbDatabase_readChip(self, file)

    @staticmethod
    def beginEco(block):
        return _odbpy.dbDatabase_beginEco(block)

    @staticmethod
    def endEco(block):
        return _odbpy.dbDatabase_endEco(block)

    @staticmethod
    def ecoEmpty(block):
        return _odbpy.dbDatabase_ecoEmpty(block)

    @staticmethod
    def readEco(block, filename):
        return _odbpy.dbDatabase_readEco(block, filename)

    @staticmethod
    def writeEco(block, filename):
        return _odbpy.dbDatabase_writeEco(block, filename)

    @staticmethod
    def checkEco(block):
        return _odbpy.dbDatabase_checkEco(block)

    @staticmethod
    def commitEco(block):
        return _odbpy.dbDatabase_commitEco(block)

    def setLogger(self, logger):
        return _odbpy.dbDatabase_setLogger(self, logger)

    def clear(self):
        return _odbpy.dbDatabase_clear(self)

    @staticmethod
    def create():
        return _odbpy.dbDatabase_create()

    @staticmethod
    def destroy(db):
        return _odbpy.dbDatabase_destroy(db)

    @staticmethod
    def duplicate(db):
        return _odbpy.dbDatabase_duplicate(db)

    @staticmethod
    def diff(db0, db1, file, indent_per_level):
        return _odbpy.dbDatabase_diff(db0, db1, file, indent_per_level)

    @staticmethod
    def getDatabase(oid):
        return _odbpy.dbDatabase_getDatabase(oid)

    def __init__(self):
        _odbpy.dbDatabase_swiginit(self, _odbpy.new_dbDatabase())
    __swig_destroy__ = _odbpy.delete_dbDatabase

# Register dbDatabase in _odbpy:
_odbpy.dbDatabase_swigregister(dbDatabase)

def dbDatabase_beginEco(block):
    return _odbpy.dbDatabase_beginEco(block)

def dbDatabase_endEco(block):
    return _odbpy.dbDatabase_endEco(block)

def dbDatabase_ecoEmpty(block):
    return _odbpy.dbDatabase_ecoEmpty(block)

def dbDatabase_readEco(block, filename):
    return _odbpy.dbDatabase_readEco(block, filename)

def dbDatabase_writeEco(block, filename):
    return _odbpy.dbDatabase_writeEco(block, filename)

def dbDatabase_checkEco(block):
    return _odbpy.dbDatabase_checkEco(block)

def dbDatabase_commitEco(block):
    return _odbpy.dbDatabase_commitEco(block)

def dbDatabase_create():
    return _odbpy.dbDatabase_create()

def dbDatabase_destroy(db):
    return _odbpy.dbDatabase_destroy(db)

def dbDatabase_duplicate(db):
    return _odbpy.dbDatabase_duplicate(db)

def dbDatabase_diff(db0, db1, file, indent_per_level):
    return _odbpy.dbDatabase_diff(db0, db1, file, indent_per_level)

def dbDatabase_getDatabase(oid):
    return _odbpy.dbDatabase_getDatabase(oid)

class dbBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def xMin(self):
        return _odbpy.dbBox_xMin(self)

    def yMin(self):
        return _odbpy.dbBox_yMin(self)

    def xMax(self):
        return _odbpy.dbBox_xMax(self)

    def yMax(self):
        return _odbpy.dbBox_yMax(self)

    def isVia(self):
        return _odbpy.dbBox_isVia(self)

    def getTechVia(self):
        return _odbpy.dbBox_getTechVia(self)

    def getBlockVia(self):
        return _odbpy.dbBox_getBlockVia(self)

    def getViaXY(self):
        return _odbpy.dbBox_getViaXY(self)

    def getViaBoxes(self, boxes):
        return _odbpy.dbBox_getViaBoxes(self, boxes)

    def getDir(self):
        return _odbpy.dbBox_getDir(self)

    def getDX(self):
        return _odbpy.dbBox_getDX(self)

    def getDesignRuleWidth(self):
        return _odbpy.dbBox_getDesignRuleWidth(self)

    def setDesignRuleWidth(self, arg2):
        return _odbpy.dbBox_setDesignRuleWidth(self, arg2)

    def getDY(self):
        return _odbpy.dbBox_getDY(self)

    def getWidth(self, dir=1):
        return _odbpy.dbBox_getWidth(self, dir)

    def getLength(self, dir=1):
        return _odbpy.dbBox_getLength(self, dir)

    def getGeomShape(self):
        return _odbpy.dbBox_getGeomShape(self)

    def setVisited(self, value):
        return _odbpy.dbBox_setVisited(self, value)

    def isVisited(self):
        return _odbpy.dbBox_isVisited(self)

    def setMarked(self, value):
        return _odbpy.dbBox_setMarked(self, value)

    def isMarked(self):
        return _odbpy.dbBox_isMarked(self)

    def getBoxOwner(self):
        return _odbpy.dbBox_getBoxOwner(self)

    def getOwnerType(self):
        return _odbpy.dbBox_getOwnerType(self)

    def getTechLayer(self):
        return _odbpy.dbBox_getTechLayer(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbBox_create(*args)

    @staticmethod
    def getBox(*args):
        return _odbpy.dbBox_getBox(*args)

    def __init__(self):
        _odbpy.dbBox_swiginit(self, _odbpy.new_dbBox())
    __swig_destroy__ = _odbpy.delete_dbBox

# Register dbBox in _odbpy:
_odbpy.dbBox_swigregister(dbBox)

def dbBox_create(*args):
    return _odbpy.dbBox_create(*args)

def dbBox_getBox(*args):
    return _odbpy.dbBox_getBox(*args)

class dbSBox(dbBox):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNDEFINED = _odbpy.dbSBox_UNDEFINED
    HORIZONTAL = _odbpy.dbSBox_HORIZONTAL
    VERTICAL = _odbpy.dbSBox_VERTICAL
    OCTILINEAR = _odbpy.dbSBox_OCTILINEAR

    def getWireShapeType(self):
        return _odbpy.dbSBox_getWireShapeType(self)

    def getDirection(self):
        return _odbpy.dbSBox_getDirection(self)

    def getSWire(self):
        return _odbpy.dbSBox_getSWire(self)

    def getOct(self):
        return _odbpy.dbSBox_getOct(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbSBox_create(*args)

    @staticmethod
    def getSBox(block, oid):
        return _odbpy.dbSBox_getSBox(block, oid)

    def __init__(self):
        _odbpy.dbSBox_swiginit(self, _odbpy.new_dbSBox())
    __swig_destroy__ = _odbpy.delete_dbSBox

# Register dbSBox in _odbpy:
_odbpy.dbSBox_swigregister(dbSBox)

def dbSBox_create(*args):
    return _odbpy.dbSBox_create(*args)

def dbSBox_getSBox(block, oid):
    return _odbpy.dbSBox_getSBox(block, oid)

class dbChip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _odbpy.dbChip_getBlock(self)

    @staticmethod
    def create(db):
        return _odbpy.dbChip_create(db)

    @staticmethod
    def getChip(db, oid):
        return _odbpy.dbChip_getChip(db, oid)

    @staticmethod
    def destroy(chip):
        return _odbpy.dbChip_destroy(chip)

    def __init__(self):
        _odbpy.dbChip_swiginit(self, _odbpy.new_dbChip())
    __swig_destroy__ = _odbpy.delete_dbChip

# Register dbChip in _odbpy:
_odbpy.dbChip_swigregister(dbChip)

def dbChip_create(db):
    return _odbpy.dbChip_create(db)

def dbChip_getChip(db, oid):
    return _odbpy.dbChip_getChip(db, oid)

def dbChip_destroy(chip):
    return _odbpy.dbChip_destroy(chip)

class dbBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbBlock_getName(self)

    def getConstName(self):
        return _odbpy.dbBlock_getConstName(self)

    def getBBox(self):
        return _odbpy.dbBlock_getBBox(self)

    def getChip(self):
        return _odbpy.dbBlock_getChip(self)

    def getDataBase(self):
        return _odbpy.dbBlock_getDataBase(self)

    def getParent(self):
        return _odbpy.dbBlock_getParent(self)

    def getParentInst(self):
        return _odbpy.dbBlock_getParentInst(self)

    def getTopModule(self):
        return _odbpy.dbBlock_getTopModule(self)

    def getChildren(self):
        return _odbpy.dbBlock_getChildren(self)

    def findChild(self, name):
        return _odbpy.dbBlock_findChild(self, name)

    def getBTerms(self):
        return _odbpy.dbBlock_getBTerms(self)

    def findBTerm(self, name):
        return _odbpy.dbBlock_findBTerm(self, name)

    def getITerms(self):
        return _odbpy.dbBlock_getITerms(self)

    def getInsts(self):
        return _odbpy.dbBlock_getInsts(self)

    def getModules(self):
        return _odbpy.dbBlock_getModules(self)

    def getModInsts(self):
        return _odbpy.dbBlock_getModInsts(self)

    def getGroups(self):
        return _odbpy.dbBlock_getGroups(self)

    def getAccessPoints(self):
        return _odbpy.dbBlock_getAccessPoints(self)

    def findInst(self, name):
        return _odbpy.dbBlock_findInst(self, name)

    def findModule(self, name):
        return _odbpy.dbBlock_findModule(self, name)

    def findModInst(self, path):
        return _odbpy.dbBlock_findModInst(self, path)

    def findGroup(self, name):
        return _odbpy.dbBlock_findGroup(self, name)

    def findSomeInst(self, names, insts):
        return _odbpy.dbBlock_findSomeInst(self, names, insts)

    def findSomeMaster(self, names, masters):
        return _odbpy.dbBlock_findSomeMaster(self, names, masters)

    def findITerm(self, name):
        return _odbpy.dbBlock_findITerm(self, name)

    def getObstructions(self):
        return _odbpy.dbBlock_getObstructions(self)

    def getBlockages(self):
        return _odbpy.dbBlock_getBlockages(self)

    def getNets(self):
        return _odbpy.dbBlock_getNets(self)

    def getCapNodes(self):
        return _odbpy.dbBlock_getCapNodes(self)

    def getRSegs(self):
        return _odbpy.dbBlock_getRSegs(self)

    def findNet(self, name):
        return _odbpy.dbBlock_findNet(self, name)

    def findSomeNet(self, names, nets):
        return _odbpy.dbBlock_findSomeNet(self, names, nets)

    def saveLef(self, filename):
        return _odbpy.dbBlock_saveLef(self, filename)

    def saveDef(self, filename, nets):
        return _odbpy.dbBlock_saveDef(self, filename, nets)

    def writeDb(self, filename, allNode=0):
        return _odbpy.dbBlock_writeDb(self, filename, allNode)

    def findVia(self, name):
        return _odbpy.dbBlock_findVia(self, name)

    def getVias(self):
        return _odbpy.dbBlock_getVias(self)

    def getGCellGrid(self):
        return _odbpy.dbBlock_getGCellGrid(self)

    def getDefUnits(self):
        return _odbpy.dbBlock_getDefUnits(self)

    def setDefUnits(self, units):
        return _odbpy.dbBlock_setDefUnits(self, units)

    def getDbUnitsPerMicron(self):
        return _odbpy.dbBlock_getDbUnitsPerMicron(self)

    def getHierarchyDelimeter(self):
        return _odbpy.dbBlock_getHierarchyDelimeter(self)

    def setBusDelimeters(self, left, right):
        return _odbpy.dbBlock_setBusDelimeters(self, left, right)

    def getBusDelimeters(self, left, right):
        return _odbpy.dbBlock_getBusDelimeters(self, left, right)

    def getExtCount(self, numOfNet, numOfRSeg, numOfCapNode, numOfCCSeg):
        return _odbpy.dbBlock_getExtCount(self, numOfNet, numOfRSeg, numOfCapNode, numOfCCSeg)

    def copyExtDb(self, fr, to, extDbCnt, resFactor, ccFactor, gndcFactor):
        return _odbpy.dbBlock_copyExtDb(self, fr, to, extDbCnt, resFactor, ccFactor, gndcFactor)

    def adjustRC(self, resFactor, ccFactor, gndcFactor):
        return _odbpy.dbBlock_adjustRC(self, resFactor, ccFactor, gndcFactor)

    def groundCC(self, gndFactor):
        return _odbpy.dbBlock_groundCC(self, gndFactor)

    def adjustCC(self, adjFactor, ccThreshHold, nets, halonets):
        return _odbpy.dbBlock_adjustCC(self, adjFactor, ccThreshHold, nets, halonets)

    def undoAdjustedCC(self, nets, halonets):
        return _odbpy.dbBlock_undoAdjustedCC(self, nets, halonets)

    def getCornerCount(self):
        return _odbpy.dbBlock_getCornerCount(self)

    def extCornersAreIndependent(self):
        return _odbpy.dbBlock_extCornersAreIndependent(self)

    def getCornersPerBlock(self):
        return _odbpy.dbBlock_getCornersPerBlock(self)

    def getExtDbCount(self):
        return _odbpy.dbBlock_getExtDbCount(self)

    def getExtCornerName(self, corner, cName):
        return _odbpy.dbBlock_getExtCornerName(self, corner, cName)

    def getExtCornerIndex(self, cornerName):
        return _odbpy.dbBlock_getExtCornerIndex(self, cornerName)

    def setCornerNameList(self, name_list):
        return _odbpy.dbBlock_setCornerNameList(self, name_list)

    def getCornerNameList(self):
        return _odbpy.dbBlock_getCornerNameList(self)

    def setCornerCount(self, *args):
        return _odbpy.dbBlock_setCornerCount(self, *args)

    def setCornersPerBlock(self, cornersPerBlock):
        return _odbpy.dbBlock_setCornersPerBlock(self, cornersPerBlock)

    def initParasiticsValueTables(self):
        return _odbpy.dbBlock_initParasiticsValueTables(self)

    def createExtCornerBlock(self, corner):
        return _odbpy.dbBlock_createExtCornerBlock(self, corner)

    def findExtCornerBlock(self, corner):
        return _odbpy.dbBlock_findExtCornerBlock(self, corner)

    def getExtCornerBlock(self, corner):
        return _odbpy.dbBlock_getExtCornerBlock(self, corner)

    def set_skip_hier_stream(self, value):
        return _odbpy.dbBlock_set_skip_hier_stream(self, value)

    def getTrackGrids(self):
        return _odbpy.dbBlock_getTrackGrids(self)

    def findTrackGrid(self, layer):
        return _odbpy.dbBlock_findTrackGrid(self, layer)

    def getRows(self):
        return _odbpy.dbBlock_getRows(self)

    def getFills(self):
        return _odbpy.dbBlock_getFills(self)

    def getMasters(self, masters):
        return _odbpy.dbBlock_getMasters(self, masters)

    def setDieArea(self, new_rect):
        return _odbpy.dbBlock_setDieArea(self, new_rect)

    def getDieArea(self):
        return _odbpy.dbBlock_getDieArea(self)

    def getCoreArea(self):
        return _odbpy.dbBlock_getCoreArea(self)

    def setPtFile(self, ptf):
        return _odbpy.dbBlock_setPtFile(self, ptf)

    def getPtFile(self):
        return _odbpy.dbBlock_getPtFile(self)

    def setExtmi(self, ext):
        return _odbpy.dbBlock_setExtmi(self, ext)

    def getExtmi(self):
        return _odbpy.dbBlock_getExtmi(self)

    def getExtControl(self):
        return _odbpy.dbBlock_getExtControl(self)

    def getExtCornerNames(self, ecl):
        return _odbpy.dbBlock_getExtCornerNames(self, ecl)

    def getCCSegs(self):
        return _odbpy.dbBlock_getCCSegs(self)

    def isBufferAltered(self):
        return _odbpy.dbBlock_isBufferAltered(self)

    def setBufferAltered(self, value):
        return _odbpy.dbBlock_setBufferAltered(self, value)

    def getSearchDb(self):
        return _odbpy.dbBlock_getSearchDb(self)

    def updateNetFlags(self, result):
        return _odbpy.dbBlock_updateNetFlags(self, result)

    def destroyCCs(self, nets):
        return _odbpy.dbBlock_destroyCCs(self, nets)

    def destroyRSegs(self, nets):
        return _odbpy.dbBlock_destroyRSegs(self, nets)

    def destroyCNs(self, nets, cleanExtid):
        return _odbpy.dbBlock_destroyCNs(self, nets, cleanExtid)

    def destroyParasitics(self, nets):
        return _odbpy.dbBlock_destroyParasitics(self, nets)

    def destroyCornerParasitics(self, nets):
        return _odbpy.dbBlock_destroyCornerParasitics(self, nets)

    def getCcHaloNets(self, changedNets, ccHaloNets):
        return _odbpy.dbBlock_getCcHaloNets(self, changedNets, ccHaloNets)

    def destroyOldParasitics(self, nets, capnn, rsegn):
        return _odbpy.dbBlock_destroyOldParasitics(self, nets, capnn, rsegn)

    def destroyOldCornerParasitics(self, nets, capnn, rsegn):
        return _odbpy.dbBlock_destroyOldCornerParasitics(self, nets, capnn, rsegn)

    def restoreOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn):
        return _odbpy.dbBlock_restoreOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn)

    def replaceOldParasitics(self, nets, capnn, rsegn):
        return _odbpy.dbBlock_replaceOldParasitics(self, nets, capnn, rsegn)

    def restoreOldParasitics(self, *args):
        return _odbpy.dbBlock_restoreOldParasitics(self, *args)

    def keepOldParasitics(self, nets, coupled_rc, ccHaloNets, capnn, rsegn):
        return _odbpy.dbBlock_keepOldParasitics(self, nets, coupled_rc, ccHaloNets, capnn, rsegn)

    def keepOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn):
        return _odbpy.dbBlock_keepOldCornerParasitics(self, pBlock, nets, coupled_rc, ccHaloNets, capnn, rsegn)

    def preExttreeMergeRC(self, max_cap, corner):
        return _odbpy.dbBlock_preExttreeMergeRC(self, max_cap, corner)

    def clear(self):
        return _odbpy.dbBlock_clear(self)

    def getWireUpdatedNets(self, nets, bbox=None):
        return _odbpy.dbBlock_getWireUpdatedNets(self, nets, bbox)

    def getRegions(self):
        return _odbpy.dbBlock_getRegions(self)

    def findRegion(self, name):
        return _odbpy.dbBlock_findRegion(self, name)

    def findNonDefaultRule(self, name):
        return _odbpy.dbBlock_findNonDefaultRule(self, name)

    def getNonDefaultRules(self):
        return _odbpy.dbBlock_getNonDefaultRules(self)

    def levelize(self, startingInsts, instsToBeLeveled):
        return _odbpy.dbBlock_levelize(self, startingInsts, instsToBeLeveled)

    def levelizeFromPrimaryInputs(self):
        return _odbpy.dbBlock_levelizeFromPrimaryInputs(self)

    def levelizeFromSequential(self):
        return _odbpy.dbBlock_levelizeFromSequential(self)

    def markBackwardsUser2(self, *args):
        return _odbpy.dbBlock_markBackwardsUser2(self, *args)

    def setDrivingItermsforNets(self):
        return _odbpy.dbBlock_setDrivingItermsforNets(self)

    def clearUserInstFlags(self):
        return _odbpy.dbBlock_clearUserInstFlags(self)

    @staticmethod
    def copyViaTable(dst, src):
        return _odbpy.dbBlock_copyViaTable(dst, src)

    @staticmethod
    def create(*args):
        return _odbpy.dbBlock_create(*args)

    @staticmethod
    def duplicate(block, name=None):
        return _odbpy.dbBlock_duplicate(block, name)

    @staticmethod
    def getBlock(*args):
        return _odbpy.dbBlock_getBlock(*args)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbBlock_destroy(*args)

    @staticmethod
    def differences(block1, block2, out, indent_per_level=4):
        return _odbpy.dbBlock_differences(block1, block2, out, indent_per_level)

    def __init__(self):
        _odbpy.dbBlock_swiginit(self, _odbpy.new_dbBlock())
    __swig_destroy__ = _odbpy.delete_dbBlock

# Register dbBlock in _odbpy:
_odbpy.dbBlock_swigregister(dbBlock)

def dbBlock_copyViaTable(dst, src):
    return _odbpy.dbBlock_copyViaTable(dst, src)

def dbBlock_create(*args):
    return _odbpy.dbBlock_create(*args)

def dbBlock_duplicate(block, name=None):
    return _odbpy.dbBlock_duplicate(block, name)

def dbBlock_getBlock(*args):
    return _odbpy.dbBlock_getBlock(*args)

def dbBlock_destroy(*args):
    return _odbpy.dbBlock_destroy(*args)

def dbBlock_differences(block1, block2, out, indent_per_level=4):
    return _odbpy.dbBlock_differences(block1, block2, out, indent_per_level)

class dbBTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbBTerm_getName(self)

    def getConstName(self):
        return _odbpy.dbBTerm_getConstName(self)

    def rename(self, name):
        return _odbpy.dbBTerm_rename(self, name)

    def getBBox(self):
        return _odbpy.dbBTerm_getBBox(self)

    def setSigType(self, type):
        return _odbpy.dbBTerm_setSigType(self, type)

    def getSigType(self):
        return _odbpy.dbBTerm_getSigType(self)

    def setIoType(self, type):
        return _odbpy.dbBTerm_setIoType(self, type)

    def getIoType(self):
        return _odbpy.dbBTerm_getIoType(self)

    def setSpefMark(self, v):
        return _odbpy.dbBTerm_setSpefMark(self, v)

    def isSetSpefMark(self):
        return _odbpy.dbBTerm_isSetSpefMark(self)

    def setMark(self, v):
        return _odbpy.dbBTerm_setMark(self, v)

    def isSetMark(self):
        return _odbpy.dbBTerm_isSetMark(self)

    def setExtId(self, v):
        return _odbpy.dbBTerm_setExtId(self, v)

    def getExtId(self):
        return _odbpy.dbBTerm_getExtId(self)

    def isSpecial(self):
        return _odbpy.dbBTerm_isSpecial(self)

    def setSpecial(self):
        return _odbpy.dbBTerm_setSpecial(self)

    def getNet(self):
        return _odbpy.dbBTerm_getNet(self)

    def disconnect(self):
        return _odbpy.dbBTerm_disconnect(self)

    def connect(self, net):
        return _odbpy.dbBTerm_connect(self, net)

    def getBlock(self):
        return _odbpy.dbBTerm_getBlock(self)

    def getITerm(self):
        return _odbpy.dbBTerm_getITerm(self)

    def getBPins(self):
        return _odbpy.dbBTerm_getBPins(self)

    def getFirstPin(self, shape):
        return _odbpy.dbBTerm_getFirstPin(self, shape)

    def getFirstPinLocation(self):
        return _odbpy.dbBTerm_getFirstPinLocation(self)

    def getFirstPinPlacementStatus(self):
        return _odbpy.dbBTerm_getFirstPinPlacementStatus(self)

    def getGroundPin(self):
        return _odbpy.dbBTerm_getGroundPin(self)

    def setGroundPin(self, pin):
        return _odbpy.dbBTerm_setGroundPin(self, pin)

    def getSupplyPin(self):
        return _odbpy.dbBTerm_getSupplyPin(self)

    def setSupplyPin(self, pin):
        return _odbpy.dbBTerm_setSupplyPin(self, pin)

    @staticmethod
    def create(net, name):
        return _odbpy.dbBTerm_create(net, name)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbBTerm_destroy(*args)

    @staticmethod
    def getBTerm(block, oid):
        return _odbpy.dbBTerm_getBTerm(block, oid)

    def staVertexId(self):
        return _odbpy.dbBTerm_staVertexId(self)

    def staSetVertexId(self, id):
        return _odbpy.dbBTerm_staSetVertexId(self, id)

    def __init__(self):
        _odbpy.dbBTerm_swiginit(self, _odbpy.new_dbBTerm())
    __swig_destroy__ = _odbpy.delete_dbBTerm

# Register dbBTerm in _odbpy:
_odbpy.dbBTerm_swigregister(dbBTerm)

def dbBTerm_create(net, name):
    return _odbpy.dbBTerm_create(net, name)

def dbBTerm_destroy(*args):
    return _odbpy.dbBTerm_destroy(*args)

def dbBTerm_getBTerm(block, oid):
    return _odbpy.dbBTerm_getBTerm(block, oid)

class dbBPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getPlacementStatus(self):
        return _odbpy.dbBPin_getPlacementStatus(self)

    def setPlacementStatus(self, status):
        return _odbpy.dbBPin_setPlacementStatus(self, status)

    def getBTerm(self):
        return _odbpy.dbBPin_getBTerm(self)

    def getBoxes(self):
        return _odbpy.dbBPin_getBoxes(self)

    def getBBox(self):
        return _odbpy.dbBPin_getBBox(self)

    def hasEffectiveWidth(self):
        return _odbpy.dbBPin_hasEffectiveWidth(self)

    def setEffectiveWidth(self, w):
        return _odbpy.dbBPin_setEffectiveWidth(self, w)

    def getEffectiveWidth(self):
        return _odbpy.dbBPin_getEffectiveWidth(self)

    def hasMinSpacing(self):
        return _odbpy.dbBPin_hasMinSpacing(self)

    def setMinSpacing(self, w):
        return _odbpy.dbBPin_setMinSpacing(self, w)

    def getMinSpacing(self):
        return _odbpy.dbBPin_getMinSpacing(self)

    def getAccessPoints(self):
        return _odbpy.dbBPin_getAccessPoints(self)

    @staticmethod
    def create(bterm):
        return _odbpy.dbBPin_create(bterm)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbBPin_destroy(*args)

    @staticmethod
    def getBPin(block, oid):
        return _odbpy.dbBPin_getBPin(block, oid)

    def __init__(self):
        _odbpy.dbBPin_swiginit(self, _odbpy.new_dbBPin())
    __swig_destroy__ = _odbpy.delete_dbBPin

# Register dbBPin in _odbpy:
_odbpy.dbBPin_swigregister(dbBPin)

def dbBPin_create(bterm):
    return _odbpy.dbBPin_create(bterm)

def dbBPin_destroy(*args):
    return _odbpy.dbBPin_destroy(*args)

def dbBPin_getBPin(block, oid):
    return _odbpy.dbBPin_getBPin(block, oid)

class dbNet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbNet_getName(self)

    def getConstName(self):
        return _odbpy.dbNet_getConstName(self)

    def printNetName(self, fp, idFlag=True, newLine=True):
        return _odbpy.dbNet_printNetName(self, fp, idFlag, newLine)

    def rename(self, name):
        return _odbpy.dbNet_rename(self, name)

    def isRCDisconnected(self):
        return _odbpy.dbNet_isRCDisconnected(self)

    def setRCDisconnected(self, value):
        return _odbpy.dbNet_setRCDisconnected(self, value)

    def getWeight(self):
        return _odbpy.dbNet_getWeight(self)

    def setWeight(self, weight):
        return _odbpy.dbNet_setWeight(self, weight)

    def getSourceType(self):
        return _odbpy.dbNet_getSourceType(self)

    def setSourceType(self, type):
        return _odbpy.dbNet_setSourceType(self, type)

    def getXTalkClass(self):
        return _odbpy.dbNet_getXTalkClass(self)

    def setXTalkClass(self, value):
        return _odbpy.dbNet_setXTalkClass(self, value)

    def setDrivingITerm(self, id):
        return _odbpy.dbNet_setDrivingITerm(self, id)

    def getDrivingITerm(self):
        return _odbpy.dbNet_getDrivingITerm(self)

    def hasFixedBump(self):
        return _odbpy.dbNet_hasFixedBump(self)

    def setFixedBump(self, value):
        return _odbpy.dbNet_setFixedBump(self, value)

    def getWireType(self):
        return _odbpy.dbNet_getWireType(self)

    def setWireType(self, wire_type):
        return _odbpy.dbNet_setWireType(self, wire_type)

    def getSigType(self):
        return _odbpy.dbNet_getSigType(self)

    def setSigType(self, sig_type):
        return _odbpy.dbNet_setSigType(self, sig_type)

    def isEnclosed(self, bbox):
        return _odbpy.dbNet_isEnclosed(self, bbox)

    def isMarked(self):
        return _odbpy.dbNet_isMarked(self)

    def isMark_1ed(self):
        return _odbpy.dbNet_isMark_1ed(self)

    def setMark(self, value):
        return _odbpy.dbNet_setMark(self, value)

    def setMark_1(self, value):
        return _odbpy.dbNet_setMark_1(self, value)

    def isSelect(self):
        return _odbpy.dbNet_isSelect(self)

    def setSelect(self, value):
        return _odbpy.dbNet_setSelect(self, value)

    def wireEqual(self, target):
        return _odbpy.dbNet_wireEqual(self, target)

    def wireMatch(self, target):
        return _odbpy.dbNet_wireMatch(self, target)

    def printWire(self, *args):
        return _odbpy.dbNet_printWire(self, *args)

    def isWireOrdered(self):
        return _odbpy.dbNet_isWireOrdered(self)

    def setWireOrdered(self, value):
        return _odbpy.dbNet_setWireOrdered(self, value)

    def isBuffered(self):
        return _odbpy.dbNet_isBuffered(self)

    def setBuffered(self, value):
        return _odbpy.dbNet_setBuffered(self, value)

    def isDisconnected(self):
        return _odbpy.dbNet_isDisconnected(self)

    def setDisconnected(self, value):
        return _odbpy.dbNet_setDisconnected(self, value)

    def setWireAltered(self, value):
        return _odbpy.dbNet_setWireAltered(self, value)

    def isWireAltered(self):
        return _odbpy.dbNet_isWireAltered(self)

    def setRCgraph(self, value):
        return _odbpy.dbNet_setRCgraph(self, value)

    def isRCgraph(self):
        return _odbpy.dbNet_isRCgraph(self)

    def setReduced(self, value):
        return _odbpy.dbNet_setReduced(self, value)

    def isReduced(self):
        return _odbpy.dbNet_isReduced(self)

    def setExtracted(self, value):
        return _odbpy.dbNet_setExtracted(self, value)

    def isExtracted(self):
        return _odbpy.dbNet_isExtracted(self)

    def setSpef(self, value):
        return _odbpy.dbNet_setSpef(self, value)

    def isSpef(self):
        return _odbpy.dbNet_isSpef(self)

    def setSizeOnly(self, v):
        return _odbpy.dbNet_setSizeOnly(self, v)

    def isSizeOnly(self):
        return _odbpy.dbNet_isSizeOnly(self)

    def setDoNotTouch(self, v):
        return _odbpy.dbNet_setDoNotTouch(self, v)

    def isDoNotTouch(self):
        return _odbpy.dbNet_isDoNotTouch(self)

    def getBlock(self):
        return _odbpy.dbNet_getBlock(self)

    def getITerms(self):
        return _odbpy.dbNet_getITerms(self)

    def get1stITerm(self):
        return _odbpy.dbNet_get1stITerm(self)

    def get1stSignalInput(self, io):
        return _odbpy.dbNet_get1stSignalInput(self, io)

    def getFirstOutput(self):
        return _odbpy.dbNet_getFirstOutput(self)

    def getBTerms(self):
        return _odbpy.dbNet_getBTerms(self)

    def get1stBTerm(self):
        return _odbpy.dbNet_get1stBTerm(self)

    def getSWires(self):
        return _odbpy.dbNet_getSWires(self)

    def getWire(self):
        return _odbpy.dbNet_getWire(self)

    def getFirstSWire(self):
        return _odbpy.dbNet_getFirstSWire(self)

    def donateWire(self, tnet, new_rsegs):
        return _odbpy.dbNet_donateWire(self, tnet, new_rsegs)

    def getGlobalWire(self):
        return _odbpy.dbNet_getGlobalWire(self)

    def isSpecial(self):
        return _odbpy.dbNet_isSpecial(self)

    def setSpecial(self):
        return _odbpy.dbNet_setSpecial(self)

    def clearSpecial(self):
        return _odbpy.dbNet_clearSpecial(self)

    def setIOflag(self):
        return _odbpy.dbNet_setIOflag(self)

    def isIO(self):
        return _odbpy.dbNet_isIO(self)

    def isWildConnected(self):
        return _odbpy.dbNet_isWildConnected(self)

    def setWildConnected(self):
        return _odbpy.dbNet_setWildConnected(self)

    def clearWildConnected(self):
        return _odbpy.dbNet_clearWildConnected(self)

    def getGndcCalibFactor(self):
        return _odbpy.dbNet_getGndcCalibFactor(self)

    def setGndcCalibFactor(self, gndcCalib):
        return _odbpy.dbNet_setGndcCalibFactor(self, gndcCalib)

    def calibrateCapacitance(self):
        return _odbpy.dbNet_calibrateCapacitance(self)

    def calibrateGndCap(self):
        return _odbpy.dbNet_calibrateGndCap(self)

    def calibrateCouplingCap(self, *args):
        return _odbpy.dbNet_calibrateCouplingCap(self, *args)

    def getCcCalibFactor(self):
        return _odbpy.dbNet_getCcCalibFactor(self)

    def setCcCalibFactor(self, ccCalib):
        return _odbpy.dbNet_setCcCalibFactor(self, ccCalib)

    def adjustNetRes(self, *args):
        return _odbpy.dbNet_adjustNetRes(self, *args)

    def adjustNetGndCap(self, *args):
        return _odbpy.dbNet_adjustNetGndCap(self, *args)

    def getCcAdjustFactor(self):
        return _odbpy.dbNet_getCcAdjustFactor(self)

    def setCcAdjustFactor(self, factor):
        return _odbpy.dbNet_setCcAdjustFactor(self, factor)

    def getCcAdjustOrder(self):
        return _odbpy.dbNet_getCcAdjustOrder(self)

    def setCcAdjustOrder(self, order):
        return _odbpy.dbNet_setCcAdjustOrder(self, order)

    def adjustCC(self, adjOrder, adjFactor, ccThreshHold, adjustedCC, halonets):
        return _odbpy.dbNet_adjustCC(self, adjOrder, adjFactor, ccThreshHold, adjustedCC, halonets)

    def undoAdjustedCC(self, adjustedCC, halonets):
        return _odbpy.dbNet_undoAdjustedCC(self, adjustedCC, halonets)

    def groundCC(self, gndFactor):
        return _odbpy.dbNet_groundCC(self, gndFactor)

    def addDbCc(self, cap):
        return _odbpy.dbNet_addDbCc(self, cap)

    def getDbCc(self):
        return _odbpy.dbNet_getDbCc(self)

    def setDbCc(self, cap):
        return _odbpy.dbNet_setDbCc(self, cap)

    def getRefCc(self):
        return _odbpy.dbNet_getRefCc(self)

    def setRefCc(self, cap):
        return _odbpy.dbNet_setRefCc(self, cap)

    def getCcMatchRatio(self):
        return _odbpy.dbNet_getCcMatchRatio(self)

    def setCcMatchRatio(self, ratio):
        return _odbpy.dbNet_setCcMatchRatio(self, ratio)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odbpy.dbNet_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def preExttreeMergeRC(self, max_cap, corner):
        return _odbpy.dbNet_preExttreeMergeRC(self, max_cap, corner)

    def findCapNode(self, nodeId):
        return _odbpy.dbNet_findCapNode(self, nodeId)

    def printCapN(self, type):
        return _odbpy.dbNet_printCapN(self, type)

    def donateRC(self, donorterm, rcvterm, rtrseg, lastrrseg, lastrcapnd, ricapndCnt, fstdrseg, dtrseg, fstdcapnd, gndcc, bridgeRseg):
        return _odbpy.dbNet_donateRC(self, donorterm, rcvterm, rtrseg, lastrrseg, lastrcapnd, ricapndCnt, fstdrseg, dtrseg, fstdcapnd, gndcc, bridgeRseg)

    def unDonateRC(self, rtrseg, lastrrseg, it, lastrcapnd, ricapndCnt, dtrseg, fstdrseg, fstdcapnd, ot, gndcc):
        return _odbpy.dbNet_unDonateRC(self, rtrseg, lastrrseg, it, lastrcapnd, ricapndCnt, dtrseg, fstdrseg, fstdcapnd, ot, gndcc)

    def getCapNodes(self):
        return _odbpy.dbNet_getCapNodes(self)

    def destroyCapNodes(self, cleanExtid):
        return _odbpy.dbNet_destroyCapNodes(self, cleanExtid)

    def reverseRSegs(self):
        return _odbpy.dbNet_reverseRSegs(self)

    def createZeroRc(self, foreign):
        return _odbpy.dbNet_createZeroRc(self, foreign)

    def set1stRSegId(self, rseg_id):
        return _odbpy.dbNet_set1stRSegId(self, rseg_id)

    def getZeroRSeg(self):
        return _odbpy.dbNet_getZeroRSeg(self)

    def get1stRSegId(self):
        return _odbpy.dbNet_get1stRSegId(self)

    def findRSeg(self, srcn, tgtn):
        return _odbpy.dbNet_findRSeg(self, srcn, tgtn)

    def set1stCapNodeId(self, capn_id):
        return _odbpy.dbNet_set1stCapNodeId(self, capn_id)

    def get1stCapNodeId(self):
        return _odbpy.dbNet_get1stCapNodeId(self)

    def setTermExtIds(self, capId):
        return _odbpy.dbNet_setTermExtIds(self, capId)

    def anchoredRSeg(self):
        return _odbpy.dbNet_anchoredRSeg(self)

    def printRSeg(self, type):
        return _odbpy.dbNet_printRSeg(self, type)

    def printWnP(self, type):
        return _odbpy.dbNet_printWnP(self, type)

    def getRSegCount(self):
        return _odbpy.dbNet_getRSegCount(self)

    def getRSegs(self):
        return _odbpy.dbNet_getRSegs(self)

    def collapseInternalCapNum(self, capNodeMap):
        return _odbpy.dbNet_collapseInternalCapNum(self, capNodeMap)

    def maxInternalCapNum(self):
        return _odbpy.dbNet_maxInternalCapNum(self)

    def getCapNodeCount(self):
        return _odbpy.dbNet_getCapNodeCount(self)

    def getCcCount(self):
        return _odbpy.dbNet_getCcCount(self)

    def destroyRSegs(self):
        return _odbpy.dbNet_destroyRSegs(self)

    def reverseCCSegs(self):
        return _odbpy.dbNet_reverseCCSegs(self)

    def getSrcCCSegs(self, segs):
        return _odbpy.dbNet_getSrcCCSegs(self, segs)

    def getTgtCCSegs(self, segs):
        return _odbpy.dbNet_getTgtCCSegs(self, segs)

    def getCouplingNets(self, corner, ccThreshold, cnets):
        return _odbpy.dbNet_getCouplingNets(self, corner, ccThreshold, cnets)

    def destroyCCSegs(self):
        return _odbpy.dbNet_destroyCCSegs(self)

    def destroyParasitics(self):
        return _odbpy.dbNet_destroyParasitics(self)

    def getTotalCapacitance(self, corner=0, cc=False):
        return _odbpy.dbNet_getTotalCapacitance(self, corner, cc)

    def getTotalCouplingCap(self, corner=0):
        return _odbpy.dbNet_getTotalCouplingCap(self, corner)

    def getTotalResistance(self, corner=0):
        return _odbpy.dbNet_getTotalResistance(self, corner)

    def setNonDefaultRule(self, rule):
        return _odbpy.dbNet_setNonDefaultRule(self, rule)

    def getNonDefaultRule(self):
        return _odbpy.dbNet_getNonDefaultRule(self)

    def getNetStats(self, wireCnt, viaCnt, len, layerCnt, levelTable):
        return _odbpy.dbNet_getNetStats(self, wireCnt, viaCnt, len, layerCnt, levelTable)

    def getWireCount(self, wireCnt, viaCnt):
        return _odbpy.dbNet_getWireCount(self, wireCnt, viaCnt)

    def getSignalWireCount(self, wireCnt, viaCnt):
        return _odbpy.dbNet_getSignalWireCount(self, wireCnt, viaCnt)

    def getPowerWireCount(self, wireCnt, viaCnt):
        return _odbpy.dbNet_getPowerWireCount(self, wireCnt, viaCnt)

    def getTermCount(self):
        return _odbpy.dbNet_getTermCount(self)

    def getITermCount(self):
        return _odbpy.dbNet_getITermCount(self)

    def getBTermCount(self):
        return _odbpy.dbNet_getBTermCount(self)

    def getTermBBox(self):
        return _odbpy.dbNet_getTermBBox(self)

    def destroySWires(self):
        return _odbpy.dbNet_destroySWires(self)

    @staticmethod
    def create(block, name, skipExistingCheck=False):
        return _odbpy.dbNet_create(block, name, skipExistingCheck)

    @staticmethod
    def markNets(nets, block, mk):
        return _odbpy.dbNet_markNets(nets, block, mk)

    def setLevelAtFanout(self, level, fromPI, instVector):
        return _odbpy.dbNet_setLevelAtFanout(self, level, fromPI, instVector)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbNet_destroy(*args)

    @staticmethod
    def getNet(block, oid):
        return _odbpy.dbNet_getNet(block, oid)

    @staticmethod
    def getValidNet(block, oid):
        return _odbpy.dbNet_getValidNet(block, oid)

    def __init__(self):
        _odbpy.dbNet_swiginit(self, _odbpy.new_dbNet())
    __swig_destroy__ = _odbpy.delete_dbNet

# Register dbNet in _odbpy:
_odbpy.dbNet_swigregister(dbNet)

def dbNet_create(block, name, skipExistingCheck=False):
    return _odbpy.dbNet_create(block, name, skipExistingCheck)

def dbNet_markNets(nets, block, mk):
    return _odbpy.dbNet_markNets(nets, block, mk)

def dbNet_destroy(*args):
    return _odbpy.dbNet_destroy(*args)

def dbNet_getNet(block, oid):
    return _odbpy.dbNet_getNet(block, oid)

def dbNet_getValidNet(block, oid):
    return _odbpy.dbNet_getValidNet(block, oid)

class dbInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbInst_getName(self)

    def getConstName(self):
        return _odbpy.dbInst_getConstName(self)

    def isNamed(self, name):
        return _odbpy.dbInst_isNamed(self, name)

    def rename(self, name):
        return _odbpy.dbInst_rename(self, name)

    def getOrigin(self):
        return _odbpy.dbInst_getOrigin(self)

    def setOrigin(self, x, y):
        return _odbpy.dbInst_setOrigin(self, x, y)

    def getOrient(self):
        return _odbpy.dbInst_getOrient(self)

    def setOrient(self, orient):
        return _odbpy.dbInst_setOrient(self, orient)

    def getLocation(self):
        return _odbpy.dbInst_getLocation(self)

    def setLocation(self, x, y):
        return _odbpy.dbInst_setLocation(self, x, y)

    def setLocationOrient(self, orient):
        return _odbpy.dbInst_setLocationOrient(self, orient)

    def getTransform(self, t):
        return _odbpy.dbInst_getTransform(self, t)

    def setTransform(self, t):
        return _odbpy.dbInst_setTransform(self, t)

    def getHierTransform(self, t):
        return _odbpy.dbInst_getHierTransform(self, t)

    def getBBox(self):
        return _odbpy.dbInst_getBBox(self)

    def getPlacementStatus(self):
        return _odbpy.dbInst_getPlacementStatus(self)

    def isFixed(self):
        return _odbpy.dbInst_isFixed(self)

    def isPlaced(self):
        return _odbpy.dbInst_isPlaced(self)

    def setPlacementStatus(self, status):
        return _odbpy.dbInst_setPlacementStatus(self, status)

    def getEcoCreate(self):
        return _odbpy.dbInst_getEcoCreate(self)

    def getEcoDestroy(self):
        return _odbpy.dbInst_getEcoDestroy(self)

    def getEcoModify(self):
        return _odbpy.dbInst_getEcoModify(self)

    def setEcoCreate(self, v):
        return _odbpy.dbInst_setEcoCreate(self, v)

    def setEcoDestroy(self, v):
        return _odbpy.dbInst_setEcoDestroy(self, v)

    def setEcoModify(self, v):
        return _odbpy.dbInst_setEcoModify(self, v)

    def getUserFlag1(self):
        return _odbpy.dbInst_getUserFlag1(self)

    def setUserFlag1(self):
        return _odbpy.dbInst_setUserFlag1(self)

    def clearUserFlag1(self):
        return _odbpy.dbInst_clearUserFlag1(self)

    def getUserFlag2(self):
        return _odbpy.dbInst_getUserFlag2(self)

    def setUserFlag2(self):
        return _odbpy.dbInst_setUserFlag2(self)

    def clearUserFlag2(self):
        return _odbpy.dbInst_clearUserFlag2(self)

    def getUserFlag3(self):
        return _odbpy.dbInst_getUserFlag3(self)

    def setUserFlag3(self):
        return _odbpy.dbInst_setUserFlag3(self)

    def clearUserFlag3(self):
        return _odbpy.dbInst_clearUserFlag3(self)

    def setSizeOnly(self, v):
        return _odbpy.dbInst_setSizeOnly(self, v)

    def isSizeOnly(self):
        return _odbpy.dbInst_isSizeOnly(self)

    def setDoNotTouch(self, v):
        return _odbpy.dbInst_setDoNotTouch(self, v)

    def isDoNotTouch(self):
        return _odbpy.dbInst_isDoNotTouch(self)

    def setDoNotSize(self, v):
        return _odbpy.dbInst_setDoNotSize(self, v)

    def isDoNotSize(self):
        return _odbpy.dbInst_isDoNotSize(self)

    def getBlock(self):
        return _odbpy.dbInst_getBlock(self)

    def getMaster(self):
        return _odbpy.dbInst_getMaster(self)

    def getGroup(self):
        return _odbpy.dbInst_getGroup(self)

    def getITerms(self):
        return _odbpy.dbInst_getITerms(self)

    def getFirstOutput(self):
        return _odbpy.dbInst_getFirstOutput(self)

    def getRegion(self):
        return _odbpy.dbInst_getRegion(self)

    def getModule(self):
        return _odbpy.dbInst_getModule(self)

    def findITerm(self, terminal_name):
        return _odbpy.dbInst_findITerm(self, terminal_name)

    def getConnectivity(self, *args):
        return _odbpy.dbInst_getConnectivity(self, *args)

    def bindBlock(self, block, force=False):
        return _odbpy.dbInst_bindBlock(self, block, force)

    def unbindBlock(self):
        return _odbpy.dbInst_unbindBlock(self)

    def resetHierarchy(self, verbose):
        return _odbpy.dbInst_resetHierarchy(self, verbose)

    def getChild(self):
        return _odbpy.dbInst_getChild(self)

    def getParent(self):
        return _odbpy.dbInst_getParent(self)

    def getChildren(self):
        return _odbpy.dbInst_getChildren(self)

    def isHierarchical(self):
        return _odbpy.dbInst_isHierarchical(self)

    def getHalo(self):
        return _odbpy.dbInst_getHalo(self)

    def getWeight(self):
        return _odbpy.dbInst_getWeight(self)

    def setWeight(self, weight):
        return _odbpy.dbInst_setWeight(self, weight)

    def getSourceType(self):
        return _odbpy.dbInst_getSourceType(self)

    def setSourceType(self, type):
        return _odbpy.dbInst_setSourceType(self, type)

    def getITerm(self, *args):
        return _odbpy.dbInst_getITerm(self, *args)

    def swapMaster(self, master):
        return _odbpy.dbInst_swapMaster(self, master)

    def getLevel(self):
        return _odbpy.dbInst_getLevel(self)

    def setLevel(self, v, fromPI):
        return _odbpy.dbInst_setLevel(self, v, fromPI)

    def isBlock(self):
        return _odbpy.dbInst_isBlock(self)

    def isCore(self):
        return _odbpy.dbInst_isCore(self)

    def isPad(self):
        return _odbpy.dbInst_isPad(self)

    def isEndCap(self):
        return _odbpy.dbInst_isEndCap(self)

    def setPinAccessIdx(self, idx):
        return _odbpy.dbInst_setPinAccessIdx(self, idx)

    def getPinAccessIdx(self):
        return _odbpy.dbInst_getPinAccessIdx(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbInst_create(*args)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbInst_destroy(*args)

    @staticmethod
    def getInst(block, oid):
        return _odbpy.dbInst_getInst(block, oid)

    @staticmethod
    def getValidInst(block, oid):
        return _odbpy.dbInst_getValidInst(block, oid)

    def __init__(self):
        _odbpy.dbInst_swiginit(self, _odbpy.new_dbInst())
    __swig_destroy__ = _odbpy.delete_dbInst

# Register dbInst in _odbpy:
_odbpy.dbInst_swigregister(dbInst)

def dbInst_create(*args):
    return _odbpy.dbInst_create(*args)

def dbInst_destroy(*args):
    return _odbpy.dbInst_destroy(*args)

def dbInst_getInst(block, oid):
    return _odbpy.dbInst_getInst(block, oid)

def dbInst_getValidInst(block, oid):
    return _odbpy.dbInst_getValidInst(block, oid)

class dbITerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getInst(self):
        return _odbpy.dbITerm_getInst(self)

    def getNet(self):
        return _odbpy.dbITerm_getNet(self)

    def getMTerm(self):
        return _odbpy.dbITerm_getMTerm(self)

    def getBBox(self):
        return _odbpy.dbITerm_getBBox(self)

    def getBlock(self):
        return _odbpy.dbITerm_getBlock(self)

    def getSigType(self):
        return _odbpy.dbITerm_getSigType(self)

    def getIoType(self):
        return _odbpy.dbITerm_getIoType(self)

    def isInputSignal(self, io=True):
        return _odbpy.dbITerm_isInputSignal(self, io)

    def isOutputSignal(self, io=True):
        return _odbpy.dbITerm_isOutputSignal(self, io)

    def setSpef(self, v):
        return _odbpy.dbITerm_setSpef(self, v)

    def isSpef(self):
        return _odbpy.dbITerm_isSpef(self)

    def setExtId(self, v):
        return _odbpy.dbITerm_setExtId(self, v)

    def getExtId(self):
        return _odbpy.dbITerm_getExtId(self)

    def isSpecial(self):
        return _odbpy.dbITerm_isSpecial(self)

    def setSpecial(self):
        return _odbpy.dbITerm_setSpecial(self)

    def clearSpecial(self):
        return _odbpy.dbITerm_clearSpecial(self)

    def setClocked(self, v):
        return _odbpy.dbITerm_setClocked(self, v)

    def isClocked(self):
        return _odbpy.dbITerm_isClocked(self)

    def setMark(self, v):
        return _odbpy.dbITerm_setMark(self, v)

    def isSetMark(self):
        return _odbpy.dbITerm_isSetMark(self)

    def isConnected(self):
        return _odbpy.dbITerm_isConnected(self)

    def setConnected(self):
        return _odbpy.dbITerm_setConnected(self)

    def clearConnected(self):
        return _odbpy.dbITerm_clearConnected(self)

    def getBTerm(self):
        return _odbpy.dbITerm_getBTerm(self)

    def connect(self, net):
        return _odbpy.dbITerm_connect(self, net)

    def disconnect(self):
        return _odbpy.dbITerm_disconnect(self)

    def getAvgXY(self):
        return _odbpy.dbITerm_getAvgXY(self)

    def getGeometries(self):
        return _odbpy.dbITerm_getGeometries(self)

    def setAccessPoint(self, pin, ap):
        return _odbpy.dbITerm_setAccessPoint(self, pin, ap)

    def getPrefAccessPoints(self):
        return _odbpy.dbITerm_getPrefAccessPoints(self)

    def getAccessPoints(self):
        return _odbpy.dbITerm_getAccessPoints(self)

    @staticmethod
    def getITerm(block, oid):
        return _odbpy.dbITerm_getITerm(block, oid)

    def staVertexId(self):
        return _odbpy.dbITerm_staVertexId(self)

    def staSetVertexId(self, id):
        return _odbpy.dbITerm_staSetVertexId(self, id)

    def __init__(self):
        _odbpy.dbITerm_swiginit(self, _odbpy.new_dbITerm())
    __swig_destroy__ = _odbpy.delete_dbITerm

# Register dbITerm in _odbpy:
_odbpy.dbITerm_swigregister(dbITerm)

def dbITerm_getITerm(block, oid):
    return _odbpy.dbITerm_getITerm(block, oid)

class dbVia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbVia_getName(self)

    def getConstName(self):
        return _odbpy.dbVia_getConstName(self)

    def getPattern(self):
        return _odbpy.dbVia_getPattern(self)

    def setPattern(self, pattern):
        return _odbpy.dbVia_setPattern(self, pattern)

    def setViaGenerateRule(self, rule):
        return _odbpy.dbVia_setViaGenerateRule(self, rule)

    def getViaGenerateRule(self):
        return _odbpy.dbVia_getViaGenerateRule(self)

    def hasParams(self):
        return _odbpy.dbVia_hasParams(self)

    def setViaParams(self, params):
        return _odbpy.dbVia_setViaParams(self, params)

    def getViaParams(self):
        return _odbpy.dbVia_getViaParams(self)

    def getBlock(self):
        return _odbpy.dbVia_getBlock(self)

    def getBBox(self):
        return _odbpy.dbVia_getBBox(self)

    def getBoxes(self):
        return _odbpy.dbVia_getBoxes(self)

    def getTopLayer(self):
        return _odbpy.dbVia_getTopLayer(self)

    def getBottomLayer(self):
        return _odbpy.dbVia_getBottomLayer(self)

    def isViaRotated(self):
        return _odbpy.dbVia_isViaRotated(self)

    def getOrient(self):
        return _odbpy.dbVia_getOrient(self)

    def getTechVia(self):
        return _odbpy.dbVia_getTechVia(self)

    def getBlockVia(self):
        return _odbpy.dbVia_getBlockVia(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbVia_create(*args)

    @staticmethod
    def copy(*args):
        return _odbpy.dbVia_copy(*args)

    @staticmethod
    def getVia(block, oid):
        return _odbpy.dbVia_getVia(block, oid)

    def __init__(self):
        _odbpy.dbVia_swiginit(self, _odbpy.new_dbVia())
    __swig_destroy__ = _odbpy.delete_dbVia

# Register dbVia in _odbpy:
_odbpy.dbVia_swigregister(dbVia)

def dbVia_create(*args):
    return _odbpy.dbVia_create(*args)

def dbVia_copy(*args):
    return _odbpy.dbVia_copy(*args)

def dbVia_getVia(block, oid):
    return _odbpy.dbVia_getVia(block, oid)

class dbWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _odbpy.dbWire_getBlock(self)

    def getNet(self):
        return _odbpy.dbWire_getNet(self)

    def append(self, wire, singleSegmentWire=False):
        return _odbpy.dbWire_append(self, wire, singleSegmentWire)

    def shuffleWireSeg(self, newNets, new_rsegs):
        return _odbpy.dbWire_shuffleWireSeg(self, newNets, new_rsegs)

    def getTermJid(self, termid):
        return _odbpy.dbWire_getTermJid(self, termid)

    def equal(self, target):
        return _odbpy.dbWire_equal(self, target)

    def getShape(self, shape_id, shape):
        return _odbpy.dbWire_getShape(self, shape_id, shape)

    def getSegment(self, *args):
        return _odbpy.dbWire_getSegment(self, *args)

    def getPrevVia(self, shape_id, shape):
        return _odbpy.dbWire_getPrevVia(self, shape_id, shape)

    def getNextVia(self, shape_id, shape):
        return _odbpy.dbWire_getNextVia(self, shape_id, shape)

    def getViaBoxes(self, via_shape_id, boxes):
        return _odbpy.dbWire_getViaBoxes(self, via_shape_id, boxes)

    def isGlobalWire(self):
        return _odbpy.dbWire_isGlobalWire(self)

    def getBBox(self):
        return _odbpy.dbWire_getBBox(self)

    def getLength(self):
        return _odbpy.dbWire_getLength(self)

    def length(self):
        return _odbpy.dbWire_length(self)

    def count(self):
        return _odbpy.dbWire_count(self)

    def getCoord(self, jid):
        return _odbpy.dbWire_getCoord(self, jid)

    def getProperty(self, jid, property):
        return _odbpy.dbWire_getProperty(self, jid, property)

    def setProperty(self, jid, property):
        return _odbpy.dbWire_setProperty(self, jid, property)

    def getData(self, n):
        return _odbpy.dbWire_getData(self, n)

    def getOpcode(self, n):
        return _odbpy.dbWire_getOpcode(self, n)

    def printWire(self, *args):
        return _odbpy.dbWire_printWire(self, *args)

    def attach(self, net):
        return _odbpy.dbWire_attach(self, net)

    def detach(self):
        return _odbpy.dbWire_detach(self)

    @staticmethod
    def copy(*args):
        return _odbpy.dbWire_copy(*args)

    @staticmethod
    def create(*args):
        return _odbpy.dbWire_create(*args)

    @staticmethod
    def getWire(block, oid):
        return _odbpy.dbWire_getWire(block, oid)

    @staticmethod
    def destroy(wire):
        return _odbpy.dbWire_destroy(wire)

    def __init__(self):
        _odbpy.dbWire_swiginit(self, _odbpy.new_dbWire())
    __swig_destroy__ = _odbpy.delete_dbWire

# Register dbWire in _odbpy:
_odbpy.dbWire_swigregister(dbWire)

def dbWire_copy(*args):
    return _odbpy.dbWire_copy(*args)

def dbWire_create(*args):
    return _odbpy.dbWire_create(*args)

def dbWire_getWire(block, oid):
    return _odbpy.dbWire_getWire(block, oid)

def dbWire_destroy(wire):
    return _odbpy.dbWire_destroy(wire)

class dbSWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBlock(self):
        return _odbpy.dbSWire_getBlock(self)

    def getNet(self):
        return _odbpy.dbSWire_getNet(self)

    def getWireType(self):
        return _odbpy.dbSWire_getWireType(self)

    def getShield(self):
        return _odbpy.dbSWire_getShield(self)

    def getWires(self):
        return _odbpy.dbSWire_getWires(self)

    @staticmethod
    def create(net, type, shield=None):
        return _odbpy.dbSWire_create(net, type, shield)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbSWire_destroy(*args)

    @staticmethod
    def getSWire(block, oid):
        return _odbpy.dbSWire_getSWire(block, oid)

    def __init__(self):
        _odbpy.dbSWire_swiginit(self, _odbpy.new_dbSWire())
    __swig_destroy__ = _odbpy.delete_dbSWire

# Register dbSWire in _odbpy:
_odbpy.dbSWire_swigregister(dbSWire)

def dbSWire_create(net, type, shield=None):
    return _odbpy.dbSWire_create(net, type, shield)

def dbSWire_destroy(*args):
    return _odbpy.dbSWire_destroy(*args)

def dbSWire_getSWire(block, oid):
    return _odbpy.dbSWire_getSWire(block, oid)

class dbTrackGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getTechLayer(self):
        return _odbpy.dbTrackGrid_getTechLayer(self)

    def getGridX(self):
        return _odbpy.dbTrackGrid_getGridX(self)

    def getGridY(self):
        return _odbpy.dbTrackGrid_getGridY(self)

    def getBlock(self):
        return _odbpy.dbTrackGrid_getBlock(self)

    def addGridPatternX(self, origin_x, line_count, step):
        return _odbpy.dbTrackGrid_addGridPatternX(self, origin_x, line_count, step)

    def addGridPatternY(self, origin_y, line_count, step):
        return _odbpy.dbTrackGrid_addGridPatternY(self, origin_y, line_count, step)

    def getNumGridPatternsX(self):
        return _odbpy.dbTrackGrid_getNumGridPatternsX(self)

    def getNumGridPatternsY(self):
        return _odbpy.dbTrackGrid_getNumGridPatternsY(self)

    def getGridPatternX(self, i):
        return _odbpy.dbTrackGrid_getGridPatternX(self, i)

    def getGridPatternY(self, i):
        return _odbpy.dbTrackGrid_getGridPatternY(self, i)

    @staticmethod
    def create(block, layer):
        return _odbpy.dbTrackGrid_create(block, layer)

    @staticmethod
    def getTrackGrid(block, oid):
        return _odbpy.dbTrackGrid_getTrackGrid(block, oid)

    @staticmethod
    def destroy(grid_):
        return _odbpy.dbTrackGrid_destroy(grid_)

    def __init__(self):
        _odbpy.dbTrackGrid_swiginit(self, _odbpy.new_dbTrackGrid())
    __swig_destroy__ = _odbpy.delete_dbTrackGrid

# Register dbTrackGrid in _odbpy:
_odbpy.dbTrackGrid_swigregister(dbTrackGrid)

def dbTrackGrid_create(block, layer):
    return _odbpy.dbTrackGrid_create(block, layer)

def dbTrackGrid_getTrackGrid(block, oid):
    return _odbpy.dbTrackGrid_getTrackGrid(block, oid)

def dbTrackGrid_destroy(grid_):
    return _odbpy.dbTrackGrid_destroy(grid_)

class dbObstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBBox(self):
        return _odbpy.dbObstruction_getBBox(self)

    def getInstance(self):
        return _odbpy.dbObstruction_getInstance(self)

    def setSlotObstruction(self):
        return _odbpy.dbObstruction_setSlotObstruction(self)

    def isSlotObstruction(self):
        return _odbpy.dbObstruction_isSlotObstruction(self)

    def setFillObstruction(self):
        return _odbpy.dbObstruction_setFillObstruction(self)

    def isFillObstruction(self):
        return _odbpy.dbObstruction_isFillObstruction(self)

    def setPushedDown(self):
        return _odbpy.dbObstruction_setPushedDown(self)

    def isPushedDown(self):
        return _odbpy.dbObstruction_isPushedDown(self)

    def hasEffectiveWidth(self):
        return _odbpy.dbObstruction_hasEffectiveWidth(self)

    def setEffectiveWidth(self, w):
        return _odbpy.dbObstruction_setEffectiveWidth(self, w)

    def getEffectiveWidth(self):
        return _odbpy.dbObstruction_getEffectiveWidth(self)

    def hasMinSpacing(self):
        return _odbpy.dbObstruction_hasMinSpacing(self)

    def setMinSpacing(self, w):
        return _odbpy.dbObstruction_setMinSpacing(self, w)

    def getMinSpacing(self):
        return _odbpy.dbObstruction_getMinSpacing(self)

    def getBlock(self):
        return _odbpy.dbObstruction_getBlock(self)

    @staticmethod
    def destroy(obstruction):
        return _odbpy.dbObstruction_destroy(obstruction)

    @staticmethod
    def create(block, layer, x1, y1, x2, y2, inst=None):
        return _odbpy.dbObstruction_create(block, layer, x1, y1, x2, y2, inst)

    @staticmethod
    def getObstruction(block, oid):
        return _odbpy.dbObstruction_getObstruction(block, oid)

    def __init__(self):
        _odbpy.dbObstruction_swiginit(self, _odbpy.new_dbObstruction())
    __swig_destroy__ = _odbpy.delete_dbObstruction

# Register dbObstruction in _odbpy:
_odbpy.dbObstruction_swigregister(dbObstruction)

def dbObstruction_destroy(obstruction):
    return _odbpy.dbObstruction_destroy(obstruction)

def dbObstruction_create(block, layer, x1, y1, x2, y2, inst=None):
    return _odbpy.dbObstruction_create(block, layer, x1, y1, x2, y2, inst)

def dbObstruction_getObstruction(block, oid):
    return _odbpy.dbObstruction_getObstruction(block, oid)

class dbBlockage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getBBox(self):
        return _odbpy.dbBlockage_getBBox(self)

    def getInstance(self):
        return _odbpy.dbBlockage_getInstance(self)

    def setPushedDown(self):
        return _odbpy.dbBlockage_setPushedDown(self)

    def isPushedDown(self):
        return _odbpy.dbBlockage_isPushedDown(self)

    def setSoft(self):
        return _odbpy.dbBlockage_setSoft(self)

    def isSoft(self):
        return _odbpy.dbBlockage_isSoft(self)

    def setMaxDensity(self, max_density):
        return _odbpy.dbBlockage_setMaxDensity(self, max_density)

    def getMaxDensity(self):
        return _odbpy.dbBlockage_getMaxDensity(self)

    def getBlock(self):
        return _odbpy.dbBlockage_getBlock(self)

    @staticmethod
    def create(block, x1, y1, x2, y2, inst=None):
        return _odbpy.dbBlockage_create(block, x1, y1, x2, y2, inst)

    @staticmethod
    def getBlockage(block, oid):
        return _odbpy.dbBlockage_getBlockage(block, oid)

    def __init__(self):
        _odbpy.dbBlockage_swiginit(self, _odbpy.new_dbBlockage())
    __swig_destroy__ = _odbpy.delete_dbBlockage

# Register dbBlockage in _odbpy:
_odbpy.dbBlockage_swigregister(dbBlockage)

def dbBlockage_create(block, x1, y1, x2, y2, inst=None):
    return _odbpy.dbBlockage_create(block, x1, y1, x2, y2, inst)

def dbBlockage_getBlockage(block, oid):
    return _odbpy.dbBlockage_getBlockage(block, oid)

class dbCapNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addCapnCapacitance(self, other):
        return _odbpy.dbCapNode_addCapnCapacitance(self, other)

    def addGndCap(self, gndcap, totalcap):
        return _odbpy.dbCapNode_addGndCap(self, gndcap, totalcap)

    def addGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odbpy.dbCapNode_addGndTotalCap(self, gndcap, totalcap, MillerMult)

    def getGndCap(self, gndcap, totalcap):
        return _odbpy.dbCapNode_getGndCap(self, gndcap, totalcap)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odbpy.dbCapNode_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def accAllCcCap(self, totalcap, MillerMult):
        return _odbpy.dbCapNode_accAllCcCap(self, totalcap, MillerMult)

    def setCapacitance(self, cap, corner=0):
        return _odbpy.dbCapNode_setCapacitance(self, cap, corner)

    def addCapacitance(self, cap, corner=0):
        return _odbpy.dbCapNode_addCapacitance(self, cap, corner)

    def groundCC(self, gndFactor):
        return _odbpy.dbCapNode_groundCC(self, gndFactor)

    def adjustCapacitance(self, *args):
        return _odbpy.dbCapNode_adjustCapacitance(self, *args)

    def needAdjustCC(self, ccThreshHold):
        return _odbpy.dbCapNode_needAdjustCC(self, ccThreshHold)

    def adjustCC(self, adjOrder, adjFactor, adjustedCC, halonets):
        return _odbpy.dbCapNode_adjustCC(self, adjOrder, adjFactor, adjustedCC, halonets)

    def getCapacitance(self, corner=0):
        return _odbpy.dbCapNode_getCapacitance(self, corner)

    def getNode(self):
        return _odbpy.dbCapNode_getNode(self)

    def getShapeId(self):
        return _odbpy.dbCapNode_getShapeId(self)

    def setNode(self, nodeid):
        return _odbpy.dbCapNode_setNode(self, nodeid)

    def isName(self):
        return _odbpy.dbCapNode_isName(self)

    def isITerm(self):
        return _odbpy.dbCapNode_isITerm(self)

    def isBTerm(self):
        return _odbpy.dbCapNode_isBTerm(self)

    def isInternal(self):
        return _odbpy.dbCapNode_isInternal(self)

    def isBranch(self):
        return _odbpy.dbCapNode_isBranch(self)

    def isDangling(self):
        return _odbpy.dbCapNode_isDangling(self)

    def isForeign(self):
        return _odbpy.dbCapNode_isForeign(self)

    def isTreeNode(self):
        return _odbpy.dbCapNode_isTreeNode(self)

    def isSourceTerm(self, mblock=None):
        return _odbpy.dbCapNode_isSourceTerm(self, mblock)

    def isInoutTerm(self, mblock=None):
        return _odbpy.dbCapNode_isInoutTerm(self, mblock)

    def isSelect(self):
        return _odbpy.dbCapNode_isSelect(self)

    def setSelect(self, value):
        return _odbpy.dbCapNode_setSelect(self, value)

    def incrChildrenCnt(self):
        return _odbpy.dbCapNode_incrChildrenCnt(self)

    def getChildrenCnt(self):
        return _odbpy.dbCapNode_getChildrenCnt(self)

    def setChildrenCnt(self, cnt):
        return _odbpy.dbCapNode_setChildrenCnt(self, cnt)

    def setNameFlag(self):
        return _odbpy.dbCapNode_setNameFlag(self)

    def setBTermFlag(self):
        return _odbpy.dbCapNode_setBTermFlag(self)

    def setITermFlag(self):
        return _odbpy.dbCapNode_setITermFlag(self)

    def setInternalFlag(self):
        return _odbpy.dbCapNode_setInternalFlag(self)

    def setBranchFlag(self):
        return _odbpy.dbCapNode_setBranchFlag(self)

    def setForeignFlag(self):
        return _odbpy.dbCapNode_setForeignFlag(self)

    def resetNameFlag(self):
        return _odbpy.dbCapNode_resetNameFlag(self)

    def resetBTermFlag(self):
        return _odbpy.dbCapNode_resetBTermFlag(self)

    def resetITermFlag(self):
        return _odbpy.dbCapNode_resetITermFlag(self)

    def resetInternalFlag(self):
        return _odbpy.dbCapNode_resetInternalFlag(self)

    def resetBranchFlag(self):
        return _odbpy.dbCapNode_resetBranchFlag(self)

    def resetForeignFlag(self):
        return _odbpy.dbCapNode_resetForeignFlag(self)

    def getSortIndex(self):
        return _odbpy.dbCapNode_getSortIndex(self)

    def setSortIndex(self, idx):
        return _odbpy.dbCapNode_setSortIndex(self, idx)

    def getTermCoords(self, mblock=None):
        return _odbpy.dbCapNode_getTermCoords(self, mblock)

    def getITerm(self, mblock=None):
        return _odbpy.dbCapNode_getITerm(self, mblock)

    def getBTerm(self, mblock=None):
        return _odbpy.dbCapNode_getBTerm(self, mblock)

    def printCC(self):
        return _odbpy.dbCapNode_printCC(self)

    def checkCC(self):
        return _odbpy.dbCapNode_checkCC(self)

    def getCCSegs(self):
        return _odbpy.dbCapNode_getCCSegs(self)

    def getNet(self):
        return _odbpy.dbCapNode_getNet(self)

    def setNet(self, netid):
        return _odbpy.dbCapNode_setNet(self, netid)

    def setNext(self, nextid):
        return _odbpy.dbCapNode_setNext(self, nextid)

    @staticmethod
    def create(net, node, foreign):
        return _odbpy.dbCapNode_create(net, node, foreign)

    def addToNet(self):
        return _odbpy.dbCapNode_addToNet(self)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbCapNode_destroy(*args)

    @staticmethod
    def getCapNode(block, oid):
        return _odbpy.dbCapNode_getCapNode(block, oid)

    def __init__(self):
        _odbpy.dbCapNode_swiginit(self, _odbpy.new_dbCapNode())
    __swig_destroy__ = _odbpy.delete_dbCapNode

# Register dbCapNode in _odbpy:
_odbpy.dbCapNode_swigregister(dbCapNode)

def dbCapNode_create(net, node, foreign):
    return _odbpy.dbCapNode_create(net, node, foreign)

def dbCapNode_destroy(*args):
    return _odbpy.dbCapNode_destroy(*args)

def dbCapNode_getCapNode(block, oid):
    return _odbpy.dbCapNode_getCapNode(block, oid)

class dbRSeg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addRSegResistance(self, other):
        return _odbpy.dbRSeg_addRSegResistance(self, other)

    def addRSegCapacitance(self, other):
        return _odbpy.dbRSeg_addRSegCapacitance(self, other)

    def getResistance(self, corner=0):
        return _odbpy.dbRSeg_getResistance(self, corner)

    def getAllRes(self, res):
        return _odbpy.dbRSeg_getAllRes(self, res)

    def addAllRes(self, res):
        return _odbpy.dbRSeg_addAllRes(self, res)

    def getGndCap(self, gndcap, totalcap):
        return _odbpy.dbRSeg_getGndCap(self, gndcap, totalcap)

    def addGndCap(self, gndcap, totalcap):
        return _odbpy.dbRSeg_addGndCap(self, gndcap, totalcap)

    def getGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odbpy.dbRSeg_getGndTotalCap(self, gndcap, totalcap, MillerMult)

    def addGndTotalCap(self, gndcap, totalcap, MillerMult):
        return _odbpy.dbRSeg_addGndTotalCap(self, gndcap, totalcap, MillerMult)

    def mergeRCs(self, mrsegs):
        return _odbpy.dbRSeg_mergeRCs(self, mrsegs)

    def adjustSourceCapacitance(self, factor, corner):
        return _odbpy.dbRSeg_adjustSourceCapacitance(self, factor, corner)

    def adjustCapacitance(self, *args):
        return _odbpy.dbRSeg_adjustCapacitance(self, *args)

    def setCapacitance(self, cap, corner=0):
        return _odbpy.dbRSeg_setCapacitance(self, cap, corner)

    def updatedCap(self):
        return _odbpy.dbRSeg_updatedCap(self)

    def getSourceCapacitance(self, corner=0):
        return _odbpy.dbRSeg_getSourceCapacitance(self, corner)

    def getCapacitance(self, *args):
        return _odbpy.dbRSeg_getCapacitance(self, *args)

    def getCcSegs(self, ccsegs):
        return _odbpy.dbRSeg_getCcSegs(self, ccsegs)

    def printCcSegs(self):
        return _odbpy.dbRSeg_printCcSegs(self)

    def printCC(self):
        return _odbpy.dbRSeg_printCC(self)

    def checkCC(self):
        return _odbpy.dbRSeg_checkCC(self)

    def getCapTable(self, cap):
        return _odbpy.dbRSeg_getCapTable(self, cap)

    def setResistance(self, res, corner=0):
        return _odbpy.dbRSeg_setResistance(self, res, corner)

    def adjustResistance(self, *args):
        return _odbpy.dbRSeg_adjustResistance(self, *args)

    def setNext(self, next_id):
        return _odbpy.dbRSeg_setNext(self, next_id)

    def getSourceNode(self):
        return _odbpy.dbRSeg_getSourceNode(self)

    def getSourceCapNode(self):
        return _odbpy.dbRSeg_getSourceCapNode(self)

    def setSourceNode(self, nodeid):
        return _odbpy.dbRSeg_setSourceNode(self, nodeid)

    def getTargetNode(self):
        return _odbpy.dbRSeg_getTargetNode(self)

    def getTargetCapNode(self):
        return _odbpy.dbRSeg_getTargetCapNode(self)

    def setTargetNode(self, nodeid):
        return _odbpy.dbRSeg_setTargetNode(self, nodeid)

    def getShapeId(self):
        return _odbpy.dbRSeg_getShapeId(self)

    def setCoords(self, x, y):
        return _odbpy.dbRSeg_setCoords(self, x, y)

    def getCoords(self):
        return _odbpy.dbRSeg_getCoords(self)

    def updateShapeId(self, nsid):
        return _odbpy.dbRSeg_updateShapeId(self, nsid)

    def pathLowToHigh(self):
        return _odbpy.dbRSeg_pathLowToHigh(self)

    def allocatedCap(self):
        return _odbpy.dbRSeg_allocatedCap(self)

    def getLengthWidth(self, w):
        return _odbpy.dbRSeg_getLengthWidth(self, w)

    def addToNet(self):
        return _odbpy.dbRSeg_addToNet(self)

    def getNet(self):
        return _odbpy.dbRSeg_getNet(self)

    @staticmethod
    def create(net, x, y, path_dir, allocate_cap):
        return _odbpy.dbRSeg_create(net, x, y, path_dir, allocate_cap)

    @staticmethod
    def destroyS(seg):
        return _odbpy.dbRSeg_destroyS(seg)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbRSeg_destroy(*args)

    @staticmethod
    def getRSeg(block, oid):
        return _odbpy.dbRSeg_getRSeg(block, oid)

    def __init__(self):
        _odbpy.dbRSeg_swiginit(self, _odbpy.new_dbRSeg())
    __swig_destroy__ = _odbpy.delete_dbRSeg

# Register dbRSeg in _odbpy:
_odbpy.dbRSeg_swigregister(dbRSeg)

def dbRSeg_create(net, x, y, path_dir, allocate_cap):
    return _odbpy.dbRSeg_create(net, x, y, path_dir, allocate_cap)

def dbRSeg_destroyS(seg):
    return _odbpy.dbRSeg_destroyS(seg)

def dbRSeg_destroy(*args):
    return _odbpy.dbRSeg_destroy(*args)

def dbRSeg_getRSeg(block, oid):
    return _odbpy.dbRSeg_getRSeg(block, oid)

class dbCCSeg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def adjustCapacitance(self, *args):
        return _odbpy.dbCCSeg_adjustCapacitance(self, *args)

    def getCapacitance(self, corner=0):
        return _odbpy.dbCCSeg_getCapacitance(self, corner)

    def setCapacitance(self, cap, corner=0):
        return _odbpy.dbCCSeg_setCapacitance(self, cap, corner)

    def addCapacitance(self, cap, corner=0):
        return _odbpy.dbCCSeg_addCapacitance(self, cap, corner)

    def accAllCcCap(self, ttcap, MillerMult):
        return _odbpy.dbCCSeg_accAllCcCap(self, ttcap, MillerMult)

    def getAllCcCap(self, ttcap):
        return _odbpy.dbCCSeg_getAllCcCap(self, ttcap)

    def setAllCcCap(self, ttcap):
        return _odbpy.dbCCSeg_setAllCcCap(self, ttcap)

    def getSourceCapNode(self):
        return _odbpy.dbCCSeg_getSourceCapNode(self)

    def getTargetCapNode(self):
        return _odbpy.dbCCSeg_getTargetCapNode(self)

    def addCcCapacitance(self, other):
        return _odbpy.dbCCSeg_addCcCapacitance(self, other)

    def swapCapnode(self, orig, newn):
        return _odbpy.dbCCSeg_swapCapnode(self, orig, newn)

    def getTheOtherCapn(self, oneCap, cid):
        return _odbpy.dbCCSeg_getTheOtherCapn(self, oneCap, cid)

    def getSourceNodeNum(self):
        return _odbpy.dbCCSeg_getSourceNodeNum(self)

    def getTargetNodeNum(self):
        return _odbpy.dbCCSeg_getTargetNodeNum(self)

    def getSourceNet(self):
        return _odbpy.dbCCSeg_getSourceNet(self)

    def getTargetNet(self):
        return _odbpy.dbCCSeg_getTargetNet(self)

    def getInfileCnt(self):
        return _odbpy.dbCCSeg_getInfileCnt(self)

    def incrInfileCnt(self):
        return _odbpy.dbCCSeg_incrInfileCnt(self)

    def isMarked(self):
        return _odbpy.dbCCSeg_isMarked(self)

    def setMark(self, value):
        return _odbpy.dbCCSeg_setMark(self, value)

    def printCapnCC(self, capn):
        return _odbpy.dbCCSeg_printCapnCC(self, capn)

    def checkCapnCC(self, capn):
        return _odbpy.dbCCSeg_checkCapnCC(self, capn)

    def unLink_cc_seg(self, capn):
        return _odbpy.dbCCSeg_unLink_cc_seg(self, capn)

    def Link_cc_seg(self, capn, cseq):
        return _odbpy.dbCCSeg_Link_cc_seg(self, capn, cseq)

    @staticmethod
    def findCC(nodeA, nodeB):
        return _odbpy.dbCCSeg_findCC(nodeA, nodeB)

    @staticmethod
    def create(nodeA, nodeB, mergeParallel=False):
        return _odbpy.dbCCSeg_create(nodeA, nodeB, mergeParallel)

    @staticmethod
    def destroyS(seg):
        return _odbpy.dbCCSeg_destroyS(seg)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbCCSeg_destroy(*args)

    @staticmethod
    def getCCSeg(block, oid):
        return _odbpy.dbCCSeg_getCCSeg(block, oid)

    @staticmethod
    def disconnect(tcc_):
        return _odbpy.dbCCSeg_disconnect(tcc_)

    @staticmethod
    def connect(tcc_):
        return _odbpy.dbCCSeg_connect(tcc_)

    def __init__(self):
        _odbpy.dbCCSeg_swiginit(self, _odbpy.new_dbCCSeg())
    __swig_destroy__ = _odbpy.delete_dbCCSeg

# Register dbCCSeg in _odbpy:
_odbpy.dbCCSeg_swigregister(dbCCSeg)

def dbCCSeg_findCC(nodeA, nodeB):
    return _odbpy.dbCCSeg_findCC(nodeA, nodeB)

def dbCCSeg_create(nodeA, nodeB, mergeParallel=False):
    return _odbpy.dbCCSeg_create(nodeA, nodeB, mergeParallel)

def dbCCSeg_destroyS(seg):
    return _odbpy.dbCCSeg_destroyS(seg)

def dbCCSeg_destroy(*args):
    return _odbpy.dbCCSeg_destroy(*args)

def dbCCSeg_getCCSeg(block, oid):
    return _odbpy.dbCCSeg_getCCSeg(block, oid)

def dbCCSeg_disconnect(tcc_):
    return _odbpy.dbCCSeg_disconnect(tcc_)

def dbCCSeg_connect(tcc_):
    return _odbpy.dbCCSeg_connect(tcc_)

class dbRow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbRow_getName(self)

    def getConstName(self):
        return _odbpy.dbRow_getConstName(self)

    def getSite(self):
        return _odbpy.dbRow_getSite(self)

    def getOrigin(self):
        return _odbpy.dbRow_getOrigin(self)

    def getOrient(self):
        return _odbpy.dbRow_getOrient(self)

    def getDirection(self):
        return _odbpy.dbRow_getDirection(self)

    def getSiteCount(self):
        return _odbpy.dbRow_getSiteCount(self)

    def getSpacing(self):
        return _odbpy.dbRow_getSpacing(self)

    def getBBox(self):
        return _odbpy.dbRow_getBBox(self)

    @staticmethod
    def create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing):
        return _odbpy.dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbRow_destroy(*args)

    @staticmethod
    def getRow(block, oid):
        return _odbpy.dbRow_getRow(block, oid)

    def __init__(self):
        _odbpy.dbRow_swiginit(self, _odbpy.new_dbRow())
    __swig_destroy__ = _odbpy.delete_dbRow

# Register dbRow in _odbpy:
_odbpy.dbRow_swigregister(dbRow)

def dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing):
    return _odbpy.dbRow_create(block, name, site, origin_x, origin_y, orient, direction, num_sites, spacing)

def dbRow_destroy(*args):
    return _odbpy.dbRow_destroy(*args)

def dbRow_getRow(block, oid):
    return _odbpy.dbRow_getRow(block, oid)

class dbFill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getRect(self):
        return _odbpy.dbFill_getRect(self)

    def needsOPC(self):
        return _odbpy.dbFill_needsOPC(self)

    def maskNumber(self):
        return _odbpy.dbFill_maskNumber(self)

    def getTechLayer(self):
        return _odbpy.dbFill_getTechLayer(self)

    @staticmethod
    def create(block, needs_opc, mask_number, layer, x1, y1, x2, y2):
        return _odbpy.dbFill_create(block, needs_opc, mask_number, layer, x1, y1, x2, y2)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbFill_destroy(*args)

    @staticmethod
    def getFill(block, oid):
        return _odbpy.dbFill_getFill(block, oid)

    def __init__(self):
        _odbpy.dbFill_swiginit(self, _odbpy.new_dbFill())
    __swig_destroy__ = _odbpy.delete_dbFill

# Register dbFill in _odbpy:
_odbpy.dbFill_swigregister(dbFill)

def dbFill_create(block, needs_opc, mask_number, layer, x1, y1, x2, y2):
    return _odbpy.dbFill_create(block, needs_opc, mask_number, layer, x1, y1, x2, y2)

def dbFill_destroy(*args):
    return _odbpy.dbFill_destroy(*args)

def dbFill_getFill(block, oid):
    return _odbpy.dbFill_getFill(block, oid)

class dbRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbRegion_getName(self)

    def getRegionType(self):
        return _odbpy.dbRegion_getRegionType(self)

    def setRegionType(self, type):
        return _odbpy.dbRegion_setRegionType(self, type)

    def getRegionInsts(self):
        return _odbpy.dbRegion_getRegionInsts(self)

    def setInvalid(self, v):
        return _odbpy.dbRegion_setInvalid(self, v)

    def isInvalid(self):
        return _odbpy.dbRegion_isInvalid(self)

    def getBoundaries(self):
        return _odbpy.dbRegion_getBoundaries(self)

    def addInst(self, inst):
        return _odbpy.dbRegion_addInst(self, inst)

    def removeInst(self, inst):
        return _odbpy.dbRegion_removeInst(self, inst)

    def getParent(self):
        return _odbpy.dbRegion_getParent(self)

    def getChildren(self):
        return _odbpy.dbRegion_getChildren(self)

    def addChild(self, region):
        return _odbpy.dbRegion_addChild(self, region)

    def getBlock(self):
        return _odbpy.dbRegion_getBlock(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbRegion_create(*args)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbRegion_destroy(*args)

    @staticmethod
    def getRegion(block, oid):
        return _odbpy.dbRegion_getRegion(block, oid)

    def __init__(self):
        _odbpy.dbRegion_swiginit(self, _odbpy.new_dbRegion())
    __swig_destroy__ = _odbpy.delete_dbRegion

# Register dbRegion in _odbpy:
_odbpy.dbRegion_swigregister(dbRegion)

def dbRegion_create(*args):
    return _odbpy.dbRegion_create(*args)

def dbRegion_destroy(*args):
    return _odbpy.dbRegion_destroy(*args)

def dbRegion_getRegion(block, oid):
    return _odbpy.dbRegion_getRegion(block, oid)

class dbLib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbLib_getName(self)

    def getConstName(self):
        return _odbpy.dbLib_getConstName(self)

    def getDbUnitsPerMicron(self):
        return _odbpy.dbLib_getDbUnitsPerMicron(self)

    def getTech(self):
        return _odbpy.dbLib_getTech(self)

    def getMasters(self):
        return _odbpy.dbLib_getMasters(self)

    def findMaster(self, name):
        return _odbpy.dbLib_findMaster(self, name)

    def getSites(self):
        return _odbpy.dbLib_getSites(self)

    def findSite(self, name):
        return _odbpy.dbLib_findSite(self, name)

    def getLefUnits(self):
        return _odbpy.dbLib_getLefUnits(self)

    def setLefUnits(self, units):
        return _odbpy.dbLib_setLefUnits(self, units)

    def getHierarchyDelimeter(self):
        return _odbpy.dbLib_getHierarchyDelimeter(self)

    def setBusDelimeters(self, left, right):
        return _odbpy.dbLib_setBusDelimeters(self, left, right)

    def getBusDelimeters(self, left, right):
        return _odbpy.dbLib_getBusDelimeters(self, left, right)

    @staticmethod
    def create(db, name, hierarchy_delimeter=0):
        return _odbpy.dbLib_create(db, name, hierarchy_delimeter)

    @staticmethod
    def getLib(db, oid):
        return _odbpy.dbLib_getLib(db, oid)

    @staticmethod
    def destroy(lib):
        return _odbpy.dbLib_destroy(lib)

    def __init__(self):
        _odbpy.dbLib_swiginit(self, _odbpy.new_dbLib())
    __swig_destroy__ = _odbpy.delete_dbLib

# Register dbLib in _odbpy:
_odbpy.dbLib_swigregister(dbLib)

def dbLib_create(db, name, hierarchy_delimeter=0):
    return _odbpy.dbLib_create(db, name, hierarchy_delimeter)

def dbLib_getLib(db, oid):
    return _odbpy.dbLib_getLib(db, oid)

def dbLib_destroy(lib):
    return _odbpy.dbLib_destroy(lib)

class dbSite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbSite_getName(self)

    def getConstName(self):
        return _odbpy.dbSite_getConstName(self)

    def getWidth(self):
        return _odbpy.dbSite_getWidth(self)

    def setWidth(self, width):
        return _odbpy.dbSite_setWidth(self, width)

    def getHeight(self):
        return _odbpy.dbSite_getHeight(self)

    def setHeight(self, height):
        return _odbpy.dbSite_setHeight(self, height)

    def getClass(self):
        return _odbpy.dbSite_getClass(self)

    def setClass(self, site_class):
        return _odbpy.dbSite_setClass(self, site_class)

    def setSymmetryX(self):
        return _odbpy.dbSite_setSymmetryX(self)

    def getSymmetryX(self):
        return _odbpy.dbSite_getSymmetryX(self)

    def setSymmetryY(self):
        return _odbpy.dbSite_setSymmetryY(self)

    def getSymmetryY(self):
        return _odbpy.dbSite_getSymmetryY(self)

    def setSymmetryR90(self):
        return _odbpy.dbSite_setSymmetryR90(self)

    def getSymmetryR90(self):
        return _odbpy.dbSite_getSymmetryR90(self)

    def getLib(self):
        return _odbpy.dbSite_getLib(self)

    @staticmethod
    def create(lib, name):
        return _odbpy.dbSite_create(lib, name)

    @staticmethod
    def getSite(lib, oid):
        return _odbpy.dbSite_getSite(lib, oid)

    def __init__(self):
        _odbpy.dbSite_swiginit(self, _odbpy.new_dbSite())
    __swig_destroy__ = _odbpy.delete_dbSite

# Register dbSite in _odbpy:
_odbpy.dbSite_swigregister(dbSite)

def dbSite_create(lib, name):
    return _odbpy.dbSite_create(lib, name)

def dbSite_getSite(lib, oid):
    return _odbpy.dbSite_getSite(lib, oid)

class dbMaster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbMaster_getName(self)

    def getConstName(self):
        return _odbpy.dbMaster_getConstName(self)

    def getOrigin(self):
        return _odbpy.dbMaster_getOrigin(self)

    def setOrigin(self, x, y):
        return _odbpy.dbMaster_setOrigin(self, x, y)

    def getWidth(self):
        return _odbpy.dbMaster_getWidth(self)

    def setWidth(self, width):
        return _odbpy.dbMaster_setWidth(self, width)

    def getHeight(self):
        return _odbpy.dbMaster_getHeight(self)

    def setHeight(self, height):
        return _odbpy.dbMaster_setHeight(self, height)

    def isFiller(self):
        return _odbpy.dbMaster_isFiller(self)

    def getType(self):
        return _odbpy.dbMaster_getType(self)

    def isBlock(self):
        return _odbpy.dbMaster_isBlock(self)

    def isCore(self):
        return _odbpy.dbMaster_isCore(self)

    def isPad(self):
        return _odbpy.dbMaster_isPad(self)

    def isEndCap(self):
        return _odbpy.dbMaster_isEndCap(self)

    def isCover(self):
        return _odbpy.dbMaster_isCover(self)

    def isCoreAutoPlaceable(self):
        return _odbpy.dbMaster_isCoreAutoPlaceable(self)

    def setType(self, type):
        return _odbpy.dbMaster_setType(self, type)

    def getLEQ(self):
        return _odbpy.dbMaster_getLEQ(self)

    def setLEQ(self, master):
        return _odbpy.dbMaster_setLEQ(self, master)

    def getEEQ(self):
        return _odbpy.dbMaster_getEEQ(self)

    def setEEQ(self, master):
        return _odbpy.dbMaster_setEEQ(self, master)

    def setSymmetryX(self):
        return _odbpy.dbMaster_setSymmetryX(self)

    def getSymmetryX(self):
        return _odbpy.dbMaster_getSymmetryX(self)

    def setSymmetryY(self):
        return _odbpy.dbMaster_setSymmetryY(self)

    def getSymmetryY(self):
        return _odbpy.dbMaster_getSymmetryY(self)

    def setSymmetryR90(self):
        return _odbpy.dbMaster_setSymmetryR90(self)

    def getSymmetryR90(self):
        return _odbpy.dbMaster_getSymmetryR90(self)

    def getMTerms(self):
        return _odbpy.dbMaster_getMTerms(self)

    def findMTerm(self, *args):
        return _odbpy.dbMaster_findMTerm(self, *args)

    def getLib(self):
        return _odbpy.dbMaster_getLib(self)

    def getObstructions(self):
        return _odbpy.dbMaster_getObstructions(self)

    def getPlacementBoundary(self):
        return _odbpy.dbMaster_getPlacementBoundary(self)

    def transform(self, t):
        return _odbpy.dbMaster_transform(self, t)

    def setFrozen(self):
        return _odbpy.dbMaster_setFrozen(self)

    def isFrozen(self):
        return _odbpy.dbMaster_isFrozen(self)

    def setSequential(self, v):
        return _odbpy.dbMaster_setSequential(self, v)

    def isSequential(self):
        return _odbpy.dbMaster_isSequential(self)

    def setMark(self, mark):
        return _odbpy.dbMaster_setMark(self, mark)

    def isMarked(self):
        return _odbpy.dbMaster_isMarked(self)

    def isSpecialPower(self):
        return _odbpy.dbMaster_isSpecialPower(self)

    def setSpecialPower(self, v):
        return _odbpy.dbMaster_setSpecialPower(self, v)

    def getMTermCount(self):
        return _odbpy.dbMaster_getMTermCount(self)

    def setSite(self, site):
        return _odbpy.dbMaster_setSite(self, site)

    def getSite(self):
        return _odbpy.dbMaster_getSite(self)

    def getMasterId(self):
        return _odbpy.dbMaster_getMasterId(self)

    @staticmethod
    def create(lib, name):
        return _odbpy.dbMaster_create(lib, name)

    @staticmethod
    def getMaster(lib, oid):
        return _odbpy.dbMaster_getMaster(lib, oid)

    def staCell(self):
        return _odbpy.dbMaster_staCell(self)

    def staSetCell(self, cell):
        return _odbpy.dbMaster_staSetCell(self, cell)

    def __init__(self):
        _odbpy.dbMaster_swiginit(self, _odbpy.new_dbMaster())
    __swig_destroy__ = _odbpy.delete_dbMaster

# Register dbMaster in _odbpy:
_odbpy.dbMaster_swigregister(dbMaster)

def dbMaster_create(lib, name):
    return _odbpy.dbMaster_create(lib, name)

def dbMaster_getMaster(lib, oid):
    return _odbpy.dbMaster_getMaster(lib, oid)

class dbMTerm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getConstName(self):
        return _odbpy.dbMTerm_getConstName(self)

    def getName(self, *args):
        return _odbpy.dbMTerm_getName(self, *args)

    def getSigType(self):
        return _odbpy.dbMTerm_getSigType(self)

    def getIoType(self):
        return _odbpy.dbMTerm_getIoType(self)

    def getShape(self):
        return _odbpy.dbMTerm_getShape(self)

    def setMark(self, v):
        return _odbpy.dbMTerm_setMark(self, v)

    def isSetMark(self):
        return _odbpy.dbMTerm_isSetMark(self)

    def getMaster(self):
        return _odbpy.dbMTerm_getMaster(self)

    def getMPins(self):
        return _odbpy.dbMTerm_getMPins(self)

    def getBBox(self):
        return _odbpy.dbMTerm_getBBox(self)

    def getTargets(self):
        return _odbpy.dbMTerm_getTargets(self)

    def addPartialMetalAreaEntry(self, inval, refly=None):
        return _odbpy.dbMTerm_addPartialMetalAreaEntry(self, inval, refly)

    def addPartialMetalSideAreaEntry(self, inval, refly=None):
        return _odbpy.dbMTerm_addPartialMetalSideAreaEntry(self, inval, refly)

    def addPartialCutAreaEntry(self, inval, refly=None):
        return _odbpy.dbMTerm_addPartialCutAreaEntry(self, inval, refly)

    def addDiffAreaEntry(self, inval, refly=None):
        return _odbpy.dbMTerm_addDiffAreaEntry(self, inval, refly)

    def createDefaultAntennaModel(self):
        return _odbpy.dbMTerm_createDefaultAntennaModel(self)

    def createOxide2AntennaModel(self):
        return _odbpy.dbMTerm_createOxide2AntennaModel(self)

    def hasDefaultAntennaModel(self):
        return _odbpy.dbMTerm_hasDefaultAntennaModel(self)

    def hasOxide2AntennaModel(self):
        return _odbpy.dbMTerm_hasOxide2AntennaModel(self)

    def getDefaultAntennaModel(self):
        return _odbpy.dbMTerm_getDefaultAntennaModel(self)

    def getOxide2AntennaModel(self):
        return _odbpy.dbMTerm_getOxide2AntennaModel(self)

    def writeAntennaLef(self, writer):
        return _odbpy.dbMTerm_writeAntennaLef(self, writer)

    def getDiffArea(self, data):
        return _odbpy.dbMTerm_getDiffArea(self, data)

    def staPort(self):
        return _odbpy.dbMTerm_staPort(self)

    def staSetPort(self, port):
        return _odbpy.dbMTerm_staSetPort(self, port)

    def getIndex(self):
        return _odbpy.dbMTerm_getIndex(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbMTerm_create(*args)

    @staticmethod
    def getMTerm(master, oid):
        return _odbpy.dbMTerm_getMTerm(master, oid)

    def __init__(self):
        _odbpy.dbMTerm_swiginit(self, _odbpy.new_dbMTerm())
    __swig_destroy__ = _odbpy.delete_dbMTerm

# Register dbMTerm in _odbpy:
_odbpy.dbMTerm_swigregister(dbMTerm)

def dbMTerm_create(*args):
    return _odbpy.dbMTerm_create(*args)

def dbMTerm_getMTerm(master, oid):
    return _odbpy.dbMTerm_getMTerm(master, oid)

class dbMPin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMTerm(self):
        return _odbpy.dbMPin_getMTerm(self)

    def getMaster(self):
        return _odbpy.dbMPin_getMaster(self)

    def getGeometry(self):
        return _odbpy.dbMPin_getGeometry(self)

    def getBBox(self):
        return _odbpy.dbMPin_getBBox(self)

    @staticmethod
    def create(mterm):
        return _odbpy.dbMPin_create(mterm)

    @staticmethod
    def getMPin(master, oid):
        return _odbpy.dbMPin_getMPin(master, oid)

    def __init__(self):
        _odbpy.dbMPin_swiginit(self, _odbpy.new_dbMPin())
    __swig_destroy__ = _odbpy.delete_dbMPin

# Register dbMPin in _odbpy:
_odbpy.dbMPin_swigregister(dbMPin)

def dbMPin_create(mterm):
    return _odbpy.dbMPin_create(mterm)

def dbMPin_getMPin(master, oid):
    return _odbpy.dbMPin_getMPin(master, oid)

class dbTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMaster(self):
        return _odbpy.dbTarget_getMaster(self)

    def getMTerm(self):
        return _odbpy.dbTarget_getMTerm(self)

    def getTechLayer(self):
        return _odbpy.dbTarget_getTechLayer(self)

    def getPoint(self):
        return _odbpy.dbTarget_getPoint(self)

    @staticmethod
    def create(mterm, layer, point):
        return _odbpy.dbTarget_create(mterm, layer, point)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbTarget_destroy(*args)

    @staticmethod
    def getTarget(master, oid):
        return _odbpy.dbTarget_getTarget(master, oid)

    def __init__(self):
        _odbpy.dbTarget_swiginit(self, _odbpy.new_dbTarget())
    __swig_destroy__ = _odbpy.delete_dbTarget

# Register dbTarget in _odbpy:
_odbpy.dbTarget_swigregister(dbTarget)

def dbTarget_create(mterm, layer, point):
    return _odbpy.dbTarget_create(mterm, layer, point)

def dbTarget_destroy(*args):
    return _odbpy.dbTarget_destroy(*args)

def dbTarget_getTarget(master, oid):
    return _odbpy.dbTarget_getTarget(master, oid)

class dbTech(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setDbUnitsPerMicron(self, value):
        return _odbpy.dbTech_setDbUnitsPerMicron(self, value)

    def getDbUnitsPerMicron(self):
        return _odbpy.dbTech_getDbUnitsPerMicron(self)

    def getLayers(self):
        return _odbpy.dbTech_getLayers(self)

    def findLayer(self, *args):
        return _odbpy.dbTech_findLayer(self, *args)

    def findRoutingLayer(self, level_number):
        return _odbpy.dbTech_findRoutingLayer(self, level_number)

    def getVias(self):
        return _odbpy.dbTech_getVias(self)

    def findVia(self, name):
        return _odbpy.dbTech_findVia(self, name)

    def getLefUnits(self):
        return _odbpy.dbTech_getLefUnits(self)

    def setLefUnits(self, units):
        return _odbpy.dbTech_setLefUnits(self, units)

    def getLefVersion(self):
        return _odbpy.dbTech_getLefVersion(self)

    def getLefVersionStr(self):
        return _odbpy.dbTech_getLefVersionStr(self)

    def setLefVersion(self, inver):
        return _odbpy.dbTech_setLefVersion(self, inver)

    def hasNoWireExtAtPin(self):
        return _odbpy.dbTech_hasNoWireExtAtPin(self)

    def getNoWireExtAtPin(self):
        return _odbpy.dbTech_getNoWireExtAtPin(self)

    def setNoWireExtAtPin(self, intyp):
        return _odbpy.dbTech_setNoWireExtAtPin(self, intyp)

    def getNamesCaseSensitive(self):
        return _odbpy.dbTech_getNamesCaseSensitive(self)

    def setNamesCaseSensitive(self, intyp):
        return _odbpy.dbTech_setNamesCaseSensitive(self, intyp)

    def hasClearanceMeasure(self):
        return _odbpy.dbTech_hasClearanceMeasure(self)

    def getClearanceMeasure(self):
        return _odbpy.dbTech_getClearanceMeasure(self)

    def setClearanceMeasure(self, inmeas):
        return _odbpy.dbTech_setClearanceMeasure(self, inmeas)

    def hasUseMinSpacingObs(self):
        return _odbpy.dbTech_hasUseMinSpacingObs(self)

    def getUseMinSpacingObs(self):
        return _odbpy.dbTech_getUseMinSpacingObs(self)

    def setUseMinSpacingObs(self, inval):
        return _odbpy.dbTech_setUseMinSpacingObs(self, inval)

    def hasUseMinSpacingPin(self):
        return _odbpy.dbTech_hasUseMinSpacingPin(self)

    def getUseMinSpacingPin(self):
        return _odbpy.dbTech_getUseMinSpacingPin(self)

    def setUseMinSpacingPin(self, inval):
        return _odbpy.dbTech_setUseMinSpacingPin(self, inval)

    def hasManufacturingGrid(self):
        return _odbpy.dbTech_hasManufacturingGrid(self)

    def getManufacturingGrid(self):
        return _odbpy.dbTech_getManufacturingGrid(self)

    def setManufacturingGrid(self, ingrd):
        return _odbpy.dbTech_setManufacturingGrid(self, ingrd)

    def getLayerCount(self):
        return _odbpy.dbTech_getLayerCount(self)

    def getRoutingLayerCount(self):
        return _odbpy.dbTech_getRoutingLayerCount(self)

    def getViaCount(self):
        return _odbpy.dbTech_getViaCount(self)

    def getNonDefaultRules(self):
        return _odbpy.dbTech_getNonDefaultRules(self)

    def findNonDefaultRule(self, rulename):
        return _odbpy.dbTech_findNonDefaultRule(self, rulename)

    def findSameNetRule(self, l1, l2):
        return _odbpy.dbTech_findSameNetRule(self, l1, l2)

    def getSameNetRules(self, rules):
        return _odbpy.dbTech_getSameNetRules(self, rules)

    def getViaRules(self):
        return _odbpy.dbTech_getViaRules(self)

    def getViaGenerateRules(self):
        return _odbpy.dbTech_getViaGenerateRules(self)

    def findViaRule(self, name):
        return _odbpy.dbTech_findViaRule(self, name)

    def findViaGenerateRule(self, name):
        return _odbpy.dbTech_findViaGenerateRule(self, name)

    def checkLayer(self, typeChk, widthChk, pitchChk, spacingChk):
        return _odbpy.dbTech_checkLayer(self, typeChk, widthChk, pitchChk, spacingChk)

    @staticmethod
    def create(db, dbu_per_micron=1000):
        return _odbpy.dbTech_create(db, dbu_per_micron)

    @staticmethod
    def getTech(db, oid):
        return _odbpy.dbTech_getTech(db, oid)

    @staticmethod
    def destroy(tech):
        return _odbpy.dbTech_destroy(tech)

    def __init__(self):
        _odbpy.dbTech_swiginit(self, _odbpy.new_dbTech())
    __swig_destroy__ = _odbpy.delete_dbTech

# Register dbTech in _odbpy:
_odbpy.dbTech_swigregister(dbTech)

def dbTech_create(db, dbu_per_micron=1000):
    return _odbpy.dbTech_create(db, dbu_per_micron)

def dbTech_getTech(db, oid):
    return _odbpy.dbTech_getTech(db, oid)

def dbTech_destroy(tech):
    return _odbpy.dbTech_destroy(tech)

class dbTechVia(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbTechVia_getName(self)

    def getConstName(self):
        return _odbpy.dbTechVia_getConstName(self)

    def isDefault(self):
        return _odbpy.dbTechVia_isDefault(self)

    def setDefault(self):
        return _odbpy.dbTechVia_setDefault(self)

    def isTopOfStack(self):
        return _odbpy.dbTechVia_isTopOfStack(self)

    def setTopOfStack(self):
        return _odbpy.dbTechVia_setTopOfStack(self)

    def getResistance(self):
        return _odbpy.dbTechVia_getResistance(self)

    def setResistance(self, res):
        return _odbpy.dbTechVia_setResistance(self, res)

    def setPattern(self, pattern):
        return _odbpy.dbTechVia_setPattern(self, pattern)

    def getPattern(self):
        return _odbpy.dbTechVia_getPattern(self)

    def setViaGenerateRule(self, rule):
        return _odbpy.dbTechVia_setViaGenerateRule(self, rule)

    def getViaGenerateRule(self):
        return _odbpy.dbTechVia_getViaGenerateRule(self)

    def hasParams(self):
        return _odbpy.dbTechVia_hasParams(self)

    def setViaParams(self, params):
        return _odbpy.dbTechVia_setViaParams(self, params)

    def getViaParams(self):
        return _odbpy.dbTechVia_getViaParams(self)

    def getTech(self):
        return _odbpy.dbTechVia_getTech(self)

    def getBBox(self):
        return _odbpy.dbTechVia_getBBox(self)

    def getBoxes(self):
        return _odbpy.dbTechVia_getBoxes(self)

    def getTopLayer(self):
        return _odbpy.dbTechVia_getTopLayer(self)

    def getBottomLayer(self):
        return _odbpy.dbTechVia_getBottomLayer(self)

    def getNonDefaultRule(self):
        return _odbpy.dbTechVia_getNonDefaultRule(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbTechVia_create(*args)

    @staticmethod
    def clone(rule, invia_, new_name):
        return _odbpy.dbTechVia_clone(rule, invia_, new_name)

    @staticmethod
    def getTechVia(tech, oid):
        return _odbpy.dbTechVia_getTechVia(tech, oid)

    def __init__(self):
        _odbpy.dbTechVia_swiginit(self, _odbpy.new_dbTechVia())
    __swig_destroy__ = _odbpy.delete_dbTechVia

# Register dbTechVia in _odbpy:
_odbpy.dbTechVia_swigregister(dbTechVia)

def dbTechVia_create(*args):
    return _odbpy.dbTechVia_create(*args)

def dbTechVia_clone(rule, invia_, new_name):
    return _odbpy.dbTechVia_clone(rule, invia_, new_name)

def dbTechVia_getTechVia(tech, oid):
    return _odbpy.dbTechVia_getTechVia(tech, oid)

class dbTechViaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbTechViaRule_getName(self)

    def addVia(self, via):
        return _odbpy.dbTechViaRule_addVia(self, via)

    def getViaCount(self):
        return _odbpy.dbTechViaRule_getViaCount(self)

    def getVia(self, indx):
        return _odbpy.dbTechViaRule_getVia(self, indx)

    def getViaLayerRuleCount(self):
        return _odbpy.dbTechViaRule_getViaLayerRuleCount(self)

    def getViaLayerRule(self, indx):
        return _odbpy.dbTechViaRule_getViaLayerRule(self, indx)

    @staticmethod
    def create(tech, name):
        return _odbpy.dbTechViaRule_create(tech, name)

    @staticmethod
    def getTechViaRule(tech, oid):
        return _odbpy.dbTechViaRule_getTechViaRule(tech, oid)

    def __init__(self):
        _odbpy.dbTechViaRule_swiginit(self, _odbpy.new_dbTechViaRule())
    __swig_destroy__ = _odbpy.delete_dbTechViaRule

# Register dbTechViaRule in _odbpy:
_odbpy.dbTechViaRule_swigregister(dbTechViaRule)

def dbTechViaRule_create(tech, name):
    return _odbpy.dbTechViaRule_create(tech, name)

def dbTechViaRule_getTechViaRule(tech, oid):
    return _odbpy.dbTechViaRule_getTechViaRule(tech, oid)

class dbTechViaLayerRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer(self):
        return _odbpy.dbTechViaLayerRule_getLayer(self)

    def getDirection(self):
        return _odbpy.dbTechViaLayerRule_getDirection(self)

    def setDirection(self, dir):
        return _odbpy.dbTechViaLayerRule_setDirection(self, dir)

    def hasWidth(self):
        return _odbpy.dbTechViaLayerRule_hasWidth(self)

    def getWidth(self, minWidth, maxWidth):
        return _odbpy.dbTechViaLayerRule_getWidth(self, minWidth, maxWidth)

    def setWidth(self, minWidth, maxWidth):
        return _odbpy.dbTechViaLayerRule_setWidth(self, minWidth, maxWidth)

    def hasEnclosure(self):
        return _odbpy.dbTechViaLayerRule_hasEnclosure(self)

    def getEnclosure(self):
        return _odbpy.dbTechViaLayerRule_getEnclosure(self)

    def setEnclosure(self, overhang1, overhang2):
        return _odbpy.dbTechViaLayerRule_setEnclosure(self, overhang1, overhang2)

    def hasOverhang(self):
        return _odbpy.dbTechViaLayerRule_hasOverhang(self)

    def getOverhang(self):
        return _odbpy.dbTechViaLayerRule_getOverhang(self)

    def setOverhang(self, overhang):
        return _odbpy.dbTechViaLayerRule_setOverhang(self, overhang)

    def hasMetalOverhang(self):
        return _odbpy.dbTechViaLayerRule_hasMetalOverhang(self)

    def getMetalOverhang(self):
        return _odbpy.dbTechViaLayerRule_getMetalOverhang(self)

    def setMetalOverhang(self, overhang):
        return _odbpy.dbTechViaLayerRule_setMetalOverhang(self, overhang)

    def hasRect(self):
        return _odbpy.dbTechViaLayerRule_hasRect(self)

    def getRect(self):
        return _odbpy.dbTechViaLayerRule_getRect(self)

    def setRect(self):
        return _odbpy.dbTechViaLayerRule_setRect(self)

    def hasSpacing(self):
        return _odbpy.dbTechViaLayerRule_hasSpacing(self)

    def getSpacing(self):
        return _odbpy.dbTechViaLayerRule_getSpacing(self)

    def setSpacing(self, x_spacing, y_spacing):
        return _odbpy.dbTechViaLayerRule_setSpacing(self, x_spacing, y_spacing)

    def hasResistance(self):
        return _odbpy.dbTechViaLayerRule_hasResistance(self)

    def setResistance(self, r):
        return _odbpy.dbTechViaLayerRule_setResistance(self, r)

    def getResistance(self):
        return _odbpy.dbTechViaLayerRule_getResistance(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbTechViaLayerRule_create(*args)

    @staticmethod
    def getTechViaLayerRule(tech, oid):
        return _odbpy.dbTechViaLayerRule_getTechViaLayerRule(tech, oid)

    def __init__(self):
        _odbpy.dbTechViaLayerRule_swiginit(self, _odbpy.new_dbTechViaLayerRule())
    __swig_destroy__ = _odbpy.delete_dbTechViaLayerRule

# Register dbTechViaLayerRule in _odbpy:
_odbpy.dbTechViaLayerRule_swigregister(dbTechViaLayerRule)

def dbTechViaLayerRule_create(*args):
    return _odbpy.dbTechViaLayerRule_create(*args)

def dbTechViaLayerRule_getTechViaLayerRule(tech, oid):
    return _odbpy.dbTechViaLayerRule_getTechViaLayerRule(tech, oid)

class dbTechViaGenerateRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbTechViaGenerateRule_getName(self)

    def isDefault(self):
        return _odbpy.dbTechViaGenerateRule_isDefault(self)

    def getViaLayerRuleCount(self):
        return _odbpy.dbTechViaGenerateRule_getViaLayerRuleCount(self)

    def getViaLayerRule(self, indx):
        return _odbpy.dbTechViaGenerateRule_getViaLayerRule(self, indx)

    @staticmethod
    def create(tech, name, is_default):
        return _odbpy.dbTechViaGenerateRule_create(tech, name, is_default)

    @staticmethod
    def getTechViaGenerateRule(tech, oid):
        return _odbpy.dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid)

    def __init__(self):
        _odbpy.dbTechViaGenerateRule_swiginit(self, _odbpy.new_dbTechViaGenerateRule())
    __swig_destroy__ = _odbpy.delete_dbTechViaGenerateRule

# Register dbTechViaGenerateRule in _odbpy:
_odbpy.dbTechViaGenerateRule_swigregister(dbTechViaGenerateRule)

def dbTechViaGenerateRule_create(tech, name, is_default):
    return _odbpy.dbTechViaGenerateRule_create(tech, name, is_default)

def dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid):
    return _odbpy.dbTechViaGenerateRule_getTechViaGenerateRule(tech, oid)

class dbTechLayerSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isUnconditional(self):
        return _odbpy.dbTechLayerSpacingRule_isUnconditional(self)

    def getSpacing(self):
        return _odbpy.dbTechLayerSpacingRule_getSpacing(self)

    def getLengthThreshold(self, threshold):
        return _odbpy.dbTechLayerSpacingRule_getLengthThreshold(self, threshold)

    def getLengthThresholdRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_getLengthThresholdRange(self, rmin, rmax)

    def getRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_getRange(self, rmin, rmax)

    def setSpacingNotchLengthValid(self, val):
        return _odbpy.dbTechLayerSpacingRule_setSpacingNotchLengthValid(self, val)

    def setSpacingEndOfNotchWidthValid(self, val):
        return _odbpy.dbTechLayerSpacingRule_setSpacingEndOfNotchWidthValid(self, val)

    def hasSpacingNotchLength(self):
        return _odbpy.dbTechLayerSpacingRule_hasSpacingNotchLength(self)

    def hasSpacingEndOfNotchWidth(self):
        return _odbpy.dbTechLayerSpacingRule_hasSpacingEndOfNotchWidth(self)

    def hasRange(self):
        return _odbpy.dbTechLayerSpacingRule_hasRange(self)

    def hasLengthThreshold(self):
        return _odbpy.dbTechLayerSpacingRule_hasLengthThreshold(self)

    def hasUseLengthThreshold(self):
        return _odbpy.dbTechLayerSpacingRule_hasUseLengthThreshold(self)

    def getInfluence(self, influence):
        return _odbpy.dbTechLayerSpacingRule_getInfluence(self, influence)

    def getInfluenceRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_getInfluenceRange(self, rmin, rmax)

    def getRangeRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_getRangeRange(self, rmin, rmax)

    def getAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet):
        return _odbpy.dbTechLayerSpacingRule_getAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet)

    def getCutLayer4Spacing(self, outly):
        return _odbpy.dbTechLayerSpacingRule_getCutLayer4Spacing(self, outly)

    def getCutStacking(self):
        return _odbpy.dbTechLayerSpacingRule_getCutStacking(self)

    def getCutCenterToCenter(self):
        return _odbpy.dbTechLayerSpacingRule_getCutCenterToCenter(self)

    def getCutSameNet(self):
        return _odbpy.dbTechLayerSpacingRule_getCutSameNet(self)

    def getCutParallelOverlap(self):
        return _odbpy.dbTechLayerSpacingRule_getCutParallelOverlap(self)

    def getCutArea(self):
        return _odbpy.dbTechLayerSpacingRule_getCutArea(self)

    def writeLef(self, writer):
        return _odbpy.dbTechLayerSpacingRule_writeLef(self, writer)

    def setSameNetPgOnly(self, pgonly):
        return _odbpy.dbTechLayerSpacingRule_setSameNetPgOnly(self, pgonly)

    def getSameNetPgOnly(self):
        return _odbpy.dbTechLayerSpacingRule_getSameNetPgOnly(self)

    def setLengthThreshold(self, threshold):
        return _odbpy.dbTechLayerSpacingRule_setLengthThreshold(self, threshold)

    def setSpacing(self, spacing):
        return _odbpy.dbTechLayerSpacingRule_setSpacing(self, spacing)

    def setLengthThresholdRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_setLengthThresholdRange(self, rmin, rmax)

    def setRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_setRange(self, rmin, rmax)

    def setUseLengthThreshold(self):
        return _odbpy.dbTechLayerSpacingRule_setUseLengthThreshold(self)

    def setInfluence(self, influence):
        return _odbpy.dbTechLayerSpacingRule_setInfluence(self, influence)

    def setInfluenceRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_setInfluenceRange(self, rmin, rmax)

    def setRangeRange(self, rmin, rmax):
        return _odbpy.dbTechLayerSpacingRule_setRangeRange(self, rmin, rmax)

    def setAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet):
        return _odbpy.dbTechLayerSpacingRule_setAdjacentCuts(self, numcuts, within, spacing, except_same_pgnet)

    def setCutLayer4Spacing(self, cutly):
        return _odbpy.dbTechLayerSpacingRule_setCutLayer4Spacing(self, cutly)

    def setCutStacking(self, stacking):
        return _odbpy.dbTechLayerSpacingRule_setCutStacking(self, stacking)

    def setCutCenterToCenter(self, c2c):
        return _odbpy.dbTechLayerSpacingRule_setCutCenterToCenter(self, c2c)

    def setCutSameNet(self, same_net):
        return _odbpy.dbTechLayerSpacingRule_setCutSameNet(self, same_net)

    def setCutParallelOverlap(self, overlap):
        return _odbpy.dbTechLayerSpacingRule_setCutParallelOverlap(self, overlap)

    def setCutArea(self, area):
        return _odbpy.dbTechLayerSpacingRule_setCutArea(self, area)

    def setEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges):
        return _odbpy.dbTechLayerSpacingRule_setEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges)

    def getEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges):
        return _odbpy.dbTechLayerSpacingRule_getEol(self, width, within, parallelEdge, parallelSpace, parallelWithin, twoEdges)

    @staticmethod
    def create(inly):
        return _odbpy.dbTechLayerSpacingRule_create(inly)

    @staticmethod
    def getTechLayerSpacingRule(inly, dbid):
        return _odbpy.dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid)

    def __init__(self):
        _odbpy.dbTechLayerSpacingRule_swiginit(self, _odbpy.new_dbTechLayerSpacingRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerSpacingRule

# Register dbTechLayerSpacingRule in _odbpy:
_odbpy.dbTechLayerSpacingRule_swigregister(dbTechLayerSpacingRule)

def dbTechLayerSpacingRule_create(inly):
    return _odbpy.dbTechLayerSpacingRule_create(inly)

def dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid):
    return _odbpy.dbTechLayerSpacingRule_getTechLayerSpacingRule(inly, dbid)

class dbTechMinCutRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getMinimumCuts(self, numcuts, width):
        return _odbpy.dbTechMinCutRule_getMinimumCuts(self, numcuts, width)

    def setMinimumCuts(self, numcuts, width, above_only, below_only):
        return _odbpy.dbTechMinCutRule_setMinimumCuts(self, numcuts, width, above_only, below_only)

    def getCutDistance(self, cut_distance):
        return _odbpy.dbTechMinCutRule_getCutDistance(self, cut_distance)

    def setCutDistance(self, cut_distance):
        return _odbpy.dbTechMinCutRule_setCutDistance(self, cut_distance)

    def getLengthForCuts(self, length, distance):
        return _odbpy.dbTechMinCutRule_getLengthForCuts(self, length, distance)

    def setLengthForCuts(self, length, distance):
        return _odbpy.dbTechMinCutRule_setLengthForCuts(self, length, distance)

    def isAboveOnly(self):
        return _odbpy.dbTechMinCutRule_isAboveOnly(self)

    def isBelowOnly(self):
        return _odbpy.dbTechMinCutRule_isBelowOnly(self)

    def writeLef(self, writer):
        return _odbpy.dbTechMinCutRule_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _odbpy.dbTechMinCutRule_create(inly)

    @staticmethod
    def getMinCutRule(inly, dbid):
        return _odbpy.dbTechMinCutRule_getMinCutRule(inly, dbid)

    def __init__(self):
        _odbpy.dbTechMinCutRule_swiginit(self, _odbpy.new_dbTechMinCutRule())
    __swig_destroy__ = _odbpy.delete_dbTechMinCutRule

# Register dbTechMinCutRule in _odbpy:
_odbpy.dbTechMinCutRule_swigregister(dbTechMinCutRule)

def dbTechMinCutRule_create(inly):
    return _odbpy.dbTechMinCutRule_create(inly)

def dbTechMinCutRule_getMinCutRule(inly, dbid):
    return _odbpy.dbTechMinCutRule_getMinCutRule(inly, dbid)

class dbTechMinEncRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getEnclosure(self, area):
        return _odbpy.dbTechMinEncRule_getEnclosure(self, area)

    def setEnclosure(self, area):
        return _odbpy.dbTechMinEncRule_setEnclosure(self, area)

    def getEnclosureWidth(self, width):
        return _odbpy.dbTechMinEncRule_getEnclosureWidth(self, width)

    def setEnclosureWidth(self, width):
        return _odbpy.dbTechMinEncRule_setEnclosureWidth(self, width)

    def writeLef(self, writer):
        return _odbpy.dbTechMinEncRule_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _odbpy.dbTechMinEncRule_create(inly)

    @staticmethod
    def getMinEncRule(inly, dbid):
        return _odbpy.dbTechMinEncRule_getMinEncRule(inly, dbid)

    def __init__(self):
        _odbpy.dbTechMinEncRule_swiginit(self, _odbpy.new_dbTechMinEncRule())
    __swig_destroy__ = _odbpy.delete_dbTechMinEncRule

# Register dbTechMinEncRule in _odbpy:
_odbpy.dbTechMinEncRule_swigregister(dbTechMinEncRule)

def dbTechMinEncRule_create(inly):
    return _odbpy.dbTechMinEncRule_create(inly)

def dbTechMinEncRule_getMinEncRule(inly, dbid):
    return _odbpy.dbTechMinEncRule_getMinEncRule(inly, dbid)

class dbTechV55InfluenceEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setV55InfluenceEntry(self, width, within, spacing):
        return _odbpy.dbTechV55InfluenceEntry_setV55InfluenceEntry(self, width, within, spacing)

    def writeLef(self, writer):
        return _odbpy.dbTechV55InfluenceEntry_writeLef(self, writer)

    @staticmethod
    def create(inly):
        return _odbpy.dbTechV55InfluenceEntry_create(inly)

    @staticmethod
    def getV55InfluenceEntry(*args):
        return _odbpy.dbTechV55InfluenceEntry_getV55InfluenceEntry(*args)

    def __init__(self):
        _odbpy.dbTechV55InfluenceEntry_swiginit(self, _odbpy.new_dbTechV55InfluenceEntry())
    __swig_destroy__ = _odbpy.delete_dbTechV55InfluenceEntry

# Register dbTechV55InfluenceEntry in _odbpy:
_odbpy.dbTechV55InfluenceEntry_swigregister(dbTechV55InfluenceEntry)

def dbTechV55InfluenceEntry_create(inly):
    return _odbpy.dbTechV55InfluenceEntry_create(inly)

def dbTechV55InfluenceEntry_getV55InfluenceEntry(*args):
    return _odbpy.dbTechV55InfluenceEntry_getV55InfluenceEntry(*args)

class dbTechLayerAntennaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def isValid(self):
        return _odbpy.dbTechLayerAntennaRule_isValid(self)

    def writeLef(self, writer):
        return _odbpy.dbTechLayerAntennaRule_writeLef(self, writer)

    def setGatePlusDiffFactor(self, factor):
        return _odbpy.dbTechLayerAntennaRule_setGatePlusDiffFactor(self, factor)

    def setAreaMinusDiffFactor(self, factor):
        return _odbpy.dbTechLayerAntennaRule_setAreaMinusDiffFactor(self, factor)

    def setAreaFactor(self, factor, diffuse=False):
        return _odbpy.dbTechLayerAntennaRule_setAreaFactor(self, factor, diffuse)

    def setSideAreaFactor(self, factor, diffuse=False):
        return _odbpy.dbTechLayerAntennaRule_setSideAreaFactor(self, factor, diffuse)

    def hasAreaFactor(self):
        return _odbpy.dbTechLayerAntennaRule_hasAreaFactor(self)

    def hasSideAreaFactor(self):
        return _odbpy.dbTechLayerAntennaRule_hasSideAreaFactor(self)

    def getAreaFactor(self):
        return _odbpy.dbTechLayerAntennaRule_getAreaFactor(self)

    def getSideAreaFactor(self):
        return _odbpy.dbTechLayerAntennaRule_getSideAreaFactor(self)

    def isAreaFactorDiffUseOnly(self):
        return _odbpy.dbTechLayerAntennaRule_isAreaFactorDiffUseOnly(self)

    def isSideAreaFactorDiffUseOnly(self):
        return _odbpy.dbTechLayerAntennaRule_isSideAreaFactorDiffUseOnly(self)

    def hasAntennaCumRoutingPlusCut(self):
        return _odbpy.dbTechLayerAntennaRule_hasAntennaCumRoutingPlusCut(self)

    def setAntennaCumRoutingPlusCut(self, value=True):
        return _odbpy.dbTechLayerAntennaRule_setAntennaCumRoutingPlusCut(self, value)

    def getPAR(self):
        return _odbpy.dbTechLayerAntennaRule_getPAR(self)

    def getCAR(self):
        return _odbpy.dbTechLayerAntennaRule_getCAR(self)

    def getPSR(self):
        return _odbpy.dbTechLayerAntennaRule_getPSR(self)

    def getCSR(self):
        return _odbpy.dbTechLayerAntennaRule_getCSR(self)

    def getGatePlusDiffFactor(self):
        return _odbpy.dbTechLayerAntennaRule_getGatePlusDiffFactor(self)

    def getAreaMinusDiffFactor(self):
        return _odbpy.dbTechLayerAntennaRule_getAreaMinusDiffFactor(self)

    def setPAR(self, ratio):
        return _odbpy.dbTechLayerAntennaRule_setPAR(self, ratio)

    def setCAR(self, ratio):
        return _odbpy.dbTechLayerAntennaRule_setCAR(self, ratio)

    def setPSR(self, ratio):
        return _odbpy.dbTechLayerAntennaRule_setPSR(self, ratio)

    def setCSR(self, ratio):
        return _odbpy.dbTechLayerAntennaRule_setCSR(self, ratio)

    def setDiffPAR(self, *args):
        return _odbpy.dbTechLayerAntennaRule_setDiffPAR(self, *args)

    def setDiffCAR(self, *args):
        return _odbpy.dbTechLayerAntennaRule_setDiffCAR(self, *args)

    def setDiffPSR(self, *args):
        return _odbpy.dbTechLayerAntennaRule_setDiffPSR(self, *args)

    def setDiffCSR(self, *args):
        return _odbpy.dbTechLayerAntennaRule_setDiffCSR(self, *args)

    def setAreaDiffReduce(self, areas, factors):
        return _odbpy.dbTechLayerAntennaRule_setAreaDiffReduce(self, areas, factors)

    @staticmethod
    def getAntennaRule(inly, dbid):
        return _odbpy.dbTechLayerAntennaRule_getAntennaRule(inly, dbid)

    def __init__(self):
        _odbpy.dbTechLayerAntennaRule_swiginit(self, _odbpy.new_dbTechLayerAntennaRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerAntennaRule

# Register dbTechLayerAntennaRule in _odbpy:
_odbpy.dbTechLayerAntennaRule_swigregister(dbTechLayerAntennaRule)

def dbTechLayerAntennaRule_getAntennaRule(inly, dbid):
    return _odbpy.dbTechLayerAntennaRule_getAntennaRule(inly, dbid)

class dbTechAntennaPinModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addGateAreaEntry(self, inval, refly=None):
        return _odbpy.dbTechAntennaPinModel_addGateAreaEntry(self, inval, refly)

    def addMaxAreaCAREntry(self, inval, refly=None):
        return _odbpy.dbTechAntennaPinModel_addMaxAreaCAREntry(self, inval, refly)

    def addMaxSideAreaCAREntry(self, inval, refly=None):
        return _odbpy.dbTechAntennaPinModel_addMaxSideAreaCAREntry(self, inval, refly)

    def addMaxCutCAREntry(self, inval, refly=None):
        return _odbpy.dbTechAntennaPinModel_addMaxCutCAREntry(self, inval, refly)

    def getGateArea(self, data):
        return _odbpy.dbTechAntennaPinModel_getGateArea(self, data)

    def getMaxAreaCAR(self, data):
        return _odbpy.dbTechAntennaPinModel_getMaxAreaCAR(self, data)

    def getMaxSideAreaCAR(self, data):
        return _odbpy.dbTechAntennaPinModel_getMaxSideAreaCAR(self, data)

    def getMaxCutCAR(self, data):
        return _odbpy.dbTechAntennaPinModel_getMaxCutCAR(self, data)

    def writeLef(self, tech, writer):
        return _odbpy.dbTechAntennaPinModel_writeLef(self, tech, writer)

    @staticmethod
    def getAntennaPinModel(master, dbid):
        return _odbpy.dbTechAntennaPinModel_getAntennaPinModel(master, dbid)

    def __init__(self):
        _odbpy.dbTechAntennaPinModel_swiginit(self, _odbpy.new_dbTechAntennaPinModel())
    __swig_destroy__ = _odbpy.delete_dbTechAntennaPinModel

# Register dbTechAntennaPinModel in _odbpy:
_odbpy.dbTechAntennaPinModel_swigregister(dbTechAntennaPinModel)

def dbTechAntennaPinModel_getAntennaPinModel(master, dbid):
    return _odbpy.dbTechAntennaPinModel_getAntennaPinModel(master, dbid)

class dbTechNonDefaultRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbTechNonDefaultRule_getName(self)

    def getConstName(self):
        return _odbpy.dbTechNonDefaultRule_getConstName(self)

    def isBlockRule(self):
        return _odbpy.dbTechNonDefaultRule_isBlockRule(self)

    def getLayerRule(self, layer):
        return _odbpy.dbTechNonDefaultRule_getLayerRule(self, layer)

    def getLayerRules(self, layer_rules):
        return _odbpy.dbTechNonDefaultRule_getLayerRules(self, layer_rules)

    def getVias(self, vias):
        return _odbpy.dbTechNonDefaultRule_getVias(self, vias)

    def findSameNetRule(self, l1, l2):
        return _odbpy.dbTechNonDefaultRule_findSameNetRule(self, l1, l2)

    def getSameNetRules(self, rules):
        return _odbpy.dbTechNonDefaultRule_getSameNetRules(self, rules)

    def getHardSpacing(self):
        return _odbpy.dbTechNonDefaultRule_getHardSpacing(self)

    def setHardSpacing(self, value):
        return _odbpy.dbTechNonDefaultRule_setHardSpacing(self, value)

    def addUseVia(self, via):
        return _odbpy.dbTechNonDefaultRule_addUseVia(self, via)

    def getUseVias(self, vias):
        return _odbpy.dbTechNonDefaultRule_getUseVias(self, vias)

    def addUseViaRule(self, rule):
        return _odbpy.dbTechNonDefaultRule_addUseViaRule(self, rule)

    def getUseViaRules(self, rules):
        return _odbpy.dbTechNonDefaultRule_getUseViaRules(self, rules)

    def setMinCuts(self, cut_layer, count):
        return _odbpy.dbTechNonDefaultRule_setMinCuts(self, cut_layer, count)

    def getMinCuts(self, cut_layer, count):
        return _odbpy.dbTechNonDefaultRule_getMinCuts(self, cut_layer, count)

    @staticmethod
    def create(*args):
        return _odbpy.dbTechNonDefaultRule_create(*args)

    @staticmethod
    def getTechNonDefaultRule(*args):
        return _odbpy.dbTechNonDefaultRule_getTechNonDefaultRule(*args)

    def __init__(self):
        _odbpy.dbTechNonDefaultRule_swiginit(self, _odbpy.new_dbTechNonDefaultRule())
    __swig_destroy__ = _odbpy.delete_dbTechNonDefaultRule

# Register dbTechNonDefaultRule in _odbpy:
_odbpy.dbTechNonDefaultRule_swigregister(dbTechNonDefaultRule)

def dbTechNonDefaultRule_create(*args):
    return _odbpy.dbTechNonDefaultRule_create(*args)

def dbTechNonDefaultRule_getTechNonDefaultRule(*args):
    return _odbpy.dbTechNonDefaultRule_getTechNonDefaultRule(*args)

class dbTechLayerRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer(self):
        return _odbpy.dbTechLayerRule_getLayer(self)

    def isBlockRule(self):
        return _odbpy.dbTechLayerRule_isBlockRule(self)

    def getNonDefaultRule(self):
        return _odbpy.dbTechLayerRule_getNonDefaultRule(self)

    def getWidth(self):
        return _odbpy.dbTechLayerRule_getWidth(self)

    def setWidth(self, width):
        return _odbpy.dbTechLayerRule_setWidth(self, width)

    def getSpacing(self):
        return _odbpy.dbTechLayerRule_getSpacing(self)

    def setSpacing(self, spacing):
        return _odbpy.dbTechLayerRule_setSpacing(self, spacing)

    def getResistance(self):
        return _odbpy.dbTechLayerRule_getResistance(self)

    def setResistance(self, res):
        return _odbpy.dbTechLayerRule_setResistance(self, res)

    def getCapacitance(self):
        return _odbpy.dbTechLayerRule_getCapacitance(self)

    def setCapacitance(self, cap):
        return _odbpy.dbTechLayerRule_setCapacitance(self, cap)

    def getEdgeCapacitance(self):
        return _odbpy.dbTechLayerRule_getEdgeCapacitance(self)

    def setEdgeCapacitance(self, cap):
        return _odbpy.dbTechLayerRule_setEdgeCapacitance(self, cap)

    def getWireExtension(self):
        return _odbpy.dbTechLayerRule_getWireExtension(self)

    def setWireExtension(self, ext):
        return _odbpy.dbTechLayerRule_setWireExtension(self, ext)

    @staticmethod
    def create(rule, layer):
        return _odbpy.dbTechLayerRule_create(rule, layer)

    @staticmethod
    def getTechLayerRule(*args):
        return _odbpy.dbTechLayerRule_getTechLayerRule(*args)

    def __init__(self):
        _odbpy.dbTechLayerRule_swiginit(self, _odbpy.new_dbTechLayerRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerRule

# Register dbTechLayerRule in _odbpy:
_odbpy.dbTechLayerRule_swigregister(dbTechLayerRule)

def dbTechLayerRule_create(rule, layer):
    return _odbpy.dbTechLayerRule_create(rule, layer)

def dbTechLayerRule_getTechLayerRule(*args):
    return _odbpy.dbTechLayerRule_getTechLayerRule(*args)

class dbTechSameNetRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getLayer1(self):
        return _odbpy.dbTechSameNetRule_getLayer1(self)

    def getLayer2(self):
        return _odbpy.dbTechSameNetRule_getLayer2(self)

    def getSpacing(self):
        return _odbpy.dbTechSameNetRule_getSpacing(self)

    def setSpacing(self, spacing):
        return _odbpy.dbTechSameNetRule_setSpacing(self, spacing)

    def setAllowStackedVias(self, value):
        return _odbpy.dbTechSameNetRule_setAllowStackedVias(self, value)

    def getAllowStackedVias(self):
        return _odbpy.dbTechSameNetRule_getAllowStackedVias(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbTechSameNetRule_create(*args)

    @staticmethod
    def getTechSameNetRule(tech, oid):
        return _odbpy.dbTechSameNetRule_getTechSameNetRule(tech, oid)

    def __init__(self):
        _odbpy.dbTechSameNetRule_swiginit(self, _odbpy.new_dbTechSameNetRule())
    __swig_destroy__ = _odbpy.delete_dbTechSameNetRule

# Register dbTechSameNetRule in _odbpy:
_odbpy.dbTechSameNetRule_swigregister(dbTechSameNetRule)

def dbTechSameNetRule_create(*args):
    return _odbpy.dbTechSameNetRule_create(*args)

def dbTechSameNetRule_getTechSameNetRule(tech, oid):
    return _odbpy.dbTechSameNetRule_getTechSameNetRule(tech, oid)

class dbViaParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odbpy.dbViaParams_swiginit(self, _odbpy.new_dbViaParams(*args))
    __swig_destroy__ = _odbpy.delete_dbViaParams

    def getXCutSize(self):
        return _odbpy.dbViaParams_getXCutSize(self)

    def getYCutSize(self):
        return _odbpy.dbViaParams_getYCutSize(self)

    def getXCutSpacing(self):
        return _odbpy.dbViaParams_getXCutSpacing(self)

    def getYCutSpacing(self):
        return _odbpy.dbViaParams_getYCutSpacing(self)

    def getXTopEnclosure(self):
        return _odbpy.dbViaParams_getXTopEnclosure(self)

    def getYTopEnclosure(self):
        return _odbpy.dbViaParams_getYTopEnclosure(self)

    def getXBottomEnclosure(self):
        return _odbpy.dbViaParams_getXBottomEnclosure(self)

    def getYBottomEnclosure(self):
        return _odbpy.dbViaParams_getYBottomEnclosure(self)

    def getNumCutRows(self):
        return _odbpy.dbViaParams_getNumCutRows(self)

    def getNumCutCols(self):
        return _odbpy.dbViaParams_getNumCutCols(self)

    def getXOrigin(self):
        return _odbpy.dbViaParams_getXOrigin(self)

    def getYOrigin(self):
        return _odbpy.dbViaParams_getYOrigin(self)

    def getXTopOffset(self):
        return _odbpy.dbViaParams_getXTopOffset(self)

    def getYTopOffset(self):
        return _odbpy.dbViaParams_getYTopOffset(self)

    def getXBottomOffset(self):
        return _odbpy.dbViaParams_getXBottomOffset(self)

    def getYBottomOffset(self):
        return _odbpy.dbViaParams_getYBottomOffset(self)

    def getTopLayer(self):
        return _odbpy.dbViaParams_getTopLayer(self)

    def getCutLayer(self):
        return _odbpy.dbViaParams_getCutLayer(self)

    def getBottomLayer(self):
        return _odbpy.dbViaParams_getBottomLayer(self)

    def setXCutSize(self, value):
        return _odbpy.dbViaParams_setXCutSize(self, value)

    def setYCutSize(self, value):
        return _odbpy.dbViaParams_setYCutSize(self, value)

    def setXCutSpacing(self, value):
        return _odbpy.dbViaParams_setXCutSpacing(self, value)

    def setYCutSpacing(self, value):
        return _odbpy.dbViaParams_setYCutSpacing(self, value)

    def setXTopEnclosure(self, value):
        return _odbpy.dbViaParams_setXTopEnclosure(self, value)

    def setYTopEnclosure(self, value):
        return _odbpy.dbViaParams_setYTopEnclosure(self, value)

    def setXBottomEnclosure(self, value):
        return _odbpy.dbViaParams_setXBottomEnclosure(self, value)

    def setYBottomEnclosure(self, value):
        return _odbpy.dbViaParams_setYBottomEnclosure(self, value)

    def setNumCutRows(self, value):
        return _odbpy.dbViaParams_setNumCutRows(self, value)

    def setNumCutCols(self, value):
        return _odbpy.dbViaParams_setNumCutCols(self, value)

    def setXOrigin(self, value):
        return _odbpy.dbViaParams_setXOrigin(self, value)

    def setYOrigin(self, value):
        return _odbpy.dbViaParams_setYOrigin(self, value)

    def setXTopOffset(self, value):
        return _odbpy.dbViaParams_setXTopOffset(self, value)

    def setYTopOffset(self, value):
        return _odbpy.dbViaParams_setYTopOffset(self, value)

    def setXBottomOffset(self, value):
        return _odbpy.dbViaParams_setXBottomOffset(self, value)

    def setYBottomOffset(self, value):
        return _odbpy.dbViaParams_setYBottomOffset(self, value)

    def setTopLayer(self, layer):
        return _odbpy.dbViaParams_setTopLayer(self, layer)

    def setCutLayer(self, layer):
        return _odbpy.dbViaParams_setCutLayer(self, layer)

    def setBottomLayer(self, layer):
        return _odbpy.dbViaParams_setBottomLayer(self, layer)

# Register dbViaParams in _odbpy:
_odbpy.dbViaParams_swigregister(dbViaParams)

class dbTechLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _odbpy.dbTechLayer_NONE
    NWELL = _odbpy.dbTechLayer_NWELL
    PWELL = _odbpy.dbTechLayer_PWELL
    ABOVEDIEEDGE = _odbpy.dbTechLayer_ABOVEDIEEDGE
    BELOWDIEEDGE = _odbpy.dbTechLayer_BELOWDIEEDGE
    DIFFUSION = _odbpy.dbTechLayer_DIFFUSION
    TRIMPOLY = _odbpy.dbTechLayer_TRIMPOLY
    MIMCAP = _odbpy.dbTechLayer_MIMCAP
    STACKEDMIMCAP = _odbpy.dbTechLayer_STACKEDMIMCAP

    def getTechLayerCutClassRules(self):
        return _odbpy.dbTechLayer_getTechLayerCutClassRules(self)

    def findTechLayerCutClassRule(self, name):
        return _odbpy.dbTechLayer_findTechLayerCutClassRule(self, name)

    def getTechLayerSpacingEolRules(self):
        return _odbpy.dbTechLayer_getTechLayerSpacingEolRules(self)

    def getTechLayerCutSpacingRules(self):
        return _odbpy.dbTechLayer_getTechLayerCutSpacingRules(self)

    def getTechLayerMinStepRules(self):
        return _odbpy.dbTechLayer_getTechLayerMinStepRules(self)

    def getTechLayerCornerSpacingRules(self):
        return _odbpy.dbTechLayer_getTechLayerCornerSpacingRules(self)

    def getTechLayerSpacingTablePrlRules(self):
        return _odbpy.dbTechLayer_getTechLayerSpacingTablePrlRules(self)

    def getTechLayerCutSpacingTableOrthRules(self):
        return _odbpy.dbTechLayer_getTechLayerCutSpacingTableOrthRules(self)

    def getTechLayerCutSpacingTableDefRules(self):
        return _odbpy.dbTechLayer_getTechLayerCutSpacingTableDefRules(self)

    def getTechLayerCutEnclosureRules(self):
        return _odbpy.dbTechLayer_getTechLayerCutEnclosureRules(self)

    def getTechLayerEolExtensionRules(self):
        return _odbpy.dbTechLayer_getTechLayerEolExtensionRules(self)

    def getTechLayerEolKeepOutRules(self):
        return _odbpy.dbTechLayer_getTechLayerEolKeepOutRules(self)

    def setRectOnly(self, rect_only):
        return _odbpy.dbTechLayer_setRectOnly(self, rect_only)

    def isRectOnly(self):
        return _odbpy.dbTechLayer_isRectOnly(self)

    def setRightWayOnGridOnly(self, right_way_on_grid_only):
        return _odbpy.dbTechLayer_setRightWayOnGridOnly(self, right_way_on_grid_only)

    def isRightWayOnGridOnly(self):
        return _odbpy.dbTechLayer_isRightWayOnGridOnly(self)

    def setRightWayOnGridOnlyCheckMask(self, right_way_on_grid_only_check_mask):
        return _odbpy.dbTechLayer_setRightWayOnGridOnlyCheckMask(self, right_way_on_grid_only_check_mask)

    def isRightWayOnGridOnlyCheckMask(self):
        return _odbpy.dbTechLayer_isRightWayOnGridOnlyCheckMask(self)

    def setRectOnlyExceptNonCorePins(self, rect_only_except_non_core_pins):
        return _odbpy.dbTechLayer_setRectOnlyExceptNonCorePins(self, rect_only_except_non_core_pins)

    def isRectOnlyExceptNonCorePins(self):
        return _odbpy.dbTechLayer_isRectOnlyExceptNonCorePins(self)

    def findV55Spacing(self, width, prl):
        return _odbpy.dbTechLayer_findV55Spacing(self, width, prl)

    def findTwSpacing(self, width1, width2, prl):
        return _odbpy.dbTechLayer_findTwSpacing(self, width1, width2, prl)

    def setLef58Type(self, type):
        return _odbpy.dbTechLayer_setLef58Type(self, type)

    def getLef58Type(self):
        return _odbpy.dbTechLayer_getLef58Type(self)

    def getName(self):
        return _odbpy.dbTechLayer_getName(self)

    def getConstName(self):
        return _odbpy.dbTechLayer_getConstName(self)

    def hasAlias(self):
        return _odbpy.dbTechLayer_hasAlias(self)

    def getAlias(self):
        return _odbpy.dbTechLayer_getAlias(self)

    def setAlias(self, alias):
        return _odbpy.dbTechLayer_setAlias(self, alias)

    def getWidth(self):
        return _odbpy.dbTechLayer_getWidth(self)

    def setWidth(self, width):
        return _odbpy.dbTechLayer_setWidth(self, width)

    def setSpacing(self, spacing):
        return _odbpy.dbTechLayer_setSpacing(self, spacing)

    def getSpacing(self, *args):
        return _odbpy.dbTechLayer_getSpacing(self, *args)

    def getNumMasks(self):
        return _odbpy.dbTechLayer_getNumMasks(self)

    def setNumMasks(self, number):
        return _odbpy.dbTechLayer_setNumMasks(self, number)

    def getMaxWideDRCRange(self, owidth, olength):
        return _odbpy.dbTechLayer_getMaxWideDRCRange(self, owidth, olength)

    def getMinWideDRCRange(self, owidth, olength):
        return _odbpy.dbTechLayer_getMinWideDRCRange(self, owidth, olength)

    def getV54SpacingRules(self, sp_rules):
        return _odbpy.dbTechLayer_getV54SpacingRules(self, sp_rules)

    def hasV55SpacingRules(self):
        return _odbpy.dbTechLayer_hasV55SpacingRules(self)

    def getV55SpacingWidthsAndLengths(self, width_idx, length_idx):
        return _odbpy.dbTechLayer_getV55SpacingWidthsAndLengths(self, width_idx, length_idx)

    def printV55SpacingRules(self, writer):
        return _odbpy.dbTechLayer_printV55SpacingRules(self, writer)

    def getV55SpacingTable(self, sptbl):
        return _odbpy.dbTechLayer_getV55SpacingTable(self, sptbl)

    def initV55LengthIndex(self, numelems):
        return _odbpy.dbTechLayer_initV55LengthIndex(self, numelems)

    def addV55LengthEntry(self, length):
        return _odbpy.dbTechLayer_addV55LengthEntry(self, length)

    def initV55WidthIndex(self, numelems):
        return _odbpy.dbTechLayer_initV55WidthIndex(self, numelems)

    def addV55WidthEntry(self, width):
        return _odbpy.dbTechLayer_addV55WidthEntry(self, width)

    def initV55SpacingTable(self, numrows, numcols):
        return _odbpy.dbTechLayer_initV55SpacingTable(self, numrows, numcols)

    def addV55SpacingTableEntry(self, inrow, incol, spacing):
        return _odbpy.dbTechLayer_addV55SpacingTableEntry(self, inrow, incol, spacing)

    def getV55InfluenceRules(self, inf_tbl):
        return _odbpy.dbTechLayer_getV55InfluenceRules(self, inf_tbl)

    def getV55InfluenceEntries(self):
        return _odbpy.dbTechLayer_getV55InfluenceEntries(self)

    def hasTwoWidthsSpacingRules(self):
        return _odbpy.dbTechLayer_hasTwoWidthsSpacingRules(self)

    def printTwoWidthsSpacingRules(self, writer):
        return _odbpy.dbTechLayer_printTwoWidthsSpacingRules(self, writer)

    def getTwoWidthsSpacingTable(self, sptbl):
        return _odbpy.dbTechLayer_getTwoWidthsSpacingTable(self, sptbl)

    def getTwoWidthsSpacingTableNumWidths(self):
        return _odbpy.dbTechLayer_getTwoWidthsSpacingTableNumWidths(self)

    def getTwoWidthsSpacingTableWidth(self, row):
        return _odbpy.dbTechLayer_getTwoWidthsSpacingTableWidth(self, row)

    def getTwoWidthsSpacingTableHasPRL(self, row):
        return _odbpy.dbTechLayer_getTwoWidthsSpacingTableHasPRL(self, row)

    def getTwoWidthsSpacingTablePRL(self, row):
        return _odbpy.dbTechLayer_getTwoWidthsSpacingTablePRL(self, row)

    def getTwoWidthsSpacingTableEntry(self, row, col):
        return _odbpy.dbTechLayer_getTwoWidthsSpacingTableEntry(self, row, col)

    def initTwoWidths(self, num_widths):
        return _odbpy.dbTechLayer_initTwoWidths(self, num_widths)

    def addTwoWidthsIndexEntry(self, width, parallel_run_length=-1):
        return _odbpy.dbTechLayer_addTwoWidthsIndexEntry(self, width, parallel_run_length)

    def addTwoWidthsSpacingTableEntry(self, inrow, incol, spacing):
        return _odbpy.dbTechLayer_addTwoWidthsSpacingTableEntry(self, inrow, incol, spacing)

    def createDefaultAntennaRule(self):
        return _odbpy.dbTechLayer_createDefaultAntennaRule(self)

    def createOxide2AntennaRule(self):
        return _odbpy.dbTechLayer_createOxide2AntennaRule(self)

    def hasDefaultAntennaRule(self):
        return _odbpy.dbTechLayer_hasDefaultAntennaRule(self)

    def hasOxide2AntennaRule(self):
        return _odbpy.dbTechLayer_hasOxide2AntennaRule(self)

    def getDefaultAntennaRule(self):
        return _odbpy.dbTechLayer_getDefaultAntennaRule(self)

    def getOxide2AntennaRule(self):
        return _odbpy.dbTechLayer_getOxide2AntennaRule(self)

    def writeAntennaRulesLef(self, writer):
        return _odbpy.dbTechLayer_writeAntennaRulesLef(self, writer)

    def getMinimumCutRules(self, cut_rules):
        return _odbpy.dbTechLayer_getMinimumCutRules(self, cut_rules)

    def getMinEnclosureRules(self, enc_rules):
        return _odbpy.dbTechLayer_getMinEnclosureRules(self, enc_rules)

    def getMinCutRules(self):
        return _odbpy.dbTechLayer_getMinCutRules(self)

    def getMinEncRules(self):
        return _odbpy.dbTechLayer_getMinEncRules(self)

    def getPitch(self):
        return _odbpy.dbTechLayer_getPitch(self)

    def getPitchX(self):
        return _odbpy.dbTechLayer_getPitchX(self)

    def getPitchY(self):
        return _odbpy.dbTechLayer_getPitchY(self)

    def setPitch(self, pitch):
        return _odbpy.dbTechLayer_setPitch(self, pitch)

    def setPitchXY(self, pitch_x, pitch_y):
        return _odbpy.dbTechLayer_setPitchXY(self, pitch_x, pitch_y)

    def hasXYPitch(self):
        return _odbpy.dbTechLayer_hasXYPitch(self)

    def getOffset(self):
        return _odbpy.dbTechLayer_getOffset(self)

    def getOffsetX(self):
        return _odbpy.dbTechLayer_getOffsetX(self)

    def getOffsetY(self):
        return _odbpy.dbTechLayer_getOffsetY(self)

    def setOffset(self, pitch):
        return _odbpy.dbTechLayer_setOffset(self, pitch)

    def setOffsetXY(self, pitch_x, pitch_y):
        return _odbpy.dbTechLayer_setOffsetXY(self, pitch_x, pitch_y)

    def hasXYOffset(self):
        return _odbpy.dbTechLayer_hasXYOffset(self)

    def getThickness(self, inthk):
        return _odbpy.dbTechLayer_getThickness(self, inthk)

    def setThickness(self, thickness):
        return _odbpy.dbTechLayer_setThickness(self, thickness)

    def hasArea(self):
        return _odbpy.dbTechLayer_hasArea(self)

    def getArea(self):
        return _odbpy.dbTechLayer_getArea(self)

    def setArea(self, area):
        return _odbpy.dbTechLayer_setArea(self, area)

    def hasMaxWidth(self):
        return _odbpy.dbTechLayer_hasMaxWidth(self)

    def getMaxWidth(self):
        return _odbpy.dbTechLayer_getMaxWidth(self)

    def setMaxWidth(self, max_width):
        return _odbpy.dbTechLayer_setMaxWidth(self, max_width)

    def getMinWidth(self):
        return _odbpy.dbTechLayer_getMinWidth(self)

    def setMinWidth(self, max_width):
        return _odbpy.dbTechLayer_setMinWidth(self, max_width)

    def hasMinStep(self):
        return _odbpy.dbTechLayer_hasMinStep(self)

    def getMinStep(self):
        return _odbpy.dbTechLayer_getMinStep(self)

    def setMinStep(self, min_step):
        return _odbpy.dbTechLayer_setMinStep(self, min_step)

    def getMinStepType(self):
        return _odbpy.dbTechLayer_getMinStepType(self)

    def setMinStepType(self, type):
        return _odbpy.dbTechLayer_setMinStepType(self, type)

    def hasMinStepMaxLength(self):
        return _odbpy.dbTechLayer_hasMinStepMaxLength(self)

    def getMinStepMaxLength(self):
        return _odbpy.dbTechLayer_getMinStepMaxLength(self)

    def setMinStepMaxLength(self, length):
        return _odbpy.dbTechLayer_setMinStepMaxLength(self, length)

    def hasMinStepMaxEdges(self):
        return _odbpy.dbTechLayer_hasMinStepMaxEdges(self)

    def getMinStepMaxEdges(self):
        return _odbpy.dbTechLayer_getMinStepMaxEdges(self)

    def setMinStepMaxEdges(self, edges):
        return _odbpy.dbTechLayer_setMinStepMaxEdges(self, edges)

    def hasProtrusion(self):
        return _odbpy.dbTechLayer_hasProtrusion(self)

    def getProtrusionWidth(self):
        return _odbpy.dbTechLayer_getProtrusionWidth(self)

    def getProtrusionLength(self):
        return _odbpy.dbTechLayer_getProtrusionLength(self)

    def getProtrusionFromWidth(self):
        return _odbpy.dbTechLayer_getProtrusionFromWidth(self)

    def setProtrusion(self, pt_width, pt_length, pt_from_width):
        return _odbpy.dbTechLayer_setProtrusion(self, pt_width, pt_length, pt_from_width)

    def getType(self):
        return _odbpy.dbTechLayer_getType(self)

    def getDirection(self):
        return _odbpy.dbTechLayer_getDirection(self)

    def setDirection(self, direction):
        return _odbpy.dbTechLayer_setDirection(self, direction)

    def getResistance(self):
        return _odbpy.dbTechLayer_getResistance(self)

    def setResistance(self, res):
        return _odbpy.dbTechLayer_setResistance(self, res)

    def getCapacitance(self):
        return _odbpy.dbTechLayer_getCapacitance(self)

    def setCapacitance(self, cap):
        return _odbpy.dbTechLayer_setCapacitance(self, cap)

    def getEdgeCapacitance(self):
        return _odbpy.dbTechLayer_getEdgeCapacitance(self)

    def setEdgeCapacitance(self, cap):
        return _odbpy.dbTechLayer_setEdgeCapacitance(self, cap)

    def getWireExtension(self):
        return _odbpy.dbTechLayer_getWireExtension(self)

    def setWireExtension(self, ext):
        return _odbpy.dbTechLayer_setWireExtension(self, ext)

    def getNumber(self):
        return _odbpy.dbTechLayer_getNumber(self)

    def getRoutingLevel(self):
        return _odbpy.dbTechLayer_getRoutingLevel(self)

    def getLowerLayer(self):
        return _odbpy.dbTechLayer_getLowerLayer(self)

    def getUpperLayer(self):
        return _odbpy.dbTechLayer_getUpperLayer(self)

    def getTech(self):
        return _odbpy.dbTechLayer_getTech(self)

    @staticmethod
    def create(tech, name, type):
        return _odbpy.dbTechLayer_create(tech, name, type)

    @staticmethod
    def getTechLayer(tech, oid):
        return _odbpy.dbTechLayer_getTechLayer(tech, oid)

    def __init__(self):
        _odbpy.dbTechLayer_swiginit(self, _odbpy.new_dbTechLayer())
    __swig_destroy__ = _odbpy.delete_dbTechLayer

# Register dbTechLayer in _odbpy:
_odbpy.dbTechLayer_swigregister(dbTechLayer)

def dbTechLayer_create(tech, name, type):
    return _odbpy.dbTechLayer_create(tech, name, type)

def dbTechLayer_getTechLayer(tech, oid):
    return _odbpy.dbTechLayer_getTechLayer(tech, oid)

class dbTechLayerSpacingEolRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setEolSpace(self, eol_space):
        return _odbpy.dbTechLayerSpacingEolRule_setEolSpace(self, eol_space)

    def getEolSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEolSpace(self)

    def setEolWidth(self, eol_width):
        return _odbpy.dbTechLayerSpacingEolRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEolWidth(self)

    def setWrongDirSpace(self, wrong_dir_space):
        return _odbpy.dbTechLayerSpacingEolRule_setWrongDirSpace(self, wrong_dir_space)

    def getWrongDirSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getWrongDirSpace(self)

    def setOppositeWidth(self, opposite_width):
        return _odbpy.dbTechLayerSpacingEolRule_setOppositeWidth(self, opposite_width)

    def getOppositeWidth(self):
        return _odbpy.dbTechLayerSpacingEolRule_getOppositeWidth(self)

    def setEolWithin(self, eol_within):
        return _odbpy.dbTechLayerSpacingEolRule_setEolWithin(self, eol_within)

    def getEolWithin(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEolWithin(self)

    def setWrongDirWithin(self, wrong_dir_within):
        return _odbpy.dbTechLayerSpacingEolRule_setWrongDirWithin(self, wrong_dir_within)

    def getWrongDirWithin(self):
        return _odbpy.dbTechLayerSpacingEolRule_getWrongDirWithin(self)

    def setExactWidth(self, exact_width):
        return _odbpy.dbTechLayerSpacingEolRule_setExactWidth(self, exact_width)

    def getExactWidth(self):
        return _odbpy.dbTechLayerSpacingEolRule_getExactWidth(self)

    def setOtherWidth(self, other_width):
        return _odbpy.dbTechLayerSpacingEolRule_setOtherWidth(self, other_width)

    def getOtherWidth(self):
        return _odbpy.dbTechLayerSpacingEolRule_getOtherWidth(self)

    def setFillTriangle(self, fill_triangle):
        return _odbpy.dbTechLayerSpacingEolRule_setFillTriangle(self, fill_triangle)

    def getFillTriangle(self):
        return _odbpy.dbTechLayerSpacingEolRule_getFillTriangle(self)

    def setCutClass(self, cut_class):
        return _odbpy.dbTechLayerSpacingEolRule_setCutClass(self, cut_class)

    def getCutClass(self):
        return _odbpy.dbTechLayerSpacingEolRule_getCutClass(self)

    def setWithCutSpace(self, with_cut_space):
        return _odbpy.dbTechLayerSpacingEolRule_setWithCutSpace(self, with_cut_space)

    def getWithCutSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getWithCutSpace(self)

    def setEnclosureEndWidth(self, enclosure_end_width):
        return _odbpy.dbTechLayerSpacingEolRule_setEnclosureEndWidth(self, enclosure_end_width)

    def getEnclosureEndWidth(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEnclosureEndWidth(self)

    def setEnclosureEndWithin(self, enclosure_end_within):
        return _odbpy.dbTechLayerSpacingEolRule_setEnclosureEndWithin(self, enclosure_end_within)

    def getEnclosureEndWithin(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEnclosureEndWithin(self)

    def setEndPrlSpace(self, end_prl_space):
        return _odbpy.dbTechLayerSpacingEolRule_setEndPrlSpace(self, end_prl_space)

    def getEndPrlSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEndPrlSpace(self)

    def setEndPrl(self, end_prl):
        return _odbpy.dbTechLayerSpacingEolRule_setEndPrl(self, end_prl)

    def getEndPrl(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEndPrl(self)

    def setEndToEndSpace(self, end_to_end_space):
        return _odbpy.dbTechLayerSpacingEolRule_setEndToEndSpace(self, end_to_end_space)

    def getEndToEndSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEndToEndSpace(self)

    def setOneCutSpace(self, one_cut_space):
        return _odbpy.dbTechLayerSpacingEolRule_setOneCutSpace(self, one_cut_space)

    def getOneCutSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getOneCutSpace(self)

    def setTwoCutSpace(self, two_cut_space):
        return _odbpy.dbTechLayerSpacingEolRule_setTwoCutSpace(self, two_cut_space)

    def getTwoCutSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getTwoCutSpace(self)

    def setExtension(self, extension):
        return _odbpy.dbTechLayerSpacingEolRule_setExtension(self, extension)

    def getExtension(self):
        return _odbpy.dbTechLayerSpacingEolRule_getExtension(self)

    def setWrongDirExtension(self, wrong_dir_extension):
        return _odbpy.dbTechLayerSpacingEolRule_setWrongDirExtension(self, wrong_dir_extension)

    def getWrongDirExtension(self):
        return _odbpy.dbTechLayerSpacingEolRule_getWrongDirExtension(self)

    def setOtherEndWidth(self, other_end_width):
        return _odbpy.dbTechLayerSpacingEolRule_setOtherEndWidth(self, other_end_width)

    def getOtherEndWidth(self):
        return _odbpy.dbTechLayerSpacingEolRule_getOtherEndWidth(self)

    def setMaxLength(self, max_length):
        return _odbpy.dbTechLayerSpacingEolRule_setMaxLength(self, max_length)

    def getMaxLength(self):
        return _odbpy.dbTechLayerSpacingEolRule_getMaxLength(self)

    def setMinLength(self, min_length):
        return _odbpy.dbTechLayerSpacingEolRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odbpy.dbTechLayerSpacingEolRule_getMinLength(self)

    def setParSpace(self, par_space):
        return _odbpy.dbTechLayerSpacingEolRule_setParSpace(self, par_space)

    def getParSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getParSpace(self)

    def setParWithin(self, par_within):
        return _odbpy.dbTechLayerSpacingEolRule_setParWithin(self, par_within)

    def getParWithin(self):
        return _odbpy.dbTechLayerSpacingEolRule_getParWithin(self)

    def setParPrl(self, par_prl):
        return _odbpy.dbTechLayerSpacingEolRule_setParPrl(self, par_prl)

    def getParPrl(self):
        return _odbpy.dbTechLayerSpacingEolRule_getParPrl(self)

    def setParMinLength(self, par_min_length):
        return _odbpy.dbTechLayerSpacingEolRule_setParMinLength(self, par_min_length)

    def getParMinLength(self):
        return _odbpy.dbTechLayerSpacingEolRule_getParMinLength(self)

    def setEncloseDist(self, enclose_dist):
        return _odbpy.dbTechLayerSpacingEolRule_setEncloseDist(self, enclose_dist)

    def getEncloseDist(self):
        return _odbpy.dbTechLayerSpacingEolRule_getEncloseDist(self)

    def setCutToMetalSpace(self, cut_to_metal_space):
        return _odbpy.dbTechLayerSpacingEolRule_setCutToMetalSpace(self, cut_to_metal_space)

    def getCutToMetalSpace(self):
        return _odbpy.dbTechLayerSpacingEolRule_getCutToMetalSpace(self)

    def setMinAdjLength(self, min_adj_length):
        return _odbpy.dbTechLayerSpacingEolRule_setMinAdjLength(self, min_adj_length)

    def getMinAdjLength(self):
        return _odbpy.dbTechLayerSpacingEolRule_getMinAdjLength(self)

    def setMinAdjLength1(self, min_adj_length1):
        return _odbpy.dbTechLayerSpacingEolRule_setMinAdjLength1(self, min_adj_length1)

    def getMinAdjLength1(self):
        return _odbpy.dbTechLayerSpacingEolRule_getMinAdjLength1(self)

    def setMinAdjLength2(self, min_adj_length2):
        return _odbpy.dbTechLayerSpacingEolRule_setMinAdjLength2(self, min_adj_length2)

    def getMinAdjLength2(self):
        return _odbpy.dbTechLayerSpacingEolRule_getMinAdjLength2(self)

    def setNotchLength(self, notch_length):
        return _odbpy.dbTechLayerSpacingEolRule_setNotchLength(self, notch_length)

    def getNotchLength(self):
        return _odbpy.dbTechLayerSpacingEolRule_getNotchLength(self)

    def setExactWidthValid(self, exact_width_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setExactWidthValid(self, exact_width_valid)

    def isExactWidthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isExactWidthValid(self)

    def setWrongDirSpacingValid(self, wrong_dir_spacing_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setWrongDirSpacingValid(self, wrong_dir_spacing_valid)

    def isWrongDirSpacingValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isWrongDirSpacingValid(self)

    def setOppositeWidthValid(self, opposite_width_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setOppositeWidthValid(self, opposite_width_valid)

    def isOppositeWidthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isOppositeWidthValid(self)

    def setWithinValid(self, within_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setWithinValid(self, within_valid)

    def isWithinValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isWithinValid(self)

    def setWrongDirWithinValid(self, wrong_dir_within_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setWrongDirWithinValid(self, wrong_dir_within_valid)

    def isWrongDirWithinValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isWrongDirWithinValid(self)

    def setSameMaskValid(self, same_mask_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setSameMaskValid(self, same_mask_valid)

    def isSameMaskValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isSameMaskValid(self)

    def setExceptExactWidthValid(self, except_exact_width_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setExceptExactWidthValid(self, except_exact_width_valid)

    def isExceptExactWidthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isExceptExactWidthValid(self)

    def setFillConcaveCornerValid(self, fill_concave_corner_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setFillConcaveCornerValid(self, fill_concave_corner_valid)

    def isFillConcaveCornerValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isFillConcaveCornerValid(self)

    def setWithcutValid(self, withcut_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setWithcutValid(self, withcut_valid)

    def isWithcutValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isWithcutValid(self)

    def setCutClassValid(self, cut_class_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setCutClassValid(self, cut_class_valid)

    def isCutClassValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isCutClassValid(self)

    def setWithCutAboveValid(self, with_cut_above_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setWithCutAboveValid(self, with_cut_above_valid)

    def isWithCutAboveValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isWithCutAboveValid(self)

    def setEnclosureEndValid(self, enclosure_end_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setEnclosureEndValid(self, enclosure_end_valid)

    def isEnclosureEndValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isEnclosureEndValid(self)

    def setEnclosureEndWithinValid(self, enclosure_end_within_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setEnclosureEndWithinValid(self, enclosure_end_within_valid)

    def isEnclosureEndWithinValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isEnclosureEndWithinValid(self)

    def setEndPrlSpacingValid(self, end_prl_spacing_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setEndPrlSpacingValid(self, end_prl_spacing_valid)

    def isEndPrlSpacingValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isEndPrlSpacingValid(self)

    def setPrlValid(self, prl_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setPrlValid(self, prl_valid)

    def isPrlValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isPrlValid(self)

    def setEndToEndValid(self, end_to_end_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setEndToEndValid(self, end_to_end_valid)

    def isEndToEndValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isEndToEndValid(self)

    def setCutSpacesValid(self, cut_spaces_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setCutSpacesValid(self, cut_spaces_valid)

    def isCutSpacesValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isCutSpacesValid(self)

    def setExtensionValid(self, extension_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setExtensionValid(self, extension_valid)

    def isExtensionValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isExtensionValid(self)

    def setWrongDirExtensionValid(self, wrong_dir_extension_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setWrongDirExtensionValid(self, wrong_dir_extension_valid)

    def isWrongDirExtensionValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isWrongDirExtensionValid(self)

    def setOtherEndWidthValid(self, other_end_width_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setOtherEndWidthValid(self, other_end_width_valid)

    def isOtherEndWidthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isOtherEndWidthValid(self)

    def setMaxLengthValid(self, max_length_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setMaxLengthValid(self, max_length_valid)

    def isMaxLengthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isMaxLengthValid(self)

    def setMinLengthValid(self, min_length_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setMinLengthValid(self, min_length_valid)

    def isMinLengthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isMinLengthValid(self)

    def setTwoSidesValid(self, two_sides_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setTwoSidesValid(self, two_sides_valid)

    def isTwoSidesValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isTwoSidesValid(self)

    def setEqualRectWidthValid(self, equal_rect_width_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setEqualRectWidthValid(self, equal_rect_width_valid)

    def isEqualRectWidthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isEqualRectWidthValid(self)

    def setParallelEdgeValid(self, parallel_edge_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setParallelEdgeValid(self, parallel_edge_valid)

    def isParallelEdgeValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isParallelEdgeValid(self)

    def setSubtractEolWidthValid(self, subtract_eol_width_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setSubtractEolWidthValid(self, subtract_eol_width_valid)

    def isSubtractEolWidthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isSubtractEolWidthValid(self)

    def setParPrlValid(self, par_prl_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setParPrlValid(self, par_prl_valid)

    def isParPrlValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isParPrlValid(self)

    def setParMinLengthValid(self, par_min_length_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setParMinLengthValid(self, par_min_length_valid)

    def isParMinLengthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isParMinLengthValid(self)

    def setTwoEdgesValid(self, two_edges_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setTwoEdgesValid(self, two_edges_valid)

    def isTwoEdgesValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isTwoEdgesValid(self)

    def setSameMetalValid(self, same_metal_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setSameMetalValid(self, same_metal_valid)

    def isSameMetalValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isSameMetalValid(self)

    def setNonEolCornerOnlyValid(self, non_eol_corner_only_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setNonEolCornerOnlyValid(self, non_eol_corner_only_valid)

    def isNonEolCornerOnlyValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isNonEolCornerOnlyValid(self)

    def setParallelSameMaskValid(self, parallel_same_mask_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setParallelSameMaskValid(self, parallel_same_mask_valid)

    def isParallelSameMaskValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isParallelSameMaskValid(self)

    def setEncloseCutValid(self, enclose_cut_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setEncloseCutValid(self, enclose_cut_valid)

    def isEncloseCutValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isEncloseCutValid(self)

    def setBelowValid(self, below_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setBelowValid(self, below_valid)

    def isBelowValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isBelowValid(self)

    def setAboveValid(self, above_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setAboveValid(self, above_valid)

    def isAboveValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isAboveValid(self)

    def setCutSpacingValid(self, cut_spacing_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setCutSpacingValid(self, cut_spacing_valid)

    def isCutSpacingValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isCutSpacingValid(self)

    def setAllCutsValid(self, all_cuts_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setAllCutsValid(self, all_cuts_valid)

    def isAllCutsValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isAllCutsValid(self)

    def setToConcaveCornerValid(self, to_concave_corner_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setToConcaveCornerValid(self, to_concave_corner_valid)

    def isToConcaveCornerValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isToConcaveCornerValid(self)

    def setMinAdjacentLengthValid(self, min_adjacent_length_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setMinAdjacentLengthValid(self, min_adjacent_length_valid)

    def isMinAdjacentLengthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isMinAdjacentLengthValid(self)

    def setTwoMinAdjLengthValid(self, two_min_adj_length_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setTwoMinAdjLengthValid(self, two_min_adj_length_valid)

    def isTwoMinAdjLengthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isTwoMinAdjLengthValid(self)

    def setToNotchLengthValid(self, to_notch_length_valid):
        return _odbpy.dbTechLayerSpacingEolRule_setToNotchLengthValid(self, to_notch_length_valid)

    def isToNotchLengthValid(self):
        return _odbpy.dbTechLayerSpacingEolRule_isToNotchLengthValid(self)

    @staticmethod
    def create(layer):
        return _odbpy.dbTechLayerSpacingEolRule_create(layer)

    @staticmethod
    def getTechLayerSpacingEolRule(inly, dbid):
        return _odbpy.dbTechLayerSpacingEolRule_getTechLayerSpacingEolRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerSpacingEolRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerSpacingEolRule_swiginit(self, _odbpy.new_dbTechLayerSpacingEolRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerSpacingEolRule

# Register dbTechLayerSpacingEolRule in _odbpy:
_odbpy.dbTechLayerSpacingEolRule_swigregister(dbTechLayerSpacingEolRule)

def dbTechLayerSpacingEolRule_create(layer):
    return _odbpy.dbTechLayerSpacingEolRule_create(layer)

def dbTechLayerSpacingEolRule_getTechLayerSpacingEolRule(inly, dbid):
    return _odbpy.dbTechLayerSpacingEolRule_getTechLayerSpacingEolRule(inly, dbid)

def dbTechLayerSpacingEolRule_destroy(rule):
    return _odbpy.dbTechLayerSpacingEolRule_destroy(rule)

class dbTechLayerMinStepRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMinStepLength(self, min_step_length):
        return _odbpy.dbTechLayerMinStepRule_setMinStepLength(self, min_step_length)

    def getMinStepLength(self):
        return _odbpy.dbTechLayerMinStepRule_getMinStepLength(self)

    def setMaxEdges(self, max_edges):
        return _odbpy.dbTechLayerMinStepRule_setMaxEdges(self, max_edges)

    def getMaxEdges(self):
        return _odbpy.dbTechLayerMinStepRule_getMaxEdges(self)

    def setMinAdjLength1(self, min_adj_length1):
        return _odbpy.dbTechLayerMinStepRule_setMinAdjLength1(self, min_adj_length1)

    def getMinAdjLength1(self):
        return _odbpy.dbTechLayerMinStepRule_getMinAdjLength1(self)

    def setMinAdjLength2(self, min_adj_length2):
        return _odbpy.dbTechLayerMinStepRule_setMinAdjLength2(self, min_adj_length2)

    def getMinAdjLength2(self):
        return _odbpy.dbTechLayerMinStepRule_getMinAdjLength2(self)

    def setEolWidth(self, eol_width):
        return _odbpy.dbTechLayerMinStepRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odbpy.dbTechLayerMinStepRule_getEolWidth(self)

    def setMinBetweenLength(self, min_between_length):
        return _odbpy.dbTechLayerMinStepRule_setMinBetweenLength(self, min_between_length)

    def getMinBetweenLength(self):
        return _odbpy.dbTechLayerMinStepRule_getMinBetweenLength(self)

    def setMaxEdgesValid(self, max_edges_valid):
        return _odbpy.dbTechLayerMinStepRule_setMaxEdgesValid(self, max_edges_valid)

    def isMaxEdgesValid(self):
        return _odbpy.dbTechLayerMinStepRule_isMaxEdgesValid(self)

    def setMinAdjLength1Valid(self, min_adj_length1_valid):
        return _odbpy.dbTechLayerMinStepRule_setMinAdjLength1Valid(self, min_adj_length1_valid)

    def isMinAdjLength1Valid(self):
        return _odbpy.dbTechLayerMinStepRule_isMinAdjLength1Valid(self)

    def setNoBetweenEol(self, no_between_eol):
        return _odbpy.dbTechLayerMinStepRule_setNoBetweenEol(self, no_between_eol)

    def isNoBetweenEol(self):
        return _odbpy.dbTechLayerMinStepRule_isNoBetweenEol(self)

    def setMinAdjLength2Valid(self, min_adj_length2_valid):
        return _odbpy.dbTechLayerMinStepRule_setMinAdjLength2Valid(self, min_adj_length2_valid)

    def isMinAdjLength2Valid(self):
        return _odbpy.dbTechLayerMinStepRule_isMinAdjLength2Valid(self)

    def setConvexCorner(self, convex_corner):
        return _odbpy.dbTechLayerMinStepRule_setConvexCorner(self, convex_corner)

    def isConvexCorner(self):
        return _odbpy.dbTechLayerMinStepRule_isConvexCorner(self)

    def setMinBetweenLengthValid(self, min_between_length_valid):
        return _odbpy.dbTechLayerMinStepRule_setMinBetweenLengthValid(self, min_between_length_valid)

    def isMinBetweenLengthValid(self):
        return _odbpy.dbTechLayerMinStepRule_isMinBetweenLengthValid(self)

    def setExceptSameCorners(self, except_same_corners):
        return _odbpy.dbTechLayerMinStepRule_setExceptSameCorners(self, except_same_corners)

    def isExceptSameCorners(self):
        return _odbpy.dbTechLayerMinStepRule_isExceptSameCorners(self)

    @staticmethod
    def create(layer):
        return _odbpy.dbTechLayerMinStepRule_create(layer)

    @staticmethod
    def getTechLayerMinStepRule(inly, dbid):
        return _odbpy.dbTechLayerMinStepRule_getTechLayerMinStepRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerMinStepRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerMinStepRule_swiginit(self, _odbpy.new_dbTechLayerMinStepRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerMinStepRule

# Register dbTechLayerMinStepRule in _odbpy:
_odbpy.dbTechLayerMinStepRule_swigregister(dbTechLayerMinStepRule)

def dbTechLayerMinStepRule_create(layer):
    return _odbpy.dbTechLayerMinStepRule_create(layer)

def dbTechLayerMinStepRule_getTechLayerMinStepRule(inly, dbid):
    return _odbpy.dbTechLayerMinStepRule_getTechLayerMinStepRule(inly, dbid)

def dbTechLayerMinStepRule_destroy(rule):
    return _odbpy.dbTechLayerMinStepRule_destroy(rule)

class dbTechLayerCornerSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CONVEXCORNER = _odbpy.dbTechLayerCornerSpacingRule_CONVEXCORNER
    CONCAVECORNER = _odbpy.dbTechLayerCornerSpacingRule_CONCAVECORNER

    def setWithin(self, within):
        return _odbpy.dbTechLayerCornerSpacingRule_setWithin(self, within)

    def getWithin(self):
        return _odbpy.dbTechLayerCornerSpacingRule_getWithin(self)

    def setEolWidth(self, eol_width):
        return _odbpy.dbTechLayerCornerSpacingRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odbpy.dbTechLayerCornerSpacingRule_getEolWidth(self)

    def setJogLength(self, jog_length):
        return _odbpy.dbTechLayerCornerSpacingRule_setJogLength(self, jog_length)

    def getJogLength(self):
        return _odbpy.dbTechLayerCornerSpacingRule_getJogLength(self)

    def setEdgeLength(self, edge_length):
        return _odbpy.dbTechLayerCornerSpacingRule_setEdgeLength(self, edge_length)

    def getEdgeLength(self):
        return _odbpy.dbTechLayerCornerSpacingRule_getEdgeLength(self)

    def setMinLength(self, min_length):
        return _odbpy.dbTechLayerCornerSpacingRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odbpy.dbTechLayerCornerSpacingRule_getMinLength(self)

    def setExceptNotchLength(self, except_notch_length):
        return _odbpy.dbTechLayerCornerSpacingRule_setExceptNotchLength(self, except_notch_length)

    def getExceptNotchLength(self):
        return _odbpy.dbTechLayerCornerSpacingRule_getExceptNotchLength(self)

    def setSameMask(self, same_mask):
        return _odbpy.dbTechLayerCornerSpacingRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isSameMask(self)

    def setCornerOnly(self, corner_only):
        return _odbpy.dbTechLayerCornerSpacingRule_setCornerOnly(self, corner_only)

    def isCornerOnly(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isCornerOnly(self)

    def setExceptEol(self, except_eol):
        return _odbpy.dbTechLayerCornerSpacingRule_setExceptEol(self, except_eol)

    def isExceptEol(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isExceptEol(self)

    def setExceptJogLength(self, except_jog_length):
        return _odbpy.dbTechLayerCornerSpacingRule_setExceptJogLength(self, except_jog_length)

    def isExceptJogLength(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isExceptJogLength(self)

    def setEdgeLengthValid(self, edge_length_valid):
        return _odbpy.dbTechLayerCornerSpacingRule_setEdgeLengthValid(self, edge_length_valid)

    def isEdgeLengthValid(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isEdgeLengthValid(self)

    def setIncludeShape(self, include_shape):
        return _odbpy.dbTechLayerCornerSpacingRule_setIncludeShape(self, include_shape)

    def isIncludeShape(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isIncludeShape(self)

    def setMinLengthValid(self, min_length_valid):
        return _odbpy.dbTechLayerCornerSpacingRule_setMinLengthValid(self, min_length_valid)

    def isMinLengthValid(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isMinLengthValid(self)

    def setExceptNotch(self, except_notch):
        return _odbpy.dbTechLayerCornerSpacingRule_setExceptNotch(self, except_notch)

    def isExceptNotch(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isExceptNotch(self)

    def setExceptNotchLengthValid(self, except_notch_length_valid):
        return _odbpy.dbTechLayerCornerSpacingRule_setExceptNotchLengthValid(self, except_notch_length_valid)

    def isExceptNotchLengthValid(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isExceptNotchLengthValid(self)

    def setExceptSameNet(self, except_same_net):
        return _odbpy.dbTechLayerCornerSpacingRule_setExceptSameNet(self, except_same_net)

    def isExceptSameNet(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isExceptSameNet(self)

    def setExceptSameMetal(self, except_same_metal):
        return _odbpy.dbTechLayerCornerSpacingRule_setExceptSameMetal(self, except_same_metal)

    def isExceptSameMetal(self):
        return _odbpy.dbTechLayerCornerSpacingRule_isExceptSameMetal(self)

    def setType(self, _type):
        return _odbpy.dbTechLayerCornerSpacingRule_setType(self, _type)

    def getType(self):
        return _odbpy.dbTechLayerCornerSpacingRule_getType(self)

    def addSpacing(self, width, spacing1, spacing2=0):
        return _odbpy.dbTechLayerCornerSpacingRule_addSpacing(self, width, spacing1, spacing2)

    def getSpacingTable(self, tbl):
        return _odbpy.dbTechLayerCornerSpacingRule_getSpacingTable(self, tbl)

    def getWidthTable(self, tbl):
        return _odbpy.dbTechLayerCornerSpacingRule_getWidthTable(self, tbl)

    @staticmethod
    def create(layer):
        return _odbpy.dbTechLayerCornerSpacingRule_create(layer)

    @staticmethod
    def getTechLayerCornerSpacingRule(inly, dbid):
        return _odbpy.dbTechLayerCornerSpacingRule_getTechLayerCornerSpacingRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerCornerSpacingRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerCornerSpacingRule_swiginit(self, _odbpy.new_dbTechLayerCornerSpacingRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerCornerSpacingRule

# Register dbTechLayerCornerSpacingRule in _odbpy:
_odbpy.dbTechLayerCornerSpacingRule_swigregister(dbTechLayerCornerSpacingRule)

def dbTechLayerCornerSpacingRule_create(layer):
    return _odbpy.dbTechLayerCornerSpacingRule_create(layer)

def dbTechLayerCornerSpacingRule_getTechLayerCornerSpacingRule(inly, dbid):
    return _odbpy.dbTechLayerCornerSpacingRule_getTechLayerCornerSpacingRule(inly, dbid)

def dbTechLayerCornerSpacingRule_destroy(rule):
    return _odbpy.dbTechLayerCornerSpacingRule_destroy(rule)

class dbTechLayerSpacingTablePrlRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setEolWidth(self, eol_width):
        return _odbpy.dbTechLayerSpacingTablePrlRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odbpy.dbTechLayerSpacingTablePrlRule_getEolWidth(self)

    def setWrongDirection(self, wrong_direction):
        return _odbpy.dbTechLayerSpacingTablePrlRule_setWrongDirection(self, wrong_direction)

    def isWrongDirection(self):
        return _odbpy.dbTechLayerSpacingTablePrlRule_isWrongDirection(self)

    def setSameMask(self, same_mask):
        return _odbpy.dbTechLayerSpacingTablePrlRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odbpy.dbTechLayerSpacingTablePrlRule_isSameMask(self)

    def setExceeptEol(self, exceept_eol):
        return _odbpy.dbTechLayerSpacingTablePrlRule_setExceeptEol(self, exceept_eol)

    def isExceeptEol(self):
        return _odbpy.dbTechLayerSpacingTablePrlRule_isExceeptEol(self)

    @staticmethod
    def getTechLayerSpacingTablePrlRule(inly, dbid):
        return _odbpy.dbTechLayerSpacingTablePrlRule_getTechLayerSpacingTablePrlRule(inly, dbid)

    @staticmethod
    def create(_layer):
        return _odbpy.dbTechLayerSpacingTablePrlRule_create(_layer)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerSpacingTablePrlRule_destroy(rule)

    def setTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map):
        return _odbpy.dbTechLayerSpacingTablePrlRule_setTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map)

    def getTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map):
        return _odbpy.dbTechLayerSpacingTablePrlRule_getTable(self, width_tbl, length_tbl, spacing_tbl, excluded_map)

    def setSpacingTableInfluence(self, influence_tbl):
        return _odbpy.dbTechLayerSpacingTablePrlRule_setSpacingTableInfluence(self, influence_tbl)

    def getSpacing(self, width, length):
        return _odbpy.dbTechLayerSpacingTablePrlRule_getSpacing(self, width, length)

    def hasExceptWithin(self, width):
        return _odbpy.dbTechLayerSpacingTablePrlRule_hasExceptWithin(self, width)

    def getExceptWithin(self, width):
        return _odbpy.dbTechLayerSpacingTablePrlRule_getExceptWithin(self, width)

    def __init__(self):
        _odbpy.dbTechLayerSpacingTablePrlRule_swiginit(self, _odbpy.new_dbTechLayerSpacingTablePrlRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerSpacingTablePrlRule

# Register dbTechLayerSpacingTablePrlRule in _odbpy:
_odbpy.dbTechLayerSpacingTablePrlRule_swigregister(dbTechLayerSpacingTablePrlRule)

def dbTechLayerSpacingTablePrlRule_getTechLayerSpacingTablePrlRule(inly, dbid):
    return _odbpy.dbTechLayerSpacingTablePrlRule_getTechLayerSpacingTablePrlRule(inly, dbid)

def dbTechLayerSpacingTablePrlRule_create(_layer):
    return _odbpy.dbTechLayerSpacingTablePrlRule_create(_layer)

def dbTechLayerSpacingTablePrlRule_destroy(rule):
    return _odbpy.dbTechLayerSpacingTablePrlRule_destroy(rule)

class dbTechLayerEolKeepOutRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setEolWidth(self, eol_width):
        return _odbpy.dbTechLayerEolKeepOutRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odbpy.dbTechLayerEolKeepOutRule_getEolWidth(self)

    def setBackwardExt(self, backward_ext):
        return _odbpy.dbTechLayerEolKeepOutRule_setBackwardExt(self, backward_ext)

    def getBackwardExt(self):
        return _odbpy.dbTechLayerEolKeepOutRule_getBackwardExt(self)

    def setForwardExt(self, forward_ext):
        return _odbpy.dbTechLayerEolKeepOutRule_setForwardExt(self, forward_ext)

    def getForwardExt(self):
        return _odbpy.dbTechLayerEolKeepOutRule_getForwardExt(self)

    def setSideExt(self, side_ext):
        return _odbpy.dbTechLayerEolKeepOutRule_setSideExt(self, side_ext)

    def getSideExt(self):
        return _odbpy.dbTechLayerEolKeepOutRule_getSideExt(self)

    def setWithinLow(self, within_low):
        return _odbpy.dbTechLayerEolKeepOutRule_setWithinLow(self, within_low)

    def getWithinLow(self):
        return _odbpy.dbTechLayerEolKeepOutRule_getWithinLow(self)

    def setWithinHigh(self, within_high):
        return _odbpy.dbTechLayerEolKeepOutRule_setWithinHigh(self, within_high)

    def getWithinHigh(self):
        return _odbpy.dbTechLayerEolKeepOutRule_getWithinHigh(self)

    def setClassName(self, class_name):
        return _odbpy.dbTechLayerEolKeepOutRule_setClassName(self, class_name)

    def getClassName(self):
        return _odbpy.dbTechLayerEolKeepOutRule_getClassName(self)

    def setClassValid(self, class_valid):
        return _odbpy.dbTechLayerEolKeepOutRule_setClassValid(self, class_valid)

    def isClassValid(self):
        return _odbpy.dbTechLayerEolKeepOutRule_isClassValid(self)

    def setCornerOnly(self, corner_only):
        return _odbpy.dbTechLayerEolKeepOutRule_setCornerOnly(self, corner_only)

    def isCornerOnly(self):
        return _odbpy.dbTechLayerEolKeepOutRule_isCornerOnly(self)

    def setExceptWithin(self, except_within):
        return _odbpy.dbTechLayerEolKeepOutRule_setExceptWithin(self, except_within)

    def isExceptWithin(self):
        return _odbpy.dbTechLayerEolKeepOutRule_isExceptWithin(self)

    @staticmethod
    def create(layer):
        return _odbpy.dbTechLayerEolKeepOutRule_create(layer)

    @staticmethod
    def getTechLayerEolKeepOutRule(inly, dbid):
        return _odbpy.dbTechLayerEolKeepOutRule_getTechLayerEolKeepOutRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerEolKeepOutRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerEolKeepOutRule_swiginit(self, _odbpy.new_dbTechLayerEolKeepOutRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerEolKeepOutRule

# Register dbTechLayerEolKeepOutRule in _odbpy:
_odbpy.dbTechLayerEolKeepOutRule_swigregister(dbTechLayerEolKeepOutRule)

def dbTechLayerEolKeepOutRule_create(layer):
    return _odbpy.dbTechLayerEolKeepOutRule_create(layer)

def dbTechLayerEolKeepOutRule_getTechLayerEolKeepOutRule(inly, dbid):
    return _odbpy.dbTechLayerEolKeepOutRule_getTechLayerEolKeepOutRule(inly, dbid)

def dbTechLayerEolKeepOutRule_destroy(rule):
    return _odbpy.dbTechLayerEolKeepOutRule_destroy(rule)

class dbTechLayerCutClassRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbTechLayerCutClassRule_getName(self)

    def setWidth(self, width):
        return _odbpy.dbTechLayerCutClassRule_setWidth(self, width)

    def getWidth(self):
        return _odbpy.dbTechLayerCutClassRule_getWidth(self)

    def setLength(self, length):
        return _odbpy.dbTechLayerCutClassRule_setLength(self, length)

    def getLength(self):
        return _odbpy.dbTechLayerCutClassRule_getLength(self)

    def setNumCuts(self, num_cuts):
        return _odbpy.dbTechLayerCutClassRule_setNumCuts(self, num_cuts)

    def getNumCuts(self):
        return _odbpy.dbTechLayerCutClassRule_getNumCuts(self)

    def setLengthValid(self, length_valid):
        return _odbpy.dbTechLayerCutClassRule_setLengthValid(self, length_valid)

    def isLengthValid(self):
        return _odbpy.dbTechLayerCutClassRule_isLengthValid(self)

    def setCutsValid(self, cuts_valid):
        return _odbpy.dbTechLayerCutClassRule_setCutsValid(self, cuts_valid)

    def isCutsValid(self):
        return _odbpy.dbTechLayerCutClassRule_isCutsValid(self)

    @staticmethod
    def getTechLayerCutClassRule(inly, dbid):
        return _odbpy.dbTechLayerCutClassRule_getTechLayerCutClassRule(inly, dbid)

    @staticmethod
    def create(_layer, name):
        return _odbpy.dbTechLayerCutClassRule_create(_layer, name)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerCutClassRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerCutClassRule_swiginit(self, _odbpy.new_dbTechLayerCutClassRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerCutClassRule

# Register dbTechLayerCutClassRule in _odbpy:
_odbpy.dbTechLayerCutClassRule_swigregister(dbTechLayerCutClassRule)

def dbTechLayerCutClassRule_getTechLayerCutClassRule(inly, dbid):
    return _odbpy.dbTechLayerCutClassRule_getTechLayerCutClassRule(inly, dbid)

def dbTechLayerCutClassRule_create(_layer, name):
    return _odbpy.dbTechLayerCutClassRule_create(_layer, name)

def dbTechLayerCutClassRule_destroy(rule):
    return _odbpy.dbTechLayerCutClassRule_destroy(rule)

class dbTechLayerCutSpacingRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _odbpy.dbTechLayerCutSpacingRule_NONE
    MAXXY = _odbpy.dbTechLayerCutSpacingRule_MAXXY
    SAMEMASK = _odbpy.dbTechLayerCutSpacingRule_SAMEMASK
    LAYER = _odbpy.dbTechLayerCutSpacingRule_LAYER
    ADJACENTCUTS = _odbpy.dbTechLayerCutSpacingRule_ADJACENTCUTS
    PARALLELOVERLAP = _odbpy.dbTechLayerCutSpacingRule_PARALLELOVERLAP
    PARALLELWITHIN = _odbpy.dbTechLayerCutSpacingRule_PARALLELWITHIN
    SAMEMETALSHAREDEDGE = _odbpy.dbTechLayerCutSpacingRule_SAMEMETALSHAREDEDGE
    AREA = _odbpy.dbTechLayerCutSpacingRule_AREA

    def setCutSpacing(self, cut_spacing):
        return _odbpy.dbTechLayerCutSpacingRule_setCutSpacing(self, cut_spacing)

    def getCutSpacing(self):
        return _odbpy.dbTechLayerCutSpacingRule_getCutSpacing(self)

    def setSecondLayer(self, second_layer):
        return _odbpy.dbTechLayerCutSpacingRule_setSecondLayer(self, second_layer)

    def setOrthogonalSpacing(self, orthogonal_spacing):
        return _odbpy.dbTechLayerCutSpacingRule_setOrthogonalSpacing(self, orthogonal_spacing)

    def getOrthogonalSpacing(self):
        return _odbpy.dbTechLayerCutSpacingRule_getOrthogonalSpacing(self)

    def setWidth(self, width):
        return _odbpy.dbTechLayerCutSpacingRule_setWidth(self, width)

    def getWidth(self):
        return _odbpy.dbTechLayerCutSpacingRule_getWidth(self)

    def setEnclosure(self, enclosure):
        return _odbpy.dbTechLayerCutSpacingRule_setEnclosure(self, enclosure)

    def getEnclosure(self):
        return _odbpy.dbTechLayerCutSpacingRule_getEnclosure(self)

    def setEdgeLength(self, edge_length):
        return _odbpy.dbTechLayerCutSpacingRule_setEdgeLength(self, edge_length)

    def getEdgeLength(self):
        return _odbpy.dbTechLayerCutSpacingRule_getEdgeLength(self)

    def setParWithin(self, par_within):
        return _odbpy.dbTechLayerCutSpacingRule_setParWithin(self, par_within)

    def getParWithin(self):
        return _odbpy.dbTechLayerCutSpacingRule_getParWithin(self)

    def setParEnclosure(self, par_enclosure):
        return _odbpy.dbTechLayerCutSpacingRule_setParEnclosure(self, par_enclosure)

    def getParEnclosure(self):
        return _odbpy.dbTechLayerCutSpacingRule_getParEnclosure(self)

    def setEdgeEnclosure(self, edge_enclosure):
        return _odbpy.dbTechLayerCutSpacingRule_setEdgeEnclosure(self, edge_enclosure)

    def getEdgeEnclosure(self):
        return _odbpy.dbTechLayerCutSpacingRule_getEdgeEnclosure(self)

    def setAdjEnclosure(self, adj_enclosure):
        return _odbpy.dbTechLayerCutSpacingRule_setAdjEnclosure(self, adj_enclosure)

    def getAdjEnclosure(self):
        return _odbpy.dbTechLayerCutSpacingRule_getAdjEnclosure(self)

    def setAboveEnclosure(self, above_enclosure):
        return _odbpy.dbTechLayerCutSpacingRule_setAboveEnclosure(self, above_enclosure)

    def getAboveEnclosure(self):
        return _odbpy.dbTechLayerCutSpacingRule_getAboveEnclosure(self)

    def setAboveWidth(self, above_width):
        return _odbpy.dbTechLayerCutSpacingRule_setAboveWidth(self, above_width)

    def getAboveWidth(self):
        return _odbpy.dbTechLayerCutSpacingRule_getAboveWidth(self)

    def setMinLength(self, min_length):
        return _odbpy.dbTechLayerCutSpacingRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odbpy.dbTechLayerCutSpacingRule_getMinLength(self)

    def setExtension(self, extension):
        return _odbpy.dbTechLayerCutSpacingRule_setExtension(self, extension)

    def getExtension(self):
        return _odbpy.dbTechLayerCutSpacingRule_getExtension(self)

    def setEolWidth(self, eol_width):
        return _odbpy.dbTechLayerCutSpacingRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odbpy.dbTechLayerCutSpacingRule_getEolWidth(self)

    def setNumCuts(self, num_cuts):
        return _odbpy.dbTechLayerCutSpacingRule_setNumCuts(self, num_cuts)

    def getNumCuts(self):
        return _odbpy.dbTechLayerCutSpacingRule_getNumCuts(self)

    def setWithin(self, within):
        return _odbpy.dbTechLayerCutSpacingRule_setWithin(self, within)

    def getWithin(self):
        return _odbpy.dbTechLayerCutSpacingRule_getWithin(self)

    def setSecondWithin(self, second_within):
        return _odbpy.dbTechLayerCutSpacingRule_setSecondWithin(self, second_within)

    def getSecondWithin(self):
        return _odbpy.dbTechLayerCutSpacingRule_getSecondWithin(self)

    def setCutClass(self, cut_class):
        return _odbpy.dbTechLayerCutSpacingRule_setCutClass(self, cut_class)

    def setTwoCuts(self, two_cuts):
        return _odbpy.dbTechLayerCutSpacingRule_setTwoCuts(self, two_cuts)

    def getTwoCuts(self):
        return _odbpy.dbTechLayerCutSpacingRule_getTwoCuts(self)

    def setPrl(self, prl):
        return _odbpy.dbTechLayerCutSpacingRule_setPrl(self, prl)

    def getPrl(self):
        return _odbpy.dbTechLayerCutSpacingRule_getPrl(self)

    def setParLength(self, par_length):
        return _odbpy.dbTechLayerCutSpacingRule_setParLength(self, par_length)

    def getParLength(self):
        return _odbpy.dbTechLayerCutSpacingRule_getParLength(self)

    def setCutArea(self, cut_area):
        return _odbpy.dbTechLayerCutSpacingRule_setCutArea(self, cut_area)

    def getCutArea(self):
        return _odbpy.dbTechLayerCutSpacingRule_getCutArea(self)

    def setCenterToCenter(self, center_to_center):
        return _odbpy.dbTechLayerCutSpacingRule_setCenterToCenter(self, center_to_center)

    def isCenterToCenter(self):
        return _odbpy.dbTechLayerCutSpacingRule_isCenterToCenter(self)

    def setSameNet(self, same_net):
        return _odbpy.dbTechLayerCutSpacingRule_setSameNet(self, same_net)

    def isSameNet(self):
        return _odbpy.dbTechLayerCutSpacingRule_isSameNet(self)

    def setSameMetal(self, same_metal):
        return _odbpy.dbTechLayerCutSpacingRule_setSameMetal(self, same_metal)

    def isSameMetal(self):
        return _odbpy.dbTechLayerCutSpacingRule_isSameMetal(self)

    def setSameVia(self, same_via):
        return _odbpy.dbTechLayerCutSpacingRule_setSameVia(self, same_via)

    def isSameVia(self):
        return _odbpy.dbTechLayerCutSpacingRule_isSameVia(self)

    def setStack(self, stack):
        return _odbpy.dbTechLayerCutSpacingRule_setStack(self, stack)

    def isStack(self):
        return _odbpy.dbTechLayerCutSpacingRule_isStack(self)

    def setOrthogonalSpacingValid(self, orthogonal_spacing_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setOrthogonalSpacingValid(self, orthogonal_spacing_valid)

    def isOrthogonalSpacingValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isOrthogonalSpacingValid(self)

    def setAboveWidthEnclosureValid(self, above_width_enclosure_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setAboveWidthEnclosureValid(self, above_width_enclosure_valid)

    def isAboveWidthEnclosureValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isAboveWidthEnclosureValid(self)

    def setShortEdgeOnly(self, short_edge_only):
        return _odbpy.dbTechLayerCutSpacingRule_setShortEdgeOnly(self, short_edge_only)

    def isShortEdgeOnly(self):
        return _odbpy.dbTechLayerCutSpacingRule_isShortEdgeOnly(self)

    def setConcaveCornerWidth(self, concave_corner_width):
        return _odbpy.dbTechLayerCutSpacingRule_setConcaveCornerWidth(self, concave_corner_width)

    def isConcaveCornerWidth(self):
        return _odbpy.dbTechLayerCutSpacingRule_isConcaveCornerWidth(self)

    def setConcaveCornerParallel(self, concave_corner_parallel):
        return _odbpy.dbTechLayerCutSpacingRule_setConcaveCornerParallel(self, concave_corner_parallel)

    def isConcaveCornerParallel(self):
        return _odbpy.dbTechLayerCutSpacingRule_isConcaveCornerParallel(self)

    def setConcaveCornerEdgeLength(self, concave_corner_edge_length):
        return _odbpy.dbTechLayerCutSpacingRule_setConcaveCornerEdgeLength(self, concave_corner_edge_length)

    def isConcaveCornerEdgeLength(self):
        return _odbpy.dbTechLayerCutSpacingRule_isConcaveCornerEdgeLength(self)

    def setConcaveCorner(self, concave_corner):
        return _odbpy.dbTechLayerCutSpacingRule_setConcaveCorner(self, concave_corner)

    def isConcaveCorner(self):
        return _odbpy.dbTechLayerCutSpacingRule_isConcaveCorner(self)

    def setExtensionValid(self, extension_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setExtensionValid(self, extension_valid)

    def isExtensionValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExtensionValid(self)

    def setNonEolConvexCorner(self, non_eol_convex_corner):
        return _odbpy.dbTechLayerCutSpacingRule_setNonEolConvexCorner(self, non_eol_convex_corner)

    def isNonEolConvexCorner(self):
        return _odbpy.dbTechLayerCutSpacingRule_isNonEolConvexCorner(self)

    def setEolWidthValid(self, eol_width_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setEolWidthValid(self, eol_width_valid)

    def isEolWidthValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isEolWidthValid(self)

    def setMinLengthValid(self, min_length_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setMinLengthValid(self, min_length_valid)

    def isMinLengthValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isMinLengthValid(self)

    def setAboveWidthValid(self, above_width_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setAboveWidthValid(self, above_width_valid)

    def isAboveWidthValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isAboveWidthValid(self)

    def setMaskOverlap(self, mask_overlap):
        return _odbpy.dbTechLayerCutSpacingRule_setMaskOverlap(self, mask_overlap)

    def isMaskOverlap(self):
        return _odbpy.dbTechLayerCutSpacingRule_isMaskOverlap(self)

    def setWrongDirection(self, wrong_direction):
        return _odbpy.dbTechLayerCutSpacingRule_setWrongDirection(self, wrong_direction)

    def isWrongDirection(self):
        return _odbpy.dbTechLayerCutSpacingRule_isWrongDirection(self)

    def setAdjacentCuts(self, adjacent_cuts):
        return _odbpy.dbTechLayerCutSpacingRule_setAdjacentCuts(self, adjacent_cuts)

    def getAdjacentCuts(self):
        return _odbpy.dbTechLayerCutSpacingRule_getAdjacentCuts(self)

    def setExactAligned(self, exact_aligned):
        return _odbpy.dbTechLayerCutSpacingRule_setExactAligned(self, exact_aligned)

    def isExactAligned(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExactAligned(self)

    def setCutClassToAll(self, cut_class_to_all):
        return _odbpy.dbTechLayerCutSpacingRule_setCutClassToAll(self, cut_class_to_all)

    def isCutClassToAll(self):
        return _odbpy.dbTechLayerCutSpacingRule_isCutClassToAll(self)

    def setNoPrl(self, no_prl):
        return _odbpy.dbTechLayerCutSpacingRule_setNoPrl(self, no_prl)

    def isNoPrl(self):
        return _odbpy.dbTechLayerCutSpacingRule_isNoPrl(self)

    def setSameMask(self, same_mask):
        return _odbpy.dbTechLayerCutSpacingRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odbpy.dbTechLayerCutSpacingRule_isSameMask(self)

    def setExceptSamePgnet(self, except_same_pgnet):
        return _odbpy.dbTechLayerCutSpacingRule_setExceptSamePgnet(self, except_same_pgnet)

    def isExceptSamePgnet(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExceptSamePgnet(self)

    def setSideParallelOverlap(self, side_parallel_overlap):
        return _odbpy.dbTechLayerCutSpacingRule_setSideParallelOverlap(self, side_parallel_overlap)

    def isSideParallelOverlap(self):
        return _odbpy.dbTechLayerCutSpacingRule_isSideParallelOverlap(self)

    def setExceptSameNet(self, except_same_net):
        return _odbpy.dbTechLayerCutSpacingRule_setExceptSameNet(self, except_same_net)

    def isExceptSameNet(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExceptSameNet(self)

    def setExceptSameMetal(self, except_same_metal):
        return _odbpy.dbTechLayerCutSpacingRule_setExceptSameMetal(self, except_same_metal)

    def isExceptSameMetal(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExceptSameMetal(self)

    def setExceptSameMetalOverlap(self, except_same_metal_overlap):
        return _odbpy.dbTechLayerCutSpacingRule_setExceptSameMetalOverlap(self, except_same_metal_overlap)

    def isExceptSameMetalOverlap(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExceptSameMetalOverlap(self)

    def setExceptSameVia(self, except_same_via):
        return _odbpy.dbTechLayerCutSpacingRule_setExceptSameVia(self, except_same_via)

    def isExceptSameVia(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExceptSameVia(self)

    def setAbove(self, above):
        return _odbpy.dbTechLayerCutSpacingRule_setAbove(self, above)

    def isAbove(self):
        return _odbpy.dbTechLayerCutSpacingRule_isAbove(self)

    def setExceptTwoEdges(self, except_two_edges):
        return _odbpy.dbTechLayerCutSpacingRule_setExceptTwoEdges(self, except_two_edges)

    def isExceptTwoEdges(self):
        return _odbpy.dbTechLayerCutSpacingRule_isExceptTwoEdges(self)

    def setTwoCutsValid(self, two_cuts_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setTwoCutsValid(self, two_cuts_valid)

    def isTwoCutsValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isTwoCutsValid(self)

    def setSameCut(self, same_cut):
        return _odbpy.dbTechLayerCutSpacingRule_setSameCut(self, same_cut)

    def isSameCut(self):
        return _odbpy.dbTechLayerCutSpacingRule_isSameCut(self)

    def setLongEdgeOnly(self, long_edge_only):
        return _odbpy.dbTechLayerCutSpacingRule_setLongEdgeOnly(self, long_edge_only)

    def isLongEdgeOnly(self):
        return _odbpy.dbTechLayerCutSpacingRule_isLongEdgeOnly(self)

    def setPrlValid(self, prl_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setPrlValid(self, prl_valid)

    def isPrlValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isPrlValid(self)

    def setBelow(self, below):
        return _odbpy.dbTechLayerCutSpacingRule_setBelow(self, below)

    def isBelow(self):
        return _odbpy.dbTechLayerCutSpacingRule_isBelow(self)

    def setParWithinEnclosureValid(self, par_within_enclosure_valid):
        return _odbpy.dbTechLayerCutSpacingRule_setParWithinEnclosureValid(self, par_within_enclosure_valid)

    def isParWithinEnclosureValid(self):
        return _odbpy.dbTechLayerCutSpacingRule_isParWithinEnclosureValid(self)

    def getCutClass(self):
        return _odbpy.dbTechLayerCutSpacingRule_getCutClass(self)

    def getSecondLayer(self):
        return _odbpy.dbTechLayerCutSpacingRule_getSecondLayer(self)

    def getTechLayer(self):
        return _odbpy.dbTechLayerCutSpacingRule_getTechLayer(self)

    def setType(self, _type):
        return _odbpy.dbTechLayerCutSpacingRule_setType(self, _type)

    def getType(self):
        return _odbpy.dbTechLayerCutSpacingRule_getType(self)

    @staticmethod
    def getTechLayerCutSpacingRule(inly, dbid):
        return _odbpy.dbTechLayerCutSpacingRule_getTechLayerCutSpacingRule(inly, dbid)

    @staticmethod
    def create(_layer):
        return _odbpy.dbTechLayerCutSpacingRule_create(_layer)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerCutSpacingRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerCutSpacingRule_swiginit(self, _odbpy.new_dbTechLayerCutSpacingRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerCutSpacingRule

# Register dbTechLayerCutSpacingRule in _odbpy:
_odbpy.dbTechLayerCutSpacingRule_swigregister(dbTechLayerCutSpacingRule)

def dbTechLayerCutSpacingRule_getTechLayerCutSpacingRule(inly, dbid):
    return _odbpy.dbTechLayerCutSpacingRule_getTechLayerCutSpacingRule(inly, dbid)

def dbTechLayerCutSpacingRule_create(_layer):
    return _odbpy.dbTechLayerCutSpacingRule_create(_layer)

def dbTechLayerCutSpacingRule_destroy(rule):
    return _odbpy.dbTechLayerCutSpacingRule_destroy(rule)

class dbTechLayerCutSpacingTableOrthRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getSpacingTable(self, tbl):
        return _odbpy.dbTechLayerCutSpacingTableOrthRule_getSpacingTable(self, tbl)

    def setSpacingTable(self, tbl):
        return _odbpy.dbTechLayerCutSpacingTableOrthRule_setSpacingTable(self, tbl)

    @staticmethod
    def create(parent):
        return _odbpy.dbTechLayerCutSpacingTableOrthRule_create(parent)

    @staticmethod
    def getTechLayerCutSpacingTableOrthSubRule(parent, dbid):
        return _odbpy.dbTechLayerCutSpacingTableOrthRule_getTechLayerCutSpacingTableOrthSubRule(parent, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerCutSpacingTableOrthRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerCutSpacingTableOrthRule_swiginit(self, _odbpy.new_dbTechLayerCutSpacingTableOrthRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerCutSpacingTableOrthRule

# Register dbTechLayerCutSpacingTableOrthRule in _odbpy:
_odbpy.dbTechLayerCutSpacingTableOrthRule_swigregister(dbTechLayerCutSpacingTableOrthRule)

def dbTechLayerCutSpacingTableOrthRule_create(parent):
    return _odbpy.dbTechLayerCutSpacingTableOrthRule_create(parent)

def dbTechLayerCutSpacingTableOrthRule_getTechLayerCutSpacingTableOrthSubRule(parent, dbid):
    return _odbpy.dbTechLayerCutSpacingTableOrthRule_getTechLayerCutSpacingTableOrthSubRule(parent, dbid)

def dbTechLayerCutSpacingTableOrthRule_destroy(rule):
    return _odbpy.dbTechLayerCutSpacingTableOrthRule_destroy(rule)

class dbTechLayerCutSpacingTableDefRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FIRST = _odbpy.dbTechLayerCutSpacingTableDefRule_FIRST
    SECOND = _odbpy.dbTechLayerCutSpacingTableDefRule_SECOND
    MAX = _odbpy.dbTechLayerCutSpacingTableDefRule_MAX
    MIN = _odbpy.dbTechLayerCutSpacingTableDefRule_MIN

    def setDefault(self, spacing):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setDefault(self, spacing)

    def getDefault(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getDefault(self)

    def setSecondLayer(self, second_layer):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setSecondLayer(self, second_layer)

    def setPrl(self, prl):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setPrl(self, prl)

    def getPrl(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getPrl(self)

    def setExtension(self, extension):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setExtension(self, extension)

    def getExtension(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getExtension(self)

    def setDefaultValid(self, default_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setDefaultValid(self, default_valid)

    def isDefaultValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isDefaultValid(self)

    def setSameMask(self, same_mask):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setSameMask(self, same_mask)

    def isSameMask(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isSameMask(self)

    def setSameNet(self, same_net):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setSameNet(self, same_net)

    def isSameNet(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isSameNet(self)

    def setSameMetal(self, same_metal):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setSameMetal(self, same_metal)

    def isSameMetal(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isSameMetal(self)

    def setSameVia(self, same_via):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setSameVia(self, same_via)

    def isSameVia(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isSameVia(self)

    def setLayerValid(self, layer_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setLayerValid(self, layer_valid)

    def isLayerValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isLayerValid(self)

    def setNoStack(self, no_stack):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setNoStack(self, no_stack)

    def isNoStack(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isNoStack(self)

    def setNonZeroEnclosure(self, non_zero_enclosure):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setNonZeroEnclosure(self, non_zero_enclosure)

    def isNonZeroEnclosure(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isNonZeroEnclosure(self)

    def setPrlForAlignedCut(self, prl_for_aligned_cut):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setPrlForAlignedCut(self, prl_for_aligned_cut)

    def isPrlForAlignedCut(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isPrlForAlignedCut(self)

    def setCenterToCenterValid(self, center_to_center_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setCenterToCenterValid(self, center_to_center_valid)

    def isCenterToCenterValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isCenterToCenterValid(self)

    def setCenterAndEdgeValid(self, center_and_edge_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setCenterAndEdgeValid(self, center_and_edge_valid)

    def isCenterAndEdgeValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isCenterAndEdgeValid(self)

    def setNoPrl(self, no_prl):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setNoPrl(self, no_prl)

    def isNoPrl(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isNoPrl(self)

    def setPrlValid(self, prl_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setPrlValid(self, prl_valid)

    def isPrlValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isPrlValid(self)

    def setMaxXY(self, max_x_y):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setMaxXY(self, max_x_y)

    def isMaxXY(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isMaxXY(self)

    def setEndExtensionValid(self, end_extension_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setEndExtensionValid(self, end_extension_valid)

    def isEndExtensionValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isEndExtensionValid(self)

    def setSideExtensionValid(self, side_extension_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setSideExtensionValid(self, side_extension_valid)

    def isSideExtensionValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isSideExtensionValid(self)

    def setExactAlignedSpacingValid(self, exact_aligned_spacing_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setExactAlignedSpacingValid(self, exact_aligned_spacing_valid)

    def isExactAlignedSpacingValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isExactAlignedSpacingValid(self)

    def setHorizontal(self, horizontal):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setHorizontal(self, horizontal)

    def isHorizontal(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isHorizontal(self)

    def setPrlHorizontal(self, prl_horizontal):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setPrlHorizontal(self, prl_horizontal)

    def isPrlHorizontal(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isPrlHorizontal(self)

    def setVertical(self, vertical):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setVertical(self, vertical)

    def isVertical(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isVertical(self)

    def setPrlVertical(self, prl_vertical):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setPrlVertical(self, prl_vertical)

    def isPrlVertical(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isPrlVertical(self)

    def setNonOppositeEnclosureSpacingValid(self, non_opposite_enclosure_spacing_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setNonOppositeEnclosureSpacingValid(self, non_opposite_enclosure_spacing_valid)

    def isNonOppositeEnclosureSpacingValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isNonOppositeEnclosureSpacingValid(self)

    def setOppositeEnclosureResizeSpacingValid(self, opposite_enclosure_resize_spacing_valid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setOppositeEnclosureResizeSpacingValid(self, opposite_enclosure_resize_spacing_valid)

    def isOppositeEnclosureResizeSpacingValid(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isOppositeEnclosureResizeSpacingValid(self)

    def addPrlForAlignedCutEntry(self, _from, to):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addPrlForAlignedCutEntry(self, _from, to)

    def addCenterToCenterEntry(self, _from, to):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addCenterToCenterEntry(self, _from, to)

    def addCenterAndEdgeEntry(self, _from, to):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addCenterAndEdgeEntry(self, _from, to)

    def addPrlEntry(self, _from, to, ccPrl):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addPrlEntry(self, _from, to, ccPrl)

    def addEndExtensionEntry(self, cls, ext):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addEndExtensionEntry(self, cls, ext)

    def addSideExtensionEntry(self, cls, ext):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addSideExtensionEntry(self, cls, ext)

    def addExactElignedEntry(self, cls, spacing):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addExactElignedEntry(self, cls, spacing)

    def addNonOppEncSpacingEntry(self, cls, spacing):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addNonOppEncSpacingEntry(self, cls, spacing)

    def addOppEncSpacingEntry(self, cls, rsz1, rsz2, spacing):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_addOppEncSpacingEntry(self, cls, rsz1, rsz2, spacing)

    def getSecondLayer(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getSecondLayer(self)

    def isCenterToCenter(self, cutClass1, cutClass2):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isCenterToCenter(self, cutClass1, cutClass2)

    def isCenterAndEdge(self, cutClass1, cutClass2):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isCenterAndEdge(self, cutClass1, cutClass2)

    def isPrlForAlignedCutClasses(self, cutClass1, cutClass2):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_isPrlForAlignedCutClasses(self, cutClass1, cutClass2)

    def getPrlEntry(self, cutClass1, cutClass2):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getPrlEntry(self, cutClass1, cutClass2)

    def setSpacingTable(self, table, row_map, col_map):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_setSpacingTable(self, table, row_map, col_map)

    def getSpacingTable(self, table, row_map, col_map):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getSpacingTable(self, table, row_map, col_map)

    def getExactAlignedSpacing(self, cutClass):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getExactAlignedSpacing(self, cutClass)

    def getMaxSpacing(self, *args):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getMaxSpacing(self, *args)

    def getSpacing(self, *args):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getSpacing(self, *args)

    def getTechLayer(self):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getTechLayer(self)

    @staticmethod
    def create(parent):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_create(parent)

    @staticmethod
    def getTechLayerCutSpacingTableDefSubRule(parent, dbid):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_getTechLayerCutSpacingTableDefSubRule(parent, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerCutSpacingTableDefRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerCutSpacingTableDefRule_swiginit(self, _odbpy.new_dbTechLayerCutSpacingTableDefRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerCutSpacingTableDefRule

# Register dbTechLayerCutSpacingTableDefRule in _odbpy:
_odbpy.dbTechLayerCutSpacingTableDefRule_swigregister(dbTechLayerCutSpacingTableDefRule)

def dbTechLayerCutSpacingTableDefRule_create(parent):
    return _odbpy.dbTechLayerCutSpacingTableDefRule_create(parent)

def dbTechLayerCutSpacingTableDefRule_getTechLayerCutSpacingTableDefSubRule(parent, dbid):
    return _odbpy.dbTechLayerCutSpacingTableDefRule_getTechLayerCutSpacingTableDefSubRule(parent, dbid)

def dbTechLayerCutSpacingTableDefRule_destroy(rule):
    return _odbpy.dbTechLayerCutSpacingTableDefRule_destroy(rule)

class dbTechLayerCutEnclosureRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT = _odbpy.dbTechLayerCutEnclosureRule_DEFAULT
    EOL = _odbpy.dbTechLayerCutEnclosureRule_EOL
    ENDSIDE = _odbpy.dbTechLayerCutEnclosureRule_ENDSIDE
    HORZ_AND_VERT = _odbpy.dbTechLayerCutEnclosureRule_HORZ_AND_VERT

    def setCutClass(self, cut_class):
        return _odbpy.dbTechLayerCutEnclosureRule_setCutClass(self, cut_class)

    def getCutClass(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getCutClass(self)

    def setEolWidth(self, eol_width):
        return _odbpy.dbTechLayerCutEnclosureRule_setEolWidth(self, eol_width)

    def getEolWidth(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getEolWidth(self)

    def setEolMinLength(self, eol_min_length):
        return _odbpy.dbTechLayerCutEnclosureRule_setEolMinLength(self, eol_min_length)

    def getEolMinLength(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getEolMinLength(self)

    def setFirstOverhang(self, first_overhang):
        return _odbpy.dbTechLayerCutEnclosureRule_setFirstOverhang(self, first_overhang)

    def getFirstOverhang(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getFirstOverhang(self)

    def setSecondOverhang(self, second_overhang):
        return _odbpy.dbTechLayerCutEnclosureRule_setSecondOverhang(self, second_overhang)

    def getSecondOverhang(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getSecondOverhang(self)

    def setSpacing(self, spacing):
        return _odbpy.dbTechLayerCutEnclosureRule_setSpacing(self, spacing)

    def getSpacing(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getSpacing(self)

    def setExtension(self, extension):
        return _odbpy.dbTechLayerCutEnclosureRule_setExtension(self, extension)

    def getExtension(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getExtension(self)

    def setForwardExtension(self, forward_extension):
        return _odbpy.dbTechLayerCutEnclosureRule_setForwardExtension(self, forward_extension)

    def getForwardExtension(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getForwardExtension(self)

    def setBackwardExtension(self, backward_extension):
        return _odbpy.dbTechLayerCutEnclosureRule_setBackwardExtension(self, backward_extension)

    def getBackwardExtension(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getBackwardExtension(self)

    def setMinWidth(self, min_width):
        return _odbpy.dbTechLayerCutEnclosureRule_setMinWidth(self, min_width)

    def getMinWidth(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getMinWidth(self)

    def setCutWithin(self, cut_within):
        return _odbpy.dbTechLayerCutEnclosureRule_setCutWithin(self, cut_within)

    def getCutWithin(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getCutWithin(self)

    def setMinLength(self, min_length):
        return _odbpy.dbTechLayerCutEnclosureRule_setMinLength(self, min_length)

    def getMinLength(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getMinLength(self)

    def setParLength(self, par_length):
        return _odbpy.dbTechLayerCutEnclosureRule_setParLength(self, par_length)

    def getParLength(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getParLength(self)

    def setSecondParLength(self, second_par_length):
        return _odbpy.dbTechLayerCutEnclosureRule_setSecondParLength(self, second_par_length)

    def getSecondParLength(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getSecondParLength(self)

    def setParWithin(self, par_within):
        return _odbpy.dbTechLayerCutEnclosureRule_setParWithin(self, par_within)

    def getParWithin(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getParWithin(self)

    def setSecondParWithin(self, second_par_within):
        return _odbpy.dbTechLayerCutEnclosureRule_setSecondParWithin(self, second_par_within)

    def getSecondParWithin(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getSecondParWithin(self)

    def setBelowEnclosure(self, below_enclosure):
        return _odbpy.dbTechLayerCutEnclosureRule_setBelowEnclosure(self, below_enclosure)

    def getBelowEnclosure(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getBelowEnclosure(self)

    def setNumCorners(self, num_corners):
        return _odbpy.dbTechLayerCutEnclosureRule_setNumCorners(self, num_corners)

    def getNumCorners(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getNumCorners(self)

    def setCutClassValid(self, cut_class_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setCutClassValid(self, cut_class_valid)

    def isCutClassValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isCutClassValid(self)

    def setAbove(self, above):
        return _odbpy.dbTechLayerCutEnclosureRule_setAbove(self, above)

    def isAbove(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isAbove(self)

    def setBelow(self, below):
        return _odbpy.dbTechLayerCutEnclosureRule_setBelow(self, below)

    def isBelow(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isBelow(self)

    def setEolMinLengthValid(self, eol_min_length_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setEolMinLengthValid(self, eol_min_length_valid)

    def isEolMinLengthValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isEolMinLengthValid(self)

    def setEolOnly(self, eol_only):
        return _odbpy.dbTechLayerCutEnclosureRule_setEolOnly(self, eol_only)

    def isEolOnly(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isEolOnly(self)

    def setShortEdgeOnly(self, short_edge_only):
        return _odbpy.dbTechLayerCutEnclosureRule_setShortEdgeOnly(self, short_edge_only)

    def isShortEdgeOnly(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isShortEdgeOnly(self)

    def setSideSpacingValid(self, side_spacing_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setSideSpacingValid(self, side_spacing_valid)

    def isSideSpacingValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isSideSpacingValid(self)

    def setEndSpacingValid(self, end_spacing_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setEndSpacingValid(self, end_spacing_valid)

    def isEndSpacingValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isEndSpacingValid(self)

    def setOffCenterLine(self, off_center_line):
        return _odbpy.dbTechLayerCutEnclosureRule_setOffCenterLine(self, off_center_line)

    def isOffCenterLine(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isOffCenterLine(self)

    def setWidthValid(self, width_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setWidthValid(self, width_valid)

    def isWidthValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isWidthValid(self)

    def setIncludeAbutted(self, include_abutted):
        return _odbpy.dbTechLayerCutEnclosureRule_setIncludeAbutted(self, include_abutted)

    def isIncludeAbutted(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isIncludeAbutted(self)

    def setExceptExtraCut(self, except_extra_cut):
        return _odbpy.dbTechLayerCutEnclosureRule_setExceptExtraCut(self, except_extra_cut)

    def isExceptExtraCut(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isExceptExtraCut(self)

    def setPrl(self, prl):
        return _odbpy.dbTechLayerCutEnclosureRule_setPrl(self, prl)

    def isPrl(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isPrl(self)

    def setNoSharedEdge(self, no_shared_edge):
        return _odbpy.dbTechLayerCutEnclosureRule_setNoSharedEdge(self, no_shared_edge)

    def isNoSharedEdge(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isNoSharedEdge(self)

    def setLengthValid(self, length_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setLengthValid(self, length_valid)

    def isLengthValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isLengthValid(self)

    def setExtraCutValid(self, extra_cut_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setExtraCutValid(self, extra_cut_valid)

    def isExtraCutValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isExtraCutValid(self)

    def setExtraOnly(self, extra_only):
        return _odbpy.dbTechLayerCutEnclosureRule_setExtraOnly(self, extra_only)

    def isExtraOnly(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isExtraOnly(self)

    def setRedundantCutValid(self, redundant_cut_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setRedundantCutValid(self, redundant_cut_valid)

    def isRedundantCutValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isRedundantCutValid(self)

    def setParallelValid(self, parallel_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setParallelValid(self, parallel_valid)

    def isParallelValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isParallelValid(self)

    def setSecondParallelValid(self, second_parallel_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setSecondParallelValid(self, second_parallel_valid)

    def isSecondParallelValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isSecondParallelValid(self)

    def setSecondParWithinValid(self, second_par_within_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setSecondParWithinValid(self, second_par_within_valid)

    def isSecondParWithinValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isSecondParWithinValid(self)

    def setBelowEnclosureValid(self, below_enclosure_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setBelowEnclosureValid(self, below_enclosure_valid)

    def isBelowEnclosureValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isBelowEnclosureValid(self)

    def setConcaveCornersValid(self, concave_corners_valid):
        return _odbpy.dbTechLayerCutEnclosureRule_setConcaveCornersValid(self, concave_corners_valid)

    def isConcaveCornersValid(self):
        return _odbpy.dbTechLayerCutEnclosureRule_isConcaveCornersValid(self)

    def setType(self, type):
        return _odbpy.dbTechLayerCutEnclosureRule_setType(self, type)

    def getType(self):
        return _odbpy.dbTechLayerCutEnclosureRule_getType(self)

    @staticmethod
    def create(layer):
        return _odbpy.dbTechLayerCutEnclosureRule_create(layer)

    @staticmethod
    def getTechLayerCutEnclosureRule(inly, dbid):
        return _odbpy.dbTechLayerCutEnclosureRule_getTechLayerCutEnclosureRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerCutEnclosureRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerCutEnclosureRule_swiginit(self, _odbpy.new_dbTechLayerCutEnclosureRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerCutEnclosureRule

# Register dbTechLayerCutEnclosureRule in _odbpy:
_odbpy.dbTechLayerCutEnclosureRule_swigregister(dbTechLayerCutEnclosureRule)

def dbTechLayerCutEnclosureRule_create(layer):
    return _odbpy.dbTechLayerCutEnclosureRule_create(layer)

def dbTechLayerCutEnclosureRule_getTechLayerCutEnclosureRule(inly, dbid):
    return _odbpy.dbTechLayerCutEnclosureRule_getTechLayerCutEnclosureRule(inly, dbid)

def dbTechLayerCutEnclosureRule_destroy(rule):
    return _odbpy.dbTechLayerCutEnclosureRule_destroy(rule)

class dbTechLayerEolExtensionRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setSpacing(self, spacing):
        return _odbpy.dbTechLayerEolExtensionRule_setSpacing(self, spacing)

    def getSpacing(self):
        return _odbpy.dbTechLayerEolExtensionRule_getSpacing(self)

    def getExtensionTable(self, tbl):
        return _odbpy.dbTechLayerEolExtensionRule_getExtensionTable(self, tbl)

    def setParallelOnly(self, parallel_only):
        return _odbpy.dbTechLayerEolExtensionRule_setParallelOnly(self, parallel_only)

    def isParallelOnly(self):
        return _odbpy.dbTechLayerEolExtensionRule_isParallelOnly(self)

    def addEntry(self, eol, ext):
        return _odbpy.dbTechLayerEolExtensionRule_addEntry(self, eol, ext)

    @staticmethod
    def create(layer):
        return _odbpy.dbTechLayerEolExtensionRule_create(layer)

    @staticmethod
    def getTechLayerEolExtensionRule(inly, dbid):
        return _odbpy.dbTechLayerEolExtensionRule_getTechLayerEolExtensionRule(inly, dbid)

    @staticmethod
    def destroy(rule):
        return _odbpy.dbTechLayerEolExtensionRule_destroy(rule)

    def __init__(self):
        _odbpy.dbTechLayerEolExtensionRule_swiginit(self, _odbpy.new_dbTechLayerEolExtensionRule())
    __swig_destroy__ = _odbpy.delete_dbTechLayerEolExtensionRule

# Register dbTechLayerEolExtensionRule in _odbpy:
_odbpy.dbTechLayerEolExtensionRule_swigregister(dbTechLayerEolExtensionRule)

def dbTechLayerEolExtensionRule_create(layer):
    return _odbpy.dbTechLayerEolExtensionRule_create(layer)

def dbTechLayerEolExtensionRule_getTechLayerEolExtensionRule(inly, dbid):
    return _odbpy.dbTechLayerEolExtensionRule_getTechLayerEolExtensionRule(inly, dbid)

def dbTechLayerEolExtensionRule_destroy(rule):
    return _odbpy.dbTechLayerEolExtensionRule_destroy(rule)

class dbModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbModule_getName(self)

    def getModInst(self):
        return _odbpy.dbModule_getModInst(self)

    def addInst(self, inst):
        return _odbpy.dbModule_addInst(self, inst)

    def removeInst(self, inst):
        return _odbpy.dbModule_removeInst(self, inst)

    def getInsts(self):
        return _odbpy.dbModule_getInsts(self)

    def getChildren(self):
        return _odbpy.dbModule_getChildren(self)

    def findModInst(self, name):
        return _odbpy.dbModule_findModInst(self, name)

    @staticmethod
    def create(block, name):
        return _odbpy.dbModule_create(block, name)

    @staticmethod
    def destroy(module):
        return _odbpy.dbModule_destroy(module)

    @staticmethod
    def getModule(block_, dbid_):
        return _odbpy.dbModule_getModule(block_, dbid_)

    def __init__(self):
        _odbpy.dbModule_swiginit(self, _odbpy.new_dbModule())
    __swig_destroy__ = _odbpy.delete_dbModule

# Register dbModule in _odbpy:
_odbpy.dbModule_swigregister(dbModule)

def dbModule_create(block, name):
    return _odbpy.dbModule_create(block, name)

def dbModule_destroy(module):
    return _odbpy.dbModule_destroy(module)

def dbModule_getModule(block_, dbid_):
    return _odbpy.dbModule_getModule(block_, dbid_)

class dbModInst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getParent(self):
        return _odbpy.dbModInst_getParent(self)

    def getMaster(self):
        return _odbpy.dbModInst_getMaster(self)

    def getGroup(self):
        return _odbpy.dbModInst_getGroup(self)

    @staticmethod
    def create(parentModule, masterModule, name):
        return _odbpy.dbModInst_create(parentModule, masterModule, name)

    @staticmethod
    def destroy(*args):
        return _odbpy.dbModInst_destroy(*args)

    @staticmethod
    def getModInst(block_, dbid_):
        return _odbpy.dbModInst_getModInst(block_, dbid_)

    def getName(self):
        return _odbpy.dbModInst_getName(self)

    def getHierarchalName(self):
        return _odbpy.dbModInst_getHierarchalName(self)

    def __init__(self):
        _odbpy.dbModInst_swiginit(self, _odbpy.new_dbModInst())
    __swig_destroy__ = _odbpy.delete_dbModInst

# Register dbModInst in _odbpy:
_odbpy.dbModInst_swigregister(dbModInst)

def dbModInst_create(parentModule, masterModule, name):
    return _odbpy.dbModInst_create(parentModule, masterModule, name)

def dbModInst_destroy(*args):
    return _odbpy.dbModInst_destroy(*args)

def dbModInst_getModInst(block_, dbid_):
    return _odbpy.dbModInst_getModInst(block_, dbid_)

class dbGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getName(self):
        return _odbpy.dbGroup_getName(self)

    def getBox(self):
        return _odbpy.dbGroup_getBox(self)

    def setParentGroup(self, parent_group):
        return _odbpy.dbGroup_setParentGroup(self, parent_group)

    def getParentGroup(self):
        return _odbpy.dbGroup_getParentGroup(self)

    def setType(self, type):
        return _odbpy.dbGroup_setType(self, type)

    def getType(self):
        return _odbpy.dbGroup_getType(self)

    def setBox(self, _box):
        return _odbpy.dbGroup_setBox(self, _box)

    def hasBox(self):
        return _odbpy.dbGroup_hasBox(self)

    def addModInst(self, modinst):
        return _odbpy.dbGroup_addModInst(self, modinst)

    def removeModInst(self, modinst):
        return _odbpy.dbGroup_removeModInst(self, modinst)

    def getModInsts(self):
        return _odbpy.dbGroup_getModInsts(self)

    def addInst(self, inst):
        return _odbpy.dbGroup_addInst(self, inst)

    def removeInst(self, inst):
        return _odbpy.dbGroup_removeInst(self, inst)

    def getInsts(self):
        return _odbpy.dbGroup_getInsts(self)

    def addGroup(self, group):
        return _odbpy.dbGroup_addGroup(self, group)

    def removeGroup(self, group):
        return _odbpy.dbGroup_removeGroup(self, group)

    def getGroups(self):
        return _odbpy.dbGroup_getGroups(self)

    def addPowerNet(self, net):
        return _odbpy.dbGroup_addPowerNet(self, net)

    def addGroundNet(self, net):
        return _odbpy.dbGroup_addGroundNet(self, net)

    def removeNet(self, net):
        return _odbpy.dbGroup_removeNet(self, net)

    def getPowerNets(self):
        return _odbpy.dbGroup_getPowerNets(self)

    def getGroundNets(self):
        return _odbpy.dbGroup_getGroundNets(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbGroup_create(*args)

    @staticmethod
    def destroy(group):
        return _odbpy.dbGroup_destroy(group)

    @staticmethod
    def getGroup(block_, dbid_):
        return _odbpy.dbGroup_getGroup(block_, dbid_)

    def __init__(self):
        _odbpy.dbGroup_swiginit(self, _odbpy.new_dbGroup())
    __swig_destroy__ = _odbpy.delete_dbGroup

# Register dbGroup in _odbpy:
_odbpy.dbGroup_swigregister(dbGroup)

def dbGroup_create(*args):
    return _odbpy.dbGroup_create(*args)

def dbGroup_destroy(group):
    return _odbpy.dbGroup_destroy(group)

def dbGroup_getGroup(block_, dbid_):
    return _odbpy.dbGroup_getGroup(block_, dbid_)

class dbGCellGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getGridX(self):
        return _odbpy.dbGCellGrid_getGridX(self)

    def getGridY(self):
        return _odbpy.dbGCellGrid_getGridY(self)

    def getBlock(self):
        return _odbpy.dbGCellGrid_getBlock(self)

    def addGridPatternX(self, origin_x, line_count, step):
        return _odbpy.dbGCellGrid_addGridPatternX(self, origin_x, line_count, step)

    def addGridPatternY(self, origin_y, line_count, step):
        return _odbpy.dbGCellGrid_addGridPatternY(self, origin_y, line_count, step)

    def getNumGridPatternsX(self):
        return _odbpy.dbGCellGrid_getNumGridPatternsX(self)

    def getNumGridPatternsY(self):
        return _odbpy.dbGCellGrid_getNumGridPatternsY(self)

    def getGridPatternX(self, i):
        return _odbpy.dbGCellGrid_getGridPatternX(self, i)

    def getGridPatternY(self, i):
        return _odbpy.dbGCellGrid_getGridPatternY(self, i)

    @staticmethod
    def create(block):
        return _odbpy.dbGCellGrid_create(block)

    @staticmethod
    def getGCellGrid(block, oid):
        return _odbpy.dbGCellGrid_getGCellGrid(block, oid)

    def getXIdx(self, x):
        return _odbpy.dbGCellGrid_getXIdx(self, x)

    def getYIdx(self, y):
        return _odbpy.dbGCellGrid_getYIdx(self, y)

    def getHorizontalCapacity(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getHorizontalCapacity(self, layer, x_idx, y_idx)

    def getVerticalCapacity(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getVerticalCapacity(self, layer, x_idx, y_idx)

    def getUpCapacity(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getUpCapacity(self, layer, x_idx, y_idx)

    def getHorizontalUsage(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getHorizontalUsage(self, layer, x_idx, y_idx)

    def getVerticalUsage(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getVerticalUsage(self, layer, x_idx, y_idx)

    def getUpUsage(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getUpUsage(self, layer, x_idx, y_idx)

    def getHorizontalBlockage(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getHorizontalBlockage(self, layer, x_idx, y_idx)

    def getVerticalBlockage(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getVerticalBlockage(self, layer, x_idx, y_idx)

    def getUpBlockage(self, layer, x_idx, y_idx):
        return _odbpy.dbGCellGrid_getUpBlockage(self, layer, x_idx, y_idx)

    def setHorizontalCapacity(self, layer, x_idx, y_idx, capacity):
        return _odbpy.dbGCellGrid_setHorizontalCapacity(self, layer, x_idx, y_idx, capacity)

    def setVerticalCapacity(self, layer, x_idx, y_idx, capacity):
        return _odbpy.dbGCellGrid_setVerticalCapacity(self, layer, x_idx, y_idx, capacity)

    def setUpCapacity(self, layer, x_idx, y_idx, capacity):
        return _odbpy.dbGCellGrid_setUpCapacity(self, layer, x_idx, y_idx, capacity)

    def setHorizontalUsage(self, layer, x_idx, y_idx, use):
        return _odbpy.dbGCellGrid_setHorizontalUsage(self, layer, x_idx, y_idx, use)

    def setVerticalUsage(self, layer, x_idx, y_idx, use):
        return _odbpy.dbGCellGrid_setVerticalUsage(self, layer, x_idx, y_idx, use)

    def setUpUsage(self, layer, x_idx, y_idx, use):
        return _odbpy.dbGCellGrid_setUpUsage(self, layer, x_idx, y_idx, use)

    def setHorizontalBlockage(self, layer, x_idx, y_idx, blockage):
        return _odbpy.dbGCellGrid_setHorizontalBlockage(self, layer, x_idx, y_idx, blockage)

    def setVerticalBlockage(self, layer, x_idx, y_idx, blockage):
        return _odbpy.dbGCellGrid_setVerticalBlockage(self, layer, x_idx, y_idx, blockage)

    def setUpBlockage(self, layer, x_idx, y_idx, blockage):
        return _odbpy.dbGCellGrid_setUpBlockage(self, layer, x_idx, y_idx, blockage)

    def setCapacity(self, layer, x_idx, y_idx, horizontal, vertical, up):
        return _odbpy.dbGCellGrid_setCapacity(self, layer, x_idx, y_idx, horizontal, vertical, up)

    def setUsage(self, layer, x_idx, y_idx, horizontal, vertical, up):
        return _odbpy.dbGCellGrid_setUsage(self, layer, x_idx, y_idx, horizontal, vertical, up)

    def setBlockage(self, layer, x_idx, y_idx, horizontal, vertical, up):
        return _odbpy.dbGCellGrid_setBlockage(self, layer, x_idx, y_idx, horizontal, vertical, up)

    def getCapacity(self, layer, x_idx, y_idx, horizontal, vertical, up):
        return _odbpy.dbGCellGrid_getCapacity(self, layer, x_idx, y_idx, horizontal, vertical, up)

    def getUsage(self, layer, x_idx, y_idx, horizontal, vertical, up):
        return _odbpy.dbGCellGrid_getUsage(self, layer, x_idx, y_idx, horizontal, vertical, up)

    def getBlockage(self, layer, x_idx, y_idx, horizontal, vertical, up):
        return _odbpy.dbGCellGrid_getBlockage(self, layer, x_idx, y_idx, horizontal, vertical, up)

    def resetCongestionMap(self):
        return _odbpy.dbGCellGrid_resetCongestionMap(self)

    def resetGrid(self):
        return _odbpy.dbGCellGrid_resetGrid(self)

    def getCongestionMap(self, layer=None):
        return _odbpy.dbGCellGrid_getCongestionMap(self, layer)

    def __init__(self):
        _odbpy.dbGCellGrid_swiginit(self, _odbpy.new_dbGCellGrid())
    __swig_destroy__ = _odbpy.delete_dbGCellGrid

# Register dbGCellGrid in _odbpy:
_odbpy.dbGCellGrid_swigregister(dbGCellGrid)

def dbGCellGrid_create(block):
    return _odbpy.dbGCellGrid_create(block)

def dbGCellGrid_getGCellGrid(block, oid):
    return _odbpy.dbGCellGrid_getGCellGrid(block, oid)

class dbAccessPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setPoint(self, point):
        return _odbpy.dbAccessPoint_setPoint(self, point)

    def getPoint(self):
        return _odbpy.dbAccessPoint_getPoint(self)

    def setLayer(self, layer):
        return _odbpy.dbAccessPoint_setLayer(self, layer)

    def setAccesses(self, accesses):
        return _odbpy.dbAccessPoint_setAccesses(self, accesses)

    def getAccesses(self, tbl):
        return _odbpy.dbAccessPoint_getAccesses(self, tbl)

    def setLowType(self, type_low):
        return _odbpy.dbAccessPoint_setLowType(self, type_low)

    def getLowType(self):
        return _odbpy.dbAccessPoint_getLowType(self)

    def setHighType(self, type_high):
        return _odbpy.dbAccessPoint_setHighType(self, type_high)

    def getHighType(self):
        return _odbpy.dbAccessPoint_getHighType(self)

    def setAccess(self, access, dir):
        return _odbpy.dbAccessPoint_setAccess(self, access, dir)

    def hasAccess(self, *args):
        return _odbpy.dbAccessPoint_hasAccess(self, *args)

    def getLayer(self):
        return _odbpy.dbAccessPoint_getLayer(self)

    def getMPin(self):
        return _odbpy.dbAccessPoint_getMPin(self)

    def getBPin(self):
        return _odbpy.dbAccessPoint_getBPin(self)

    @staticmethod
    def create(*args):
        return _odbpy.dbAccessPoint_create(*args)

    @staticmethod
    def getAccessPoint(block, dbid):
        return _odbpy.dbAccessPoint_getAccessPoint(block, dbid)

    @staticmethod
    def destroy(ap):
        return _odbpy.dbAccessPoint_destroy(ap)

    def __init__(self):
        _odbpy.dbAccessPoint_swiginit(self, _odbpy.new_dbAccessPoint())
    __swig_destroy__ = _odbpy.delete_dbAccessPoint

# Register dbAccessPoint in _odbpy:
_odbpy.dbAccessPoint_swigregister(dbAccessPoint)

def dbAccessPoint_create(*args):
    return _odbpy.dbAccessPoint_create(*args)

def dbAccessPoint_getAccessPoint(block, dbid):
    return _odbpy.dbAccessPoint_getAccessPoint(block, dbid)

def dbAccessPoint_destroy(ap):
    return _odbpy.dbAccessPoint_destroy(ap)


def read_lef(db, path):
    return _odbpy.read_lef(db, path)

def write_lef(lib, path):
    return _odbpy.write_lef(lib, path)

def write_tech_lef(tech, path):
    return _odbpy.write_tech_lef(tech, path)

def write_macro_lef(lib, path):
    return _odbpy.write_macro_lef(lib, path)

def read_def(db, path):
    return _odbpy.read_def(db, path)

def write_def(*args):
    return _odbpy.write_def(*args)

def read_db(db, db_path):
    return _odbpy.read_db(db, db_path)

def write_db(db, db_path):
    return _odbpy.write_db(db, db_path)

def createSBoxes(*args):
    return _odbpy.createSBoxes(*args)

def db_diff(db1, db2):
    return _odbpy.db_diff(db1, db2)

def db_def_diff(db1, def_filename):
    return _odbpy.db_def_diff(db1, def_filename)
class _dbViaParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _x_cut_size = property(_odbpy._dbViaParams__x_cut_size_get, _odbpy._dbViaParams__x_cut_size_set)
    _y_cut_size = property(_odbpy._dbViaParams__y_cut_size_get, _odbpy._dbViaParams__y_cut_size_set)
    _x_cut_spacing = property(_odbpy._dbViaParams__x_cut_spacing_get, _odbpy._dbViaParams__x_cut_spacing_set)
    _y_cut_spacing = property(_odbpy._dbViaParams__y_cut_spacing_get, _odbpy._dbViaParams__y_cut_spacing_set)
    _x_top_enclosure = property(_odbpy._dbViaParams__x_top_enclosure_get, _odbpy._dbViaParams__x_top_enclosure_set)
    _y_top_enclosure = property(_odbpy._dbViaParams__y_top_enclosure_get, _odbpy._dbViaParams__y_top_enclosure_set)
    _x_bot_enclosure = property(_odbpy._dbViaParams__x_bot_enclosure_get, _odbpy._dbViaParams__x_bot_enclosure_set)
    _y_bot_enclosure = property(_odbpy._dbViaParams__y_bot_enclosure_get, _odbpy._dbViaParams__y_bot_enclosure_set)
    _num_cut_rows = property(_odbpy._dbViaParams__num_cut_rows_get, _odbpy._dbViaParams__num_cut_rows_set)
    _num_cut_cols = property(_odbpy._dbViaParams__num_cut_cols_get, _odbpy._dbViaParams__num_cut_cols_set)
    _x_origin = property(_odbpy._dbViaParams__x_origin_get, _odbpy._dbViaParams__x_origin_set)
    _y_origin = property(_odbpy._dbViaParams__y_origin_get, _odbpy._dbViaParams__y_origin_set)
    _x_top_offset = property(_odbpy._dbViaParams__x_top_offset_get, _odbpy._dbViaParams__x_top_offset_set)
    _y_top_offset = property(_odbpy._dbViaParams__y_top_offset_get, _odbpy._dbViaParams__y_top_offset_set)
    _x_bot_offset = property(_odbpy._dbViaParams__x_bot_offset_get, _odbpy._dbViaParams__x_bot_offset_set)
    _y_bot_offset = property(_odbpy._dbViaParams__y_bot_offset_get, _odbpy._dbViaParams__y_bot_offset_set)
    _top_layer = property(_odbpy._dbViaParams__top_layer_get, _odbpy._dbViaParams__top_layer_set)
    _cut_layer = property(_odbpy._dbViaParams__cut_layer_get, _odbpy._dbViaParams__cut_layer_set)
    _bot_layer = property(_odbpy._dbViaParams__bot_layer_get, _odbpy._dbViaParams__bot_layer_set)

    def __init__(self, *args):
        _odbpy._dbViaParams_swiginit(self, _odbpy.new__dbViaParams(*args))
    __swig_destroy__ = _odbpy.delete__dbViaParams

    def __eq__(self, rhs):
        return _odbpy._dbViaParams___eq__(self, rhs)

    def __ne__(self, rhs):
        return _odbpy._dbViaParams___ne__(self, rhs)

    def differences(self, diff, field, rhs):
        return _odbpy._dbViaParams_differences(self, diff, field, rhs)

    def out(self, diff, side, field):
        return _odbpy._dbViaParams_out(self, diff, side, field)

# Register _dbViaParams in _odbpy:
_odbpy._dbViaParams_swigregister(_dbViaParams)

class dbRtEndStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EXTENDED = _odbpy.dbRtEndStyle_EXTENDED
    VARIABLE = _odbpy.dbRtEndStyle_VARIABLE

    def __init__(self):
        _odbpy.dbRtEndStyle_swiginit(self, _odbpy.new_dbRtEndStyle())

    def setExtended(self):
        return _odbpy.dbRtEndStyle_setExtended(self)

    def setVariable(self, ext):
        return _odbpy.dbRtEndStyle_setVariable(self, ext)

    def getType(self):
        return _odbpy.dbRtEndStyle_getType(self)

    def getExt(self):
        return _odbpy.dbRtEndStyle_getExt(self)

    def __eq__(self, s):
        return _odbpy.dbRtEndStyle___eq__(self, s)

    def __ne__(self, s):
        return _odbpy.dbRtEndStyle___ne__(self, s)
    __swig_destroy__ = _odbpy.delete_dbRtEndStyle

# Register dbRtEndStyle in _odbpy:
_odbpy.dbRtEndStyle_swigregister(dbRtEndStyle)

class dbRtEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SEGMENT = _odbpy.dbRtEdge_SEGMENT
    TECH_VIA = _odbpy.dbRtEdge_TECH_VIA
    VIA = _odbpy.dbRtEdge_VIA
    SHORT = _odbpy.dbRtEdge_SHORT
    VWIRE = _odbpy.dbRtEdge_VWIRE
    __swig_destroy__ = _odbpy.delete_dbRtEdge

    def getBBox(self):
        return _odbpy.dbRtEdge_getBBox(self)

    def getType(self):
        return _odbpy.dbRtEdge_getType(self)

    def getSource(self):
        return _odbpy.dbRtEdge_getSource(self)

    def getTarget(self):
        return _odbpy.dbRtEdge_getTarget(self)

    def getOpposite(self, n):
        return _odbpy.dbRtEdge_getOpposite(self, n)

    def setWireType(self, value):
        return _odbpy.dbRtEdge_setWireType(self, value)

    def getWireType(self):
        return _odbpy.dbRtEdge_getWireType(self)

    def setNonDefaultRule(self, rule):
        return _odbpy.dbRtEdge_setNonDefaultRule(self, rule)

    def getNonDefaultRule(self):
        return _odbpy.dbRtEdge_getNonDefaultRule(self)

    def setResistance(self, r):
        return _odbpy.dbRtEdge_setResistance(self, r)

    def getResistance(self):
        return _odbpy.dbRtEdge_getResistance(self)

    def setCapacitance(self, c):
        return _odbpy.dbRtEdge_setCapacitance(self, c)

    def getCapacitance(self):
        return _odbpy.dbRtEdge_getCapacitance(self)

    def isVisited(self):
        return _odbpy.dbRtEdge_isVisited(self)

    def setVisited(self, value):
        return _odbpy.dbRtEdge_setVisited(self, value)

    def setProperty(self, property):
        return _odbpy.dbRtEdge_setProperty(self, property)

    def getProperty(self):
        return _odbpy.dbRtEdge_getProperty(self)

    @staticmethod
    def rtEdge(edge):
        return _odbpy.dbRtEdge_rtEdge(edge)

# Register dbRtEdge in _odbpy:
_odbpy.dbRtEdge_swigregister(dbRtEdge)

def dbRtEdge_rtEdge(edge):
    return _odbpy.dbRtEdge_rtEdge(edge)

class dbRtVia(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBBox(self):
        return _odbpy.dbRtVia_getBBox(self)

    def getVia(self):
        return _odbpy.dbRtVia_getVia(self)

    def setVia(self, via):
        return _odbpy.dbRtVia_setVia(self, via)
    __swig_destroy__ = _odbpy.delete_dbRtVia

# Register dbRtVia in _odbpy:
_odbpy.dbRtVia_swigregister(dbRtVia)

class dbRtTechVia(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, via, wire_type, rule):
        _odbpy.dbRtTechVia_swiginit(self, _odbpy.new_dbRtTechVia(via, wire_type, rule))

    def getBBox(self):
        return _odbpy.dbRtTechVia_getBBox(self)

    def getVia(self):
        return _odbpy.dbRtTechVia_getVia(self)
    __swig_destroy__ = _odbpy.delete_dbRtTechVia

# Register dbRtTechVia in _odbpy:
_odbpy.dbRtTechVia_swigregister(dbRtTechVia)

class dbRtSegment(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBBox(self):
        return _odbpy.dbRtSegment_getBBox(self)

    def setSourceEndStyle(self, style):
        return _odbpy.dbRtSegment_setSourceEndStyle(self, style)

    def getSourceEndStyle(self):
        return _odbpy.dbRtSegment_getSourceEndStyle(self)

    def setTargetEndStyle(self, style):
        return _odbpy.dbRtSegment_setTargetEndStyle(self, style)

    def getTargetEndStyle(self):
        return _odbpy.dbRtSegment_getTargetEndStyle(self)

    def getWidth(self):
        return _odbpy.dbRtSegment_getWidth(self)
    __swig_destroy__ = _odbpy.delete_dbRtSegment

# Register dbRtSegment in _odbpy:
_odbpy.dbRtSegment_swigregister(dbRtSegment)

class dbRtShort(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBBox(self):
        return _odbpy.dbRtShort_getBBox(self)
    __swig_destroy__ = _odbpy.delete_dbRtShort

# Register dbRtShort in _odbpy:
_odbpy.dbRtShort_swigregister(dbRtShort)

class dbRtVWire(dbRtEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, wire_type, rule):
        _odbpy.dbRtVWire_swiginit(self, _odbpy.new_dbRtVWire(wire_type, rule))

    def getBBox(self):
        return _odbpy.dbRtVWire_getBBox(self)
    __swig_destroy__ = _odbpy.delete_dbRtVWire

# Register dbRtVWire in _odbpy:
_odbpy.dbRtVWire_swigregister(dbRtVWire)

class dbWireEncoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _odbpy.dbWireEncoder_swiginit(self, _odbpy.new_dbWireEncoder())
    __swig_destroy__ = _odbpy.delete_dbWireEncoder

    def begin(self, wire):
        return _odbpy.dbWireEncoder_begin(self, wire)

    def append(self, wire):
        return _odbpy.dbWireEncoder_append(self, wire)

    def addPoint(self, *args):
        return _odbpy.dbWireEncoder_addPoint(self, *args)

    def addVia(self, via):
        return _odbpy.dbWireEncoder_addVia(self, via)

    def addTechVia(self, via):
        return _odbpy.dbWireEncoder_addTechVia(self, via)

    def addRect(self, deltaX1, deltaY1, deltaX2, deltaY2):
        return _odbpy.dbWireEncoder_addRect(self, deltaX1, deltaY1, deltaX2, deltaY2)

    def addITerm(self, iterm):
        return _odbpy.dbWireEncoder_addITerm(self, iterm)

    def addBTerm(self, bterm):
        return _odbpy.dbWireEncoder_addBTerm(self, bterm)

    def newPathShort(self, *args):
        return _odbpy.dbWireEncoder_newPathShort(self, *args)

    def newPathVirtualWire(self, *args):
        return _odbpy.dbWireEncoder_newPathVirtualWire(self, *args)

    def end(self):
        return _odbpy.dbWireEncoder_end(self)

    def clear(self):
        return _odbpy.dbWireEncoder_clear(self)

    def newPath(self, *args):
        return _odbpy.dbWireEncoder_newPath(self, *args)

    def newPathExt(self, *args):
        return _odbpy.dbWireEncoder_newPathExt(self, *args)

# Register dbWireEncoder in _odbpy:
_odbpy.dbWireEncoder_swigregister(dbWireEncoder)

class dbWireDecoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PATH = _odbpy.dbWireDecoder_PATH
    JUNCTION = _odbpy.dbWireDecoder_JUNCTION
    SHORT = _odbpy.dbWireDecoder_SHORT
    VWIRE = _odbpy.dbWireDecoder_VWIRE
    POINT = _odbpy.dbWireDecoder_POINT
    POINT_EXT = _odbpy.dbWireDecoder_POINT_EXT
    VIA = _odbpy.dbWireDecoder_VIA
    TECH_VIA = _odbpy.dbWireDecoder_TECH_VIA
    RECT = _odbpy.dbWireDecoder_RECT
    ITERM = _odbpy.dbWireDecoder_ITERM
    BTERM = _odbpy.dbWireDecoder_BTERM
    RULE = _odbpy.dbWireDecoder_RULE
    END_DECODE = _odbpy.dbWireDecoder_END_DECODE

    def __init__(self):
        _odbpy.dbWireDecoder_swiginit(self, _odbpy.new_dbWireDecoder())
    __swig_destroy__ = _odbpy.delete_dbWireDecoder

    def begin(self, wire):
        return _odbpy.dbWireDecoder_begin(self, wire)

    def next(self):
        return _odbpy.dbWireDecoder_next(self)

    def peek(self):
        return _odbpy.dbWireDecoder_peek(self)

    def getLayer(self):
        return _odbpy.dbWireDecoder_getLayer(self)

    def getPoint(self, *args):
        return _odbpy.dbWireDecoder_getPoint(self, *args)

    def getProperty(self):
        return _odbpy.dbWireDecoder_getProperty(self)

    def getVia(self):
        return _odbpy.dbWireDecoder_getVia(self)

    def getTechVia(self):
        return _odbpy.dbWireDecoder_getTechVia(self)

    def getRect(self, deltaX1, deltaY1, deltaX2, deltaY2):
        return _odbpy.dbWireDecoder_getRect(self, deltaX1, deltaY1, deltaX2, deltaY2)

    def getITerm(self):
        return _odbpy.dbWireDecoder_getITerm(self)

    def getBTerm(self):
        return _odbpy.dbWireDecoder_getBTerm(self)

    def getWireType(self):
        return _odbpy.dbWireDecoder_getWireType(self)

    def getRule(self):
        return _odbpy.dbWireDecoder_getRule(self)

    def getJunctionId(self):
        return _odbpy.dbWireDecoder_getJunctionId(self)

    def getJunctionValue(self):
        return _odbpy.dbWireDecoder_getJunctionValue(self)

# Register dbWireDecoder in _odbpy:
_odbpy.dbWireDecoder_swigregister(dbWireDecoder)


def dumpDecoder(inblk, net_name_or_id):
    return _odbpy.dumpDecoder(inblk, net_name_or_id)

def dumpDecoder4Net(innet):
    return _odbpy.dumpDecoder4Net(innet)
class dbBlockCallBackObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def inDbInstCreate(self, *args):
        return _odbpy.dbBlockCallBackObj_inDbInstCreate(self, *args)

    def inDbInstDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbInstDestroy(self, arg2)

    def inDbInstPlacementStatusBefore(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbInstPlacementStatusBefore(self, arg2, arg3)

    def inDbInstSwapMasterBefore(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbInstSwapMasterBefore(self, arg2, arg3)

    def inDbInstSwapMasterAfter(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbInstSwapMasterAfter(self, arg2)

    def inDbPreMoveInst(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbPreMoveInst(self, arg2)

    def inDbPostMoveInst(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbPostMoveInst(self, arg2)

    def inDbNetCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbNetCreate(self, arg2)

    def inDbNetDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbNetDestroy(self, arg2)

    def inDbITermCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbITermCreate(self, arg2)

    def inDbITermDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbITermDestroy(self, arg2)

    def inDbITermPreDisconnect(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbITermPreDisconnect(self, arg2)

    def inDbITermPostDisconnect(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbITermPostDisconnect(self, arg2, arg3)

    def inDbITermPreConnect(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbITermPreConnect(self, arg2, arg3)

    def inDbITermPostConnect(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbITermPostConnect(self, arg2)

    def inDbBTermCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBTermCreate(self, arg2)

    def inDbBTermDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBTermDestroy(self, arg2)

    def inDbBTermPreConnect(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbBTermPreConnect(self, arg2, arg3)

    def inDbBTermPostConnect(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBTermPostConnect(self, arg2)

    def inDbBTermPreDisconnect(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBTermPreDisconnect(self, arg2)

    def inDbBTermPostDisConnect(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbBTermPostDisConnect(self, arg2, arg3)

    def inDbBPinCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBPinCreate(self, arg2)

    def inDbBPinDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBPinDestroy(self, arg2)

    def inDbBlockageCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBlockageCreate(self, arg2)

    def inDbObstructionCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbObstructionCreate(self, arg2)

    def inDbObstructionDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbObstructionDestroy(self, arg2)

    def inDbRegionCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbRegionCreate(self, arg2)

    def inDbRegionAddBox(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbRegionAddBox(self, arg2, arg3)

    def inDbRegionDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbRegionDestroy(self, arg2)

    def inDbRowCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbRowCreate(self, arg2)

    def inDbRowDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbRowDestroy(self, arg2)

    def inDbWireCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbWireCreate(self, arg2)

    def inDbWireDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbWireDestroy(self, arg2)

    def inDbWirePreAttach(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbWirePreAttach(self, arg2, arg3)

    def inDbWirePostAttach(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbWirePostAttach(self, arg2)

    def inDbWirePreDetach(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbWirePreDetach(self, arg2)

    def inDbWirePostDetach(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbWirePostDetach(self, arg2, arg3)

    def inDbWirePreAppend(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbWirePreAppend(self, arg2, arg3)

    def inDbWirePostAppend(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbWirePostAppend(self, arg2, arg3)

    def inDbWirePreCopy(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbWirePreCopy(self, arg2, arg3)

    def inDbWirePostCopy(self, arg2, arg3):
        return _odbpy.dbBlockCallBackObj_inDbWirePostCopy(self, arg2, arg3)

    def inDbSWireCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbSWireCreate(self, arg2)

    def inDbSWireDestroy(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbSWireDestroy(self, arg2)

    def inDbSWirePreDestroySBoxes(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbSWirePreDestroySBoxes(self, arg2)

    def inDbSWirePostDestroySBoxes(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbSWirePostDestroySBoxes(self, arg2)

    def inDbFillCreate(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbFillCreate(self, arg2)

    def inDbBlockStreamOutBefore(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBlockStreamOutBefore(self, arg2)

    def inDbBlockStreamOutAfter(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBlockStreamOutAfter(self, arg2)

    def inDbBlockReadNetsBefore(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBlockReadNetsBefore(self, arg2)

    def inDbBlockSetDieArea(self, arg2):
        return _odbpy.dbBlockCallBackObj_inDbBlockSetDieArea(self, arg2)

    def __call__(self):
        return _odbpy.dbBlockCallBackObj___call__(self)

    def addOwner(self, new_owner):
        return _odbpy.dbBlockCallBackObj_addOwner(self, new_owner)

    def hasOwner(self):
        return _odbpy.dbBlockCallBackObj_hasOwner(self)

    def removeOwner(self):
        return _odbpy.dbBlockCallBackObj_removeOwner(self)

    def __init__(self):
        _odbpy.dbBlockCallBackObj_swiginit(self, _odbpy.new_dbBlockCallBackObj())
    __swig_destroy__ = _odbpy.delete_dbBlockCallBackObj

# Register dbBlockCallBackObj in _odbpy:
_odbpy.dbBlockCallBackObj_swigregister(dbBlockCallBackObj)

class dbIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def reversible(self):
        return _odbpy.dbIterator_reversible(self)

    def orderReversed(self):
        return _odbpy.dbIterator_orderReversed(self)

    def reverse(self, parent):
        return _odbpy.dbIterator_reverse(self, parent)

    def sequential(self):
        return _odbpy.dbIterator_sequential(self)

    def size(self, parent):
        return _odbpy.dbIterator_size(self, parent)

    def begin(self, parent):
        return _odbpy.dbIterator_begin(self, parent)

    def end(self, parent):
        return _odbpy.dbIterator_end(self, parent)

    def next(self, id):
        return _odbpy.dbIterator_next(self, id)

    def getObject(self, id):
        return _odbpy.dbIterator_getObject(self, id)
    __swig_destroy__ = _odbpy.delete_dbIterator

# Register dbIterator in _odbpy:
_odbpy.dbIterator_swigregister(dbIterator)

class dbRtNodeEdgeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odbpy.dbRtNodeEdgeIterator_swiginit(self, _odbpy.new_dbRtNodeEdgeIterator(*args))

    def assign(self, i):
        return _odbpy.dbRtNodeEdgeIterator_assign(self, i)

    def __eq__(self, i):
        return _odbpy.dbRtNodeEdgeIterator___eq__(self, i)

    def __ne__(self, i):
        return _odbpy.dbRtNodeEdgeIterator___ne__(self, i)

    def __ref__(self):
        return _odbpy.dbRtNodeEdgeIterator___ref__(self)

    def pre_inc(self):
        return _odbpy.dbRtNodeEdgeIterator_pre_inc(self)

    def post_inc(self, arg2):
        return _odbpy.dbRtNodeEdgeIterator_post_inc(self, arg2)
    __swig_destroy__ = _odbpy.delete_dbRtNodeEdgeIterator

# Register dbRtNodeEdgeIterator in _odbpy:
_odbpy.dbRtNodeEdgeIterator_swigregister(dbRtNodeEdgeIterator)

class dbRtNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, layer):
        _odbpy.dbRtNode_swiginit(self, _odbpy.new_dbRtNode(x, y, layer))

    def setPoint(self, *args):
        return _odbpy.dbRtNode_setPoint(self, *args)

    def getPoint(self, *args):
        return _odbpy.dbRtNode_getPoint(self, *args)

    def x(self):
        return _odbpy.dbRtNode_x(self)

    def y(self):
        return _odbpy.dbRtNode_y(self)

    def setLayer(self, layer):
        return _odbpy.dbRtNode_setLayer(self, layer)

    def getLayer(self):
        return _odbpy.dbRtNode_getLayer(self)

    def begin(self):
        return _odbpy.dbRtNode_begin(self)

    def end(self):
        return _odbpy.dbRtNode_end(self)

    def addObject(self, object):
        return _odbpy.dbRtNode_addObject(self, object)

    def getObjects(self, objects):
        return _odbpy.dbRtNode_getObjects(self, objects)

    def isVisited(self):
        return _odbpy.dbRtNode_isVisited(self)

    def setVisited(self, value):
        return _odbpy.dbRtNode_setVisited(self, value)

    def isOrphan(self):
        return _odbpy.dbRtNode_isOrphan(self)

    def isLeaf(self):
        return _odbpy.dbRtNode_isLeaf(self)

    def begin_objects(self):
        return _odbpy.dbRtNode_begin_objects(self)

    def end_objects(self):
        return _odbpy.dbRtNode_end_objects(self)

    @staticmethod
    def rtNode(node):
        return _odbpy.dbRtNode_rtNode(node)
    __swig_destroy__ = _odbpy.delete_dbRtNode

# Register dbRtNode in _odbpy:
_odbpy.dbRtNode_swigregister(dbRtNode)

def dbRtNode_rtNode(node):
    return _odbpy.dbRtNode_rtNode(node)

class dbTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _odbpy.dbTransform_swiginit(self, _odbpy.new_dbTransform(*args))

    def __eq__(self, t):
        return _odbpy.dbTransform___eq__(self, t)

    def __ne__(self, t):
        return _odbpy.dbTransform___ne__(self, t)

    def setOrient(self, orient):
        return _odbpy.dbTransform_setOrient(self, orient)

    def setOffset(self, offset):
        return _odbpy.dbTransform_setOffset(self, offset)

    def setTransform(self, orient, offset):
        return _odbpy.dbTransform_setTransform(self, orient, offset)

    def apply(self, *args):
        return _odbpy.dbTransform_apply(self, *args)

    def concat(self, *args):
        return _odbpy.dbTransform_concat(self, *args)

    def invert(self, *args):
        return _odbpy.dbTransform_invert(self, *args)

    def getOrient(self):
        return _odbpy.dbTransform_getOrient(self)

    def getOffset(self):
        return _odbpy.dbTransform_getOffset(self)
    __swig_destroy__ = _odbpy.delete_dbTransform

# Register dbTransform in _odbpy:
_odbpy.dbTransform_swigregister(dbTransform)


def __rshift__(*args):
    return _odbpy.__rshift__(*args)

def __lshift__(*args):
    return _odbpy.__lshift__(*args)
class dbWireGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _odbpy.dbWireGraph_swiginit(self, _odbpy.new_dbWireGraph())
    __swig_destroy__ = _odbpy.delete_dbWireGraph

    def clear(self):
        return _odbpy.dbWireGraph_clear(self)

    def decode(self, wire):
        return _odbpy.dbWireGraph_decode(self, wire)

    def encode(self, wire):
        return _odbpy.dbWireGraph_encode(self, wire)

    def getEdge(self, shape_id):
        return _odbpy.dbWireGraph_getEdge(self, shape_id)

    def createNode(self, x, y, l):
        return _odbpy.dbWireGraph_createNode(self, x, y, l)

    def createVia(self, *args):
        return _odbpy.dbWireGraph_createVia(self, *args)

    def createTechVia(self, *args):
        return _odbpy.dbWireGraph_createTechVia(self, *args)

    def createSegment(self, *args):
        return _odbpy.dbWireGraph_createSegment(self, *args)

    def createShort(self, *args):
        return _odbpy.dbWireGraph_createShort(self, *args)

    def createVWire(self, *args):
        return _odbpy.dbWireGraph_createVWire(self, *args)

    def begin_nodes(self):
        return _odbpy.dbWireGraph_begin_nodes(self)

    def end_nodes(self):
        return _odbpy.dbWireGraph_end_nodes(self)

    def begin_edges(self):
        return _odbpy.dbWireGraph_begin_edges(self)

    def end_edges(self):
        return _odbpy.dbWireGraph_end_edges(self)

    def deleteNode(self, *args):
        return _odbpy.dbWireGraph_deleteNode(self, *args)

    def deleteEdge(self, *args):
        return _odbpy.dbWireGraph_deleteEdge(self, *args)

# Register dbWireGraph in _odbpy:
_odbpy.dbWireGraph_swigregister(dbWireGraph)

class dbRtTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _odbpy.dbRtTree_swiginit(self, _odbpy.new_dbRtTree())
    __swig_destroy__ = _odbpy.delete_dbRtTree

    def clear(self):
        return _odbpy.dbRtTree_clear(self)

    def decode(self, wire, decode_bterm_iterms=True):
        return _odbpy.dbRtTree_decode(self, wire, decode_bterm_iterms)

    def encode(self, wire, encode_bterm_iterms=True):
        return _odbpy.dbRtTree_encode(self, wire, encode_bterm_iterms)

    def getEdge(self, shape_id):
        return _odbpy.dbRtTree_getEdge(self, shape_id)

    def createNode(self, x, y, l):
        return _odbpy.dbRtTree_createNode(self, x, y, l)

    def createVia(self, *args):
        return _odbpy.dbRtTree_createVia(self, *args)

    def createTechVia(self, *args):
        return _odbpy.dbRtTree_createTechVia(self, *args)

    def createSegment(self, *args):
        return _odbpy.dbRtTree_createSegment(self, *args)

    def createShort(self, *args):
        return _odbpy.dbRtTree_createShort(self, *args)

    def createVWire(self, *args):
        return _odbpy.dbRtTree_createVWire(self, *args)

    def begin_nodes(self):
        return _odbpy.dbRtTree_begin_nodes(self)

    def end_nodes(self):
        return _odbpy.dbRtTree_end_nodes(self)

    def begin_edges(self):
        return _odbpy.dbRtTree_begin_edges(self)

    def end_edges(self):
        return _odbpy.dbRtTree_end_edges(self)

    def deleteNode(self, n):
        return _odbpy.dbRtTree_deleteNode(self, n)

    def deleteEdge(self, *args):
        return _odbpy.dbRtTree_deleteEdge(self, *args)

    def move(self, T):
        return _odbpy.dbRtTree_move(self, T)

    def copy(self, T):
        return _odbpy.dbRtTree_copy(self, T)

    @staticmethod
    def duplicate(*args):
        return _odbpy.dbRtTree_duplicate(*args)

# Register dbRtTree in _odbpy:
_odbpy.dbRtTree_swigregister(dbRtTree)

def dbRtTree_duplicate(*args):
    return _odbpy.dbRtTree_duplicate(*args)


def orderWires(*args):
    return _odbpy.orderWires(*args)



#!/bin/sh
# The next line is executed by /bin/sh, but not Tcl \
exec tclsh $0 ${1+"$@"}

# Copyright (c) 2019, Parallax Software, Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Usage: regression [openroad | openroad_test | flow | tool]...
# where tool is name of an openroad tool (see define_tool_scripts below).

# Directory containing tests.
set test_dir [file dirname [file normalize [info script]]]
set openroad_dir [file dirname $test_dir]

source [file join $test_dir "regression.tcl"]
source [file join $test_dir "regression_tests.tcl"]

proc define_tool_script { tool script } {
  global tool_scripts
  dict set tool_scripts [string tolower $tool] $script
}

# roughly flow order
define_tool_script "OpenDB" "src/OpenDB/test/regression"
define_tool_script "pdr" "src/pdr/test/regression"
define_tool_script "ifp" "src/ifp/test/regression"
define_tool_script "tap" "src/tap/test/regression"
define_tool_script "ppl" "src/ppl/test/regression"
define_tool_script "pdn" "src/pdn/test/regression"
define_tool_script "ICeWall" "src/ICeWall/test/regression"
define_tool_script "mpl" "src/mpl/test/regression"
# requires par LOAD_PARTITIONERS compile option
#define_tool_script "mpl2" "src/mpl2/test/regression"
define_tool_script "par" "src/par/test/regression"
define_tool_script "Replace" "src/replace/test/regression"
define_tool_script "rsz" "src/rsz/test/regression"
define_tool_script "cts" "src/cts/test/regression"
define_tool_script "dpl" "src/dpl/test/regression"
define_tool_script "grt" "src/grt/test/regression"
define_tool_script "ant" "src/ant/test/regression"
define_tool_script "rcx" "src/rcx/test/regression"
define_tool_script "psm" "src/psm/test/regression"
define_tool_script "TritonRoute" "src/TritonRoute/test/regression"
define_tool_script "rmp" "src/rmp/test/regression"

proc run_openroad_tests { } {
  global tool_errors

  puts "------------------------------------------------------"
  puts "OpenROAD"
  # Skip flow tests until triton route is installed on CI machines
  incr tool_errors [regression_body "non_flow"]
}

proc run_tool_tests { tool } {
  global tool_errors openroad_dir tool_scripts

  puts "------------------------------------------------------"
  puts $tool
  set script [dict get $tool_scripts $tool]
  set test [file join $openroad_dir $script]
  if { ![file exists $test] } {
    puts "Error: $script not found."
    incr tool_errors
  } elseif { [catch "exec $test >@stdout"] } {
    incr tool_errors
  }
}

proc run_flow_tests { } {
  global tool_errors

  puts "------------------------------------------------------"
  puts "Flow"
  set flow_tests [group_tests "flow"]
  if { $flow_tests != {} } {
    incr tool_errors [regression_body $flow_tests]
  }
}

################################################################

set tool_errors 0

if { $argv == {} } {
  # Run all tool Unit tests
  dict for {tool script} $tool_scripts {
    run_tool_tests $tool
  }
  run_openroad_tests
} else {
  foreach arg $argv {
    set arg [string tolower $arg]
    set matched 0
    # openroad
    if { [string equal -nocase $arg "openroad"] } {
      run_openroad_tests
      set matched 1
    }

    # flow
    if { [string equal -nocase $arg "flow"] } {
      run_flow_tests
      set matched 1
    }

    # <openroad_test>
    set ord_tests {}
    foreach test [group_tests "all"] {
      if { [string match -nocase $arg $test] } {
	lappend ord_tests $test
	set matched 1
      }
    }
    if { $ord_tests != {} } {
      incr tool_errors [regression_body $ord_tests]
    }

    # <tool>
    dict for {tool script} $tool_scripts {
      if { [string match -nocase $arg $tool] } {
	run_tool_tests $tool
	set matched 1
      }
    }

    if { !$matched } {
      puts "$arg is not an openroad test or tool name."
      incr tool_errors
    }
  }
}

puts "------------------------------------------------------"
if { $tool_errors } {
  puts "Found $tool_errors tool regression failures."
} else {
  puts "Passed all tool regressions."
}

exit $tool_errors

# Local Variables:
# mode:tcl
# End:

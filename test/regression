#!/bin/sh
# The next line is executed by /bin/sh, but not Tcl \
exec tclsh $0 ${1+"$@"}

###############################################################################
##
## BSD 3-Clause License
##
## Copyright (c) 2019, Parallax Software, Inc.
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
##
## * Redistributions of source code must retain the above copyright notice, this
##   list of conditions and the following disclaimer.
##
## * Redistributions in binary form must reproduce the above copyright notice,
##   this list of conditions and the following disclaimer in the documentation
##   and#or other materials provided with the distribution.
##
## * Neither the name of the copyright holder nor the names of its
##   contributors may be used to endorse or promote products derived from
##   this software without specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
##
###############################################################################

# Usage: regression [openroad | openroad_test | flow | tool]...
# where tool is name of an openroad tool (see define_tool_scripts below).

# Directory containing tests.
set test_dir [file dirname [file normalize [info script]]]
set openroad_dir [file dirname $test_dir]

source [file join $test_dir "regression.tcl"]
source [file join $test_dir "regression_tests.tcl"]

proc define_tool_script { tool script } {
  global tool_scripts
  dict set tool_scripts [string tolower $tool] $script
}

# roughly flow order
define_tool_script "OpenDB" "src/odb/test/regression"
define_tool_script "dbSta" "src/dbSta/test/regression"
define_tool_script "stt" "src/stt/test/regression"
define_tool_script "ifp" "src/ifp/test/regression"
define_tool_script "tap" "src/tap/test/regression"
define_tool_script "ppl" "src/ppl/test/regression"
define_tool_script "pdn" "src/pdn/test/regression"
define_tool_script "pad" "src/pad/test/regression"
define_tool_script "mpl" "src/mpl/test/regression"
define_tool_script "par" "src/par/test/regression"
define_tool_script "gpl" "src/gpl/test/regression"
define_tool_script "rsz" "src/rsz/test/regression"
define_tool_script "cts" "src/cts/test/regression"
define_tool_script "dpl" "src/dpl/test/regression"
define_tool_script "dpo" "src/dpo/test/regression"
define_tool_script "grt" "src/grt/test/regression"
define_tool_script "ant" "src/ant/test/regression"
define_tool_script "rcx" "src/rcx/test/regression"
define_tool_script "psm" "src/psm/test/regression"
define_tool_script "drt" "src/drt/test/regression"
define_tool_script "rmp" "src/rmp/test/regression"
define_tool_script "utl" "src/utl/test/regression"
define_tool_script "fin" "src/fin/test/regression"

proc run_openroad_tests { } {
  global tool_errors

  puts "------------------------------------------------------"
  puts "OpenROAD"
  # Skip flow tests until triton route is installed on CI machines
  incr tool_errors [regression_body "non_flow"]
}

proc run_tool_tests { tool } {
  global tool_errors openroad_dir tool_scripts

  puts "------------------------------------------------------"
  puts $tool
  set script [dict get $tool_scripts $tool]
  set test [file join $openroad_dir $script]
  if { ![file exists $test] } {
    puts "Error: $script not found."
    incr tool_errors
  } elseif { [catch "exec $test >@stdout"] } {
    incr tool_errors
  }
}

proc run_flow_tests { } {
  global tool_errors

  puts "------------------------------------------------------"
  puts "Flow"
  set flow_tests [group_tests "flow"]
  if { $flow_tests != {} } {
    incr tool_errors [regression_body $flow_tests]
  }
}

################################################################

set tool_errors 0

if { $argv == {} } {
  # Run all tool Unit tests
  dict for {tool script} $tool_scripts {
    run_tool_tests $tool
  }
  run_openroad_tests
} else {
  foreach arg $argv {
    set arg [string tolower $arg]
    set matched 0
    # openroad
    if { [string equal -nocase $arg "openroad"] } {
      run_openroad_tests
      set matched 1
    }

    # flow
    if { [string equal -nocase $arg "flow"] } {
      run_flow_tests
      set matched 1
    }

    # <openroad_test>
    set ord_tests {}
    foreach test [group_tests "all"] {
      if { [string match -nocase $arg $test] } {
	lappend ord_tests $test
	set matched 1
      }
    }
    if { $ord_tests != {} } {
      incr tool_errors [regression_body $ord_tests]
    }

    # <tool>
    dict for {tool script} $tool_scripts {
      if { [string match -nocase $arg $tool] } {
	run_tool_tests $tool
	set matched 1
      }
    }

    if { !$matched } {
      puts "$arg is not an openroad test or tool name."
      incr tool_errors
    }
  }
}

puts "------------------------------------------------------"
if { $tool_errors } {
  puts "Found $tool_errors tool regression failures."
} else {
  puts "Passed all tool regressions."
}

exit $tool_errors

# Local Variables:
# mode:tcl
# End:

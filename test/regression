#!/bin/sh
# The next line is executed by /bin/sh, but not Tcl \
exec tclsh $0 ${1+"$@"}

# Copyright (c) 2019, Parallax Software, Inc.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Usage: regression [openroad | openroad_test | tool]...
# where tool is name of an openroad tool (see define_tool_scripts below).

# Directory containing tests.
set test_dir [file dirname [file normalize [info script]]]
set openroad_dir [file dirname $test_dir]

source [file join $test_dir "regression.tcl"]
source [file join $test_dir "regression_tests.tcl"]

proc define_tool_script { tool script } {
  global tool_scripts
  dict set tool_scripts [string tolower $tool] $script
}

define_tool_script "init_fp" "src/init_fp/test/regression"
define_tool_script "dbSta" "src/dbSta/test/regression"
define_tool_script "IoPlacer" "src/ioPlacer/test/regression"
define_tool_script "PDNgen" "src/pdngen/test/regression"
define_tool_script "ICeWall" "src/ICeWall/test/regression"
define_tool_script "TritonMacroPlace" "src/TritonMacroPlace/test/regression"
define_tool_script "Resizer" "src/resizer/test/regression"
define_tool_script "Replace" "src/replace/test/regression"
define_tool_script "TritonCTS" "src/TritonCTS/test/regression"
define_tool_script "OpenDP" "src/opendp/test/regression"
define_tool_script "FastRoute" "src/FastRoute/test/regression"
define_tool_script "TapCell" "src/tapcell/test/regression"
define_tool_script "OpenPhySyn" "src/OpenPhySyn/test/regression"
define_tool_script "PDNSim" "src/PDNSim/test/regression"

proc run_openroad_tests { } {
  global tool_errors

  puts "------------------------------------------------------"
  puts "OpenROAD"
  incr tool_errors [regression_body {}]
}

proc run_tool_tests { tool } {
  global tool_errors openroad_dir tool_scripts

  puts "------------------------------------------------------"
  puts $tool
  set script [dict get $tool_scripts $tool]
  if { [catch "exec [file join $openroad_dir $script] >@stdout"] } {
    incr tool_errors
  }
}

################################################################

set tool_errors 0

if { $argv == {} } {
  dict for {tool script} $tool_scripts {
    run_tool_tests $tool
  }
  run_openroad_tests
} else {
  foreach arg $argv {
    set arg [string tolower $arg]
    set matched 0
    if { [string equal -nocase $arg "openroad"] } {
      run_openroad_tests
      set matched 1
    }

    set ord_tests {}
    foreach test [group_tests "all"] {
      if { [string match $arg $test] } {
	lappend ord_tests $test
	set matched 1
      }
    }
    if { $ord_tests != {} } {
      incr tool_errors [regression_body $ord_tests]
    }

    dict for {tool script} $tool_scripts {
      if { [string match $arg $tool] } {
	run_tool_tests $tool
	set matched 1
      }
    }
    if { !$matched } {
      puts "$arg is not an openroad test or tool name."
    }
  }
}

puts "------------------------------------------------------"
if { $tool_errors } {
  puts "Found $tool_errors tool regression failures."
} else {
  puts "Passed all tool regressions."
}

exit $tool_errors

# Local Variables:
# mode:tcl
# End:
